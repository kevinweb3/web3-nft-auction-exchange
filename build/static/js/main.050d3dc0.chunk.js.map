{"version":3,"sources":["hooks/ContractLoader.js","hooks/ContractExistsAtAddress.js","constants.js","hooks/UserProvider.js","hooks/Poller.js","hooks/OnBlock.js","hooks/ContractReader.js","hooks/Balance.js","hooks/LookupAddress.js","components/Address.js","helpers/Transactor.js","components/Balance.js","components/Blockie.js","components/AddressInput.js","components/EtherInput.js","components/Wallet.js","components/Account.js","components/Contract/utils.js","components/Contract/DisplayVariable.js","components/Contract/FunctionForm.js","components/Contract/index.js","components/Ramp.js","components/Faucet.js","components/Header.js","components/Timeline.js","components/GasGauge.js","components/BytesStringInput.js","components/Swap.js","components/ThemeSwitch.js","components/NoWalletDetected.js","components/Loading.js","assets.js","App.js","hooks/ExchangePrice.js","hooks/GasPrice.js","hooks/ExternalContractLoader.js","hooks/EventListener.js","index.js","assetsAuctionStat.js","contracts sync /^/.*/.abi/.js$","contracts sync /^/.*/.bytecode/.js$","contracts sync /^/.*/.address/.js$","contracts/contracts.js"],"names":["useContractLoader","providerOrSigner","contracts","setContracts","useState","useEffect","async","signer","accounts","listAccounts","length","getSigner","newContracts","require","reduce","accumulator","contractName","loadContract","newContract","Contract","concat","bytecode","e","console","log","loadContracts","useContractExistsAtAddress","provider","contractAddress","contractIsDeployed","setContractIsDeployed","isAddress","getCode","checkDeployment","INFURA_ID","DAI_ABI","inputs","internalType","name","type","payable","stateMutability","anonymous","indexed","constant","outputs","NETWORK","chainId","n","NETWORKS","localhost","color","blockExplorer","rpcUrl","window","location","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","price","gasPrice","matic","mumbai","useUserProvider","injectedProvider","localProvider","useMemo","burnerConfig","pathname","indexOf","rawPK","incomingPK","hash","replace","privateKey","history","pushState","currentPrivateKey","localStorage","getItem","setItem","Date","now","connection","url","Web3Provider","BurnerProvider","networkName","_network","usePoller","fn","delay","extraWatch","savedCallback","useRef","current","id","setInterval","clearInterval","useOnBlock","args","listener","blockNumber","on","off","useContractReader","functionName","pollTime","formatter","onChange","adjustPollTime","value","setValue","setTimeout","bind","this","updateValue","newValue","useBalance","contract","address","arguments","undefined","balance","setBalance","pollBalance","useCallback","SimpleToken","newBalance","parseInt","balanceOf","useLookupAddress","ensName","setEnsName","cache","JSON","parse","timestamp","reportedName","lookupAddress","resolvedAddress","resolveName","getAddress","then","stringify","Text","Typography","Address","props","ens","ensProvider","currentTheme","useThemeSwitcher","React","createElement","Skeleton","avatar","paragraph","rows","displayAddress","substr","size","etherscanLink","blockExplorerLink","minimized","style","verticalAlign","target","href","rel","Blockies","seed","toLowerCase","scale","text","editable","copyable","fontSize","paddingLeft","Transactor","etherscan","network","getNetwork","options","dappId","system","networkId","transactionHandler","txInformation","notify","Notify","etherscanNetwork","etherscanTxUrl","result","tx","Promise","parseUnits","gasLimit","hexlify","sendTransaction","emitter","transaction","onclick","open","notification","info","message","description","placement","error","Balance","dollarMode","setDollarMode","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","dollarMultiplier","padding","cursor","onClick","Blockie","Object","assign","AddressInput","scan","setScan","currentValue","scannerButton","marginTop","Badge","count","CameraOutlined","QrcodeOutlined","updateAddress","possibleAddress","scanner","zIndex","position","left","top","width","QrReader","resolution","onError","onScan","possibleNewValue","lastIndexOf","Input","autoComplete","autoFocus","placeholder","prefix","addonAfter","EtherInput","mode","setMode","display","setDisplay","option","title","usdValue","ethValue","Paragraph","Wallet","signerAddress","useUserAddress","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","Tooltip","WalletOutlined","rotate","receiveButton","privateKeyButton","QR","level","includeMargin","renderAs","imageSettings","excavate","Button","key","KeyOutlined","wallet","ethers","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","createRandom","_signingKey","reload","inputStyle","Modal","visible","Spin","float","paddingRight","onOk","onCancel","footer","disabled","loading","parseEther","to","SendOutlined","Account","_ref","userProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","marginLeft","shape","tryToDisplay","thing","toNumber","formatUnits","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","Row","Col","span","textAlign","opacity","Divider","utils","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputIndex","map","input","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","BigNumber","from","toHexString","buttonIcon","defaultValue","bordered","height","innerIndex","baseType","returned","overrides","noContractDisplay","class","borderRadius","fontWeight","marginRight","role","aria-label","customContract","account","show","displayedContractFunctions","values","interface","functions","filter","contractDisplay","isQueryable","connect","Card","Ramp","modalUp","setModalUp","allFaucets","networks","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","Faucet","setAddress","blockie","icon","Header","PageHeader","GasGauge","constants","Option","Select","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","className","right","bottom","Switch","checked","isChecked","dark","light","NoWalletDetected","Loading","background","BufferList","assets","assetsInitAuctionStat","a","assetsAuctionStat","forSale","forAuction","assetAuctionType","allUserCollections","usersBid","targetNetwork","STARTING_JSON","external_url","image","attributes","trait_type","WalletCheck","walletExist","approvePermission","connecting","scaffoldEthProvider","StaticJsonRpcProvider","mainnetInfura","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","infuraId","App","ethereum","permissionApproved","setInjectedProvider","setPrice","pollPrice","DAI","Token","pair","Fetcher","fetchPairData","WETH","route","Route","midPrice","toSignificant","getPrice","useExchangePrice","speed","setGasPrice","axios","get","response","newGasPrice","data","catch","useGasPrice","localChainId","selectedChainId","readContracts","writeContracts","yourLocalBalance","mainnetDAIContract","ABI","optionalBytecode","setContract","useExternalContractLoader","myMainnetDAIBalance","transferEvents","eventName","startBlock","updates","setUpdates","resetEventsBlock","_len","Array","_key","messages","pop","removeListener","useEventListener","modalVisible","setModalVisible","auctionDetails","setAuctionDetails","duration","auctionToken","setAuctionToken","yourCollectibles","setYourCollectibles","userCollections","setUserCollections","networkDisplay","Alert","closable","setRoute","faucetHint","faucetAvailable","currentSupply","mint","grabFounds","yourJSON","setYourJSON","sending","setSending","ipfsHash","setIpfsHash","ipfsDownHash","setIpfsDownHash","downloading","setDownloading","ipfsContent","setIpfsContent","yourBid","setYourBid","transferToAddresses","setTransferToAddresses","loadedAssets","setLoadedAssets","url2TokenID","setUrl2TokenID","auctionType","setAuctionType","Hover","setHover","updateYourCollectibles","assetUpdate","owner","auctionInfo","seller","tokenAddress","maxBid","maxBidUser","isActive","bidAmounts","users","tokenId","MYERC721","ownerOf","nftAddress","AuctionUnfixedPrice","getTokenAuctionDetails","AuctionFixedPrice","startAuction","tokenUri","connectWallet","placeBid","bidPrice","BidType","bid","purchaseNFTToken","completeAuction","executeSale","cancelAuction","cancelAution","mintItem","mintWithTokenURI","totalSupply","galleryList","slice","cardActions","deadline","getTime","isEnded","auctionTypeInner","Fragment","marginBottom","toString","format","AddressZero","alignItems","InputNumber","newBid","flexGrow","actions","LinkOutlined","maxWidth","src","getBalance","setApprovalForAll","approve","toggleHover","erc20Address","writeAuction","erc20Price","blockDuration","Math","floor","createTokenAuction","index","splice","handleCancel","okButtonProps","okText","newPrice","newDuration","Radio","Group","BrowserRouter","Menu","selectedKeys","Item","Link","exact","path","paddingBottom","StackGrid","columnWidth","gutterWidth","gutterHeight","List","dataSource","renderItem","item","paddingTop","ReactJson","enableClipboard","onEdit","edit","updated_src","onAdd","add","onDelete","del","placeHolder","getFromIPFS","ThemeSwitch","onMouseEnter","onMouseLeave","clearCachedProvider","align","gutter","prevTheme","subgraphUri","client","ApolloClient","uri","InMemoryCache","ReactDOM","render","ApolloProvider","ThemeSwitcherProvider","themeMap","defaultTheme","document","getElementById","module","exports","webpackEmptyContext","req","Error","code","keys","resolve"],"mappings":"sgBA0Ce,SAASA,EAAkBC,GACxC,MAAOC,EAAWC,GAAgBC,qBAgClC,OA/BAC,oBAAU,MACRC,iBACE,GAAgC,qBAArBL,EACT,IAEE,IAAIM,EACAC,EACAP,GAA6D,oBAAlCA,EAAiBQ,eAC9CD,QAAiBP,EAAiBQ,gBAIlCF,EADEC,GAAYA,EAASE,OAAS,EACvBT,EAAiBU,YAEjBV,EAGX,MAEMW,EAFeC,EAAQ,KAEKC,OAAO,CAACC,EAAaC,KACrDD,EAAYC,GApCHC,EAACD,EAAcT,KAClC,MAAMW,EAAc,IAAIC,IACtBN,OAAQ,KAADO,OAAiBJ,EAAY,gBACpCH,OAAQ,KAADO,OAAiBJ,EAAY,YACpCT,GAEF,IACEW,EAAYG,SAAWR,OAAQ,KAADO,OAAiBJ,EAAY,iBAC3D,MAAOM,GACPC,QAAQC,IAAIF,GAEd,OAAOJ,GAyB+BD,CAAaD,EAAcT,GAChDQ,GACN,IACHZ,EAAaS,GACb,MAAOU,GACPC,QAAQC,IAAI,4BAA6BF,IAI/CG,IACC,CAACxB,IACGC,E,YCtCMwB,MAnBoBA,CAACC,EAAUC,KAC5C,MAAOC,EAAoBC,GAAyB1B,oBAAS,GAe7D,OAVAC,oBAAU,KAOJsB,GALoBrB,WACtB,IAAKyB,YAAUH,GAAkB,OAAO,EACxC,MAAMP,QAAiBM,EAASK,QAAQJ,GACxCE,EAAmC,QAAbT,IAEVY,IACb,CAACN,EAAUC,IAEPC,G,oDCjCF,MAAMK,EAAY,mCAYZC,EAAU,CACrB,CACEC,OAAQ,CAAC,CAAEC,aAAc,UAAWC,KAAM,WAAYC,KAAM,YAC5DC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,eAER,CACEG,WAAW,EACXN,OAAQ,CACN,CAAEO,SAAS,EAAMN,aAAc,UAAWC,KAAM,MAAOC,KAAM,WAC7D,CAAEI,SAAS,EAAMN,aAAc,UAAWC,KAAM,MAAOC,KAAM,WAC7D,CAAEI,SAAS,EAAON,aAAc,UAAWC,KAAM,MAAOC,KAAM,YAEhED,KAAM,WACNC,KAAM,SAER,CACEG,WAAW,EACXN,OAAQ,CACN,CAAEO,SAAS,EAAMN,aAAc,SAAUC,KAAM,MAAOC,KAAM,UAC5D,CAAEI,SAAS,EAAMN,aAAc,UAAWC,KAAM,MAAOC,KAAM,WAC7D,CAAEI,SAAS,EAAMN,aAAc,UAAWC,KAAM,OAAQC,KAAM,WAC9D,CAAEI,SAAS,EAAMN,aAAc,UAAWC,KAAM,OAAQC,KAAM,WAC9D,CAAEI,SAAS,EAAON,aAAc,QAASC,KAAM,OAAQC,KAAM,UAE/DD,KAAM,UACNC,KAAM,SAER,CACEG,WAAW,EACXN,OAAQ,CACN,CAAEO,SAAS,EAAMN,aAAc,UAAWC,KAAM,MAAOC,KAAM,WAC7D,CAAEI,SAAS,EAAMN,aAAc,UAAWC,KAAM,MAAOC,KAAM,WAC7D,CAAEI,SAAS,EAAON,aAAc,UAAWC,KAAM,MAAOC,KAAM,YAEhED,KAAM,WACNC,KAAM,SAER,CACEK,UAAU,EACVR,OAAQ,GACRE,KAAM,mBACNO,QAAS,CAAC,CAAER,aAAc,UAAWC,KAAM,GAAIC,KAAM,YACrDC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,GACRE,KAAM,kBACNO,QAAS,CAAC,CAAER,aAAc,UAAWC,KAAM,GAAIC,KAAM,YACrDC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,CACN,CAAEC,aAAc,UAAWC,KAAM,GAAIC,KAAM,WAC3C,CAAEF,aAAc,UAAWC,KAAM,GAAIC,KAAM,YAE7CD,KAAM,YACNO,QAAS,CAAC,CAAER,aAAc,UAAWC,KAAM,GAAIC,KAAM,YACrDC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,CACN,CAAEC,aAAc,UAAWC,KAAM,MAAOC,KAAM,WAC9C,CAAEF,aAAc,UAAWC,KAAM,MAAOC,KAAM,YAEhDD,KAAM,UACNO,QAAS,CAAC,CAAER,aAAc,OAAQC,KAAM,GAAIC,KAAM,SAClDC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,CAAC,CAAEC,aAAc,UAAWC,KAAM,GAAIC,KAAM,YACpDD,KAAM,YACNO,QAAS,CAAC,CAAER,aAAc,UAAWC,KAAM,GAAIC,KAAM,YACrDC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,CACN,CAAEC,aAAc,UAAWC,KAAM,MAAOC,KAAM,WAC9C,CAAEF,aAAc,UAAWC,KAAM,MAAOC,KAAM,YAEhDD,KAAM,OACNO,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,GACRE,KAAM,WACNO,QAAS,CAAC,CAAER,aAAc,QAASC,KAAM,GAAIC,KAAM,UACnDC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,CAAC,CAAEC,aAAc,UAAWC,KAAM,MAAOC,KAAM,YACvDD,KAAM,OACNO,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,CACN,CAAEC,aAAc,UAAWC,KAAM,MAAOC,KAAM,WAC9C,CAAEF,aAAc,UAAWC,KAAM,MAAOC,KAAM,YAEhDD,KAAM,OACNO,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,CACN,CAAEC,aAAc,UAAWC,KAAM,MAAOC,KAAM,WAC9C,CAAEF,aAAc,UAAWC,KAAM,MAAOC,KAAM,WAC9C,CAAEF,aAAc,UAAWC,KAAM,MAAOC,KAAM,YAEhDD,KAAM,OACNO,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,GACRE,KAAM,OACNO,QAAS,CAAC,CAAER,aAAc,SAAUC,KAAM,GAAIC,KAAM,WACpDC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,CAAC,CAAEC,aAAc,UAAWC,KAAM,GAAIC,KAAM,YACpDD,KAAM,SACNO,QAAS,CAAC,CAAER,aAAc,UAAWC,KAAM,GAAIC,KAAM,YACrDC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,CACN,CAAEC,aAAc,UAAWC,KAAM,SAAUC,KAAM,WACjD,CAAEF,aAAc,UAAWC,KAAM,UAAWC,KAAM,WAClD,CAAEF,aAAc,UAAWC,KAAM,QAASC,KAAM,WAChD,CAAEF,aAAc,UAAWC,KAAM,SAAUC,KAAM,WACjD,CAAEF,aAAc,OAAQC,KAAM,UAAWC,KAAM,QAC/C,CAAEF,aAAc,QAASC,KAAM,IAAKC,KAAM,SAC1C,CAAEF,aAAc,UAAWC,KAAM,IAAKC,KAAM,WAC5C,CAAEF,aAAc,UAAWC,KAAM,IAAKC,KAAM,YAE9CD,KAAM,SACNO,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,CACN,CAAEC,aAAc,UAAWC,KAAM,MAAOC,KAAM,WAC9C,CAAEF,aAAc,UAAWC,KAAM,MAAOC,KAAM,YAEhDD,KAAM,OACNO,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,CACN,CAAEC,aAAc,UAAWC,KAAM,MAAOC,KAAM,WAC9C,CAAEF,aAAc,UAAWC,KAAM,MAAOC,KAAM,YAEhDD,KAAM,OACNO,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,CAAC,CAAEC,aAAc,UAAWC,KAAM,MAAOC,KAAM,YACvDD,KAAM,OACNO,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,GACRE,KAAM,SACNO,QAAS,CAAC,CAAER,aAAc,SAAUC,KAAM,GAAIC,KAAM,WACpDC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,GACRE,KAAM,cACNO,QAAS,CAAC,CAAER,aAAc,UAAWC,KAAM,GAAIC,KAAM,YACrDC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,CACN,CAAEC,aAAc,UAAWC,KAAM,MAAOC,KAAM,WAC9C,CAAEF,aAAc,UAAWC,KAAM,MAAOC,KAAM,YAEhDD,KAAM,WACNO,QAAS,CAAC,CAAER,aAAc,OAAQC,KAAM,GAAIC,KAAM,SAClDC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,CACN,CAAEC,aAAc,UAAWC,KAAM,MAAOC,KAAM,WAC9C,CAAEF,aAAc,UAAWC,KAAM,MAAOC,KAAM,WAC9C,CAAEF,aAAc,UAAWC,KAAM,MAAOC,KAAM,YAEhDD,KAAM,eACNO,QAAS,CAAC,CAAER,aAAc,OAAQC,KAAM,GAAIC,KAAM,SAClDC,SAAS,EACTC,gBAAiB,aACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,GACRE,KAAM,UACNO,QAAS,CAAC,CAAER,aAAc,SAAUC,KAAM,GAAIC,KAAM,WACpDC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,YAER,CACEK,UAAU,EACVR,OAAQ,CAAC,CAAEC,aAAc,UAAWC,KAAM,GAAIC,KAAM,YACpDD,KAAM,QACNO,QAAS,CAAC,CAAER,aAAc,UAAWC,KAAM,GAAIC,KAAM,YACrDC,SAAS,EACTC,gBAAiB,OACjBF,KAAM,aAIGO,EAAWC,IACtB,IAAK,IAAIC,KAAKC,EACZ,GAAIA,EAASD,GAAGD,UAAYA,EAC1B,OAAOE,EAASD,IAKTC,EAAW,CACtBC,UAAW,CACTZ,KAAM,YACNa,MAAO,UACPJ,QAAS,MACTK,cAAe,GACfC,OAAQ,UAAYC,OAAOC,SAASC,SAAW,SAEjDC,QAAS,CACPnB,KAAM,UACNa,MAAO,UACPJ,QAAS,EACTM,OAAO,gCAADjC,OAAkCc,GACxCkB,cAAe,yBAEjBM,MAAO,CACLpB,KAAM,QACNa,MAAO,UACPJ,QAAS,GACTM,OAAO,8BAADjC,OAAgCc,GACtCkB,cAAe,8BACfO,OAAQ,0CAEVC,QAAS,CACPtB,KAAM,UACNa,MAAO,UACPJ,QAAS,EACTM,OAAO,gCAADjC,OAAkCc,GACxCyB,OAAQ,6BACRP,cAAe,iCAEjBS,QAAS,CACPvB,KAAM,UACNa,MAAO,UACPJ,QAAS,EACTY,OAAQ,6BACRP,cAAe,gCACfC,OAAO,gCAADjC,OAAkCc,IAE1C4B,OAAQ,CACNxB,KAAM,SACNa,MAAO,UACPJ,QAAS,EACTY,OAAQ,kCACRP,cAAe,+BACfC,OAAO,+BAADjC,OAAiCc,IAEzC6B,KAAM,CACJzB,KAAM,OACNa,MAAO,UACPJ,QAAS,IACTiB,MAAO,EACPC,SAAU,IACVZ,OAAQ,0BACRM,OAAQ,2BACRP,cAAe,oCAEjBc,MAAO,CACL5B,KAAM,QACNa,MAAO,UACPJ,QAAS,IACTiB,MAAO,EACPC,SAAU,IACVZ,OAAQ,qCACRM,OAAQ,gCACRP,cAAe,6CAEjBe,OAAQ,CACN7B,KAAM,SACNa,MAAO,UACPJ,QAAS,MACTiB,MAAO,EACPC,SAAU,IACVZ,OAAQ,oCACRM,OAAQ,gCACRP,cAAe,yCCtTJgB,MAxCSA,CAACC,EAAkBC,IAC3CC,kBAAQ,KACN,GAAIF,EAEF,OADA9C,QAAQC,IAAI,wCACL6C,EAET,IAAKC,EAAe,OAEpB,IAAIE,EAAe,GAEnB,GAAGlB,OAAOC,SAASkB,UACdnB,OAAOC,SAASkB,SAASC,QAAQ,QAAQ,EAAE,CAC5C,IACIC,EADAC,EAAatB,OAAOC,SAASsB,KAAKC,QAAQ,IAAI,IAElD,GAAuB,KAApBF,EAAWlE,QAAiC,KAApBkE,EAAWlE,OAAY,CAChDa,QAAQC,IAAI,wCACZmD,EAAMC,EACNJ,EAAaO,WAAaJ,EAC1BrB,OAAO0B,QAAQC,UAAU,GAAG,GAAI,KAChC,IAAIC,EAAoB5B,OAAO6B,aAAaC,QAAQ,kBACjDF,GAAqBA,IAAoBP,GAC1CrB,OAAO6B,aAAaE,QAAQ,wBAAwBC,KAAKC,MAAML,GAEjE5B,OAAO6B,aAAaE,QAAQ,iBAAiBV,IAMnD,GADApD,QAAQC,IAAI,qCAA2BgD,GACnCF,EAAckB,YAAclB,EAAckB,WAAWC,IAEvD,OADAjB,EAAanB,OAASiB,EAAckB,WAAWC,IACxC,IAAIC,IAAa,IAAIC,IAAenB,IACxC,CAEH,MAAMoB,EAActB,EAAcuB,UAAYvB,EAAcuB,SAASvD,KAErE,OADAkC,EAAanB,OAAM,WAAAjC,OAAcwE,GAAe,UAAS,kBAAAxE,OAAiBc,GACnE,IAAIwD,IAAa,IAAIC,IAAenB,MAE5C,CAACH,EAAkBC,ICzDP,SAASwB,EAAUC,EAAIC,EAAOC,GAC3C,MAAMC,EAAgBC,mBAEtB9F,oBAAU,KACR6F,EAAcE,QAAUL,GACvB,CAACA,IAGJ1F,oBAAU,KAIR,GAAc,OAAV2F,EAAgB,CAClB,MAAMK,EAAKC,aAJb,WACEJ,EAAcE,YAGeJ,GAC7B,MAAO,IAAMO,cAAcF,KAE5B,CAACL,IAEJ3F,oBAAU,KACR0F,KACA,CAAEE,ICnBS,SAASO,EAAW7E,EAAUoE,EAAIU,GAC/C,MAAMP,EAAgBC,mBAEtB9F,oBAAU,KACR6F,EAAcE,QAAUL,GACvB,CAACA,IAGJ1F,oBAAU,KACR,GAAI0F,GAAMpE,EAAU,CAClB,MAAM+E,EAAWC,IAGXF,GAAQA,EAAK/F,OAAS,EACxBwF,EAAcE,WAAWK,GAEzBP,EAAcE,WAMlB,OAFAzE,EAASiF,GAAG,QAASF,GAEd,KACL/E,EAASkF,IAAI,QAASH,IAGxB,MAAO,QAER,CAAC/E,ICTS,SAASmF,EAAkB5G,EAAWc,EAAc+F,EAAcN,EAAMO,EAAUC,EAAWC,GAC1G,IAAIC,EAAiB,EACjBH,EACFG,EAAiBH,EACPA,GAA4B,kBAATP,IAE7BU,EAAiBV,GAGnB,MAAOW,EAAOC,GAAYjH,qBAC1BC,oBAAU,KACgB,oBAAb6G,GACTI,WAAWJ,EAASK,KAAKC,KAAMJ,GAAQ,IAExC,CAACA,EAAOF,IAEX,MAAMO,EAAcnH,UAClB,IACE,IAAIoH,EAtCI,EAyCNA,EADEjB,GAAQA,EAAK/F,OAAS,QACPR,EAAUc,GAAc+F,MAAiBN,SAIzCvG,EAAUc,GAAc+F,KAEvCE,GAAkC,oBAAdA,IACtBS,EAAWT,EAAUS,IAGnBA,IAAaN,GACfC,EAASK,GAEX,MAAOpG,GACPC,QAAQC,IAAIF,KAuBhB,OAlBAkF,EAAWtG,GAAaA,EAAUc,IAAoC,IAAnBmG,GAAwBjH,EAAUc,GAAcW,SAAU,KACvGzB,GAAaA,EAAUc,IAAoC,IAAnBmG,GAC1CM,MAKJ3B,EACExF,UACMJ,GAAaA,EAAUc,IAAiBmG,EAAiB,GAE3DM,KAGJN,EACAjH,GAAaA,EAAUc,IAGlBoG,EC5DM,SAASO,EAAWC,EAAUC,EAASlG,GAAwB,IAAfqF,EAAQc,UAAApH,OAAA,QAAAqH,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAE1E,MAAOE,EAASC,GAAc7H,qBAExB8H,EAAcC,sBAAY7H,MAAOsH,EAAUC,KAC/C,GAAID,EAASQ,aAAeP,EAAS,CACnC,MAAMQ,EAAaC,eAAeV,EAASQ,YAAYG,UAAUV,IAC7DQ,IAAeL,GACjBC,EAAWI,KAGd,CAACT,EAAUC,IAiBd,OAdArB,EAAyB,IAAbQ,GAAkBrF,EAAU,KAClCiG,GAAYC,GAAwB,IAAbb,GACzBkB,EAAYN,EAAUC,KAK1B/B,EAAUxF,UACJsH,GAAYC,GAAWb,EAAW,GAEpCkB,KAEDlB,EAAUY,GAAYC,GAElBG,ECqBQQ,MA7BUA,CAAC7G,EAAUkG,KAClC,MAAOY,EAASC,GAActI,mBAASyH,GAyBvC,OAtBAxH,oBAAU,KAER,IAAIsI,EAAQrF,OAAO6B,aAAaC,QAAQ,YAAYyC,GACpDc,EAAQA,GAASC,KAAKC,MAAMF,GAExBA,GAASA,EAAMG,UAAUxD,KAAKC,MAChCmD,EAAWC,EAAMrG,MAEbX,GAlCYrB,OAAOqB,EAAUkG,KACrC,GAAG9F,YAAU8F,GAEX,IAGE,MAAMkB,QAAqBpH,EAASqH,cAAcnB,GAE5CoB,QAAwBtH,EAASuH,YAAYH,GAEnD,OAAII,YAAWtB,KAAasB,YAAWF,GAC9BF,EAEAI,YAAWtB,GAEpB,MAAOvG,GACP,OAAO6H,YAAWtB,GAGtB,OAAO,GAgBDmB,CAAcrH,EAAUkG,GAASuB,KAAM9G,IACjCA,IACFoG,EAAWpG,GACXgB,OAAO6B,aAAaE,QAAQ,YAAYwC,EAASe,KAAKS,UAAU,CAC9DP,UAAUxD,KAAKC,MAAM,KACrBjD,KAAKA,SAMd,CAACX,EAAUkG,EAASa,IAEhBD,G,qBCrCT,MAAM,KAAEa,IAASC,IAIF,SAASC,GAAQC,GAE9B,MAAM5B,EAAU4B,EAAMrC,OAASqC,EAAM5B,QAE/B6B,EAAMlB,EAAiBiB,EAAME,YAAa9B,IAE1C,aAAE+B,GAAiBC,eAEzB,IAAKhC,EACH,OACEiC,IAAAC,cAAA,YACED,IAAAC,cAACC,IAAQ,CAACC,QAAM,EAACC,UAAW,CAAEC,KAAM,MAK1C,IAAIC,EAAiBvC,EAAQwC,OAAO,EAAG,GAEnCX,GAAOA,EAAIhF,QAAQ,MAAM,EAC3B0F,EAAiBV,EACO,UAAfD,EAAMa,KACfF,GAAkB,MAAQvC,EAAQwC,QAAQ,GAClB,SAAfZ,EAAMa,OACfF,EAAiBvC,GAGnB,MAAM0C,EA5BkBC,EAAC3C,EAASzE,IAAa,GAAAhC,OAAQgC,GAAiB,wBAA0B,YAAUhC,OAAGyG,GA4BzF2C,CAAkB3C,EAAS4B,EAAMrG,eACvD,GAAIqG,EAAMgB,UACR,OACEX,IAAAC,cAAA,QAAMW,MAAO,CAAEC,cAAe,WAC5Bb,IAAAC,cAAA,KAAGW,MAAO,CAAEvH,MAAwB,UAAjByG,EAA2B,UAAY,QAAUgB,OAAQ,SAAUC,KAAMN,EAAeO,IAAI,uBAC7GhB,IAAAC,cAACgB,IAAQ,CAACC,KAAMnD,EAAQoD,cAAeX,KAAM,EAAGY,MAAO,MAM/D,IAAIC,EAmBJ,OAjBEA,EADE1B,EAAMvC,SAEN4C,IAAAC,cAACT,GAAI,CAAC8B,SAAU,CAAElE,SAAUuC,EAAMvC,UAAYmE,SAAU,CAAEF,KAAMtD,IAC9DiC,IAAAC,cAAA,KAAGW,MAAO,CAAEvH,MAAwB,UAAjByG,EAA2B,UAAY,QAAUgB,OAAQ,SAAUC,KAAMN,EAAeO,IAAI,uBAC5GV,IAMLN,IAAAC,cAACT,GAAI,CAAC+B,SAAU,CAAEF,KAAMtD,IACtBiC,IAAAC,cAAA,KAAGW,MAAO,CAAEvH,MAAwB,UAAjByG,EAA2B,UAAY,QAAUgB,OAAQ,SAAUC,KAAMN,EAAeO,IAAI,uBAC5GV,IAOPN,IAAAC,cAAA,YACED,IAAAC,cAAA,QAAMW,MAAO,CAAEC,cAAe,WAC5Bb,IAAAC,cAACgB,IAAQ,CAACC,KAAMnD,EAAQoD,cAAeX,KAAM,EAAGY,MAAOzB,EAAM6B,SAAS7B,EAAM6B,SAAS,EAAE,KAEzFxB,IAAAC,cAAA,QAAMW,MAAO,CAAEC,cAAe,SAAUY,YAAa,EAAGD,SAAU7B,EAAM6B,SAAS7B,EAAM6B,SAAS,KAAOH,I,8HCrF9F,SAASK,GAAW7J,EAAUsC,EAAUwH,GACrD,GAAwB,qBAAb9J,EAET,OAAOrB,UACL,MAAMC,EAASoB,EAAShB,YAClB+K,QAAgB/J,EAASgK,aAC/BpK,QAAQC,IAAI,UAAWkK,GACvB,MAAME,EAAU,CACdC,ORZ0B,uCQa1BC,OAAQ,WACRC,UAAWL,EAAQ3I,QAEnBiJ,mBAAoBC,IAClB1K,QAAQC,IAAI,YAAayK,KAGvBC,EAASC,aAAOP,GAEtB,IAAIQ,EAAmB,GACnBV,EAAQpJ,MAAQoJ,EAAQ3I,QAAU,IACpCqJ,EAAmBV,EAAQpJ,KAAO,KAGpC,IAAI+J,EAAiB,WAAaD,EAAmB,mBAC7B,MAApBV,EAAQ3I,UACVsJ,EAAiB,uCAGnB,IACE,IAAIC,EAkBJ,GAjBIC,aAAcC,SAChBjL,QAAQC,IAAI,cAAe+K,GAC3BD,QAAeC,IAEVA,EAAGtI,WACNsI,EAAGtI,SAAWA,GAAYwI,aAAW,MAAO,SAEzCF,EAAGG,WACNH,EAAGG,SAAWC,aAAQ,OAExBpL,QAAQC,IAAI,aAAc+K,GAC1BD,QAAe/L,EAAOqM,gBAAgBL,IAExChL,QAAQC,IAAI,UAAW8K,GAInB,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,KAAK5H,QAAQgH,EAAQ3I,UAAY,EAAG,CACvD,MAAM,QAAE8J,GAAYX,EAAOrH,KAAKyH,EAAOzH,MACvCgI,EAAQjG,GAAG,MAAOkG,IACT,CACLC,QAASA,IAAMzJ,OAAO0J,MAAMvB,GAAaY,GAAkBS,EAAYjI,cAI3EoI,KAAaC,KAAK,CAChBC,QAAS,yBACTC,YAAad,EAAOzH,KACpBwI,UAAW,gBAIf,OAAOf,EACP,MAAOhL,GACPC,QAAQC,IAAIF,GACZC,QAAQC,IAAI,qBAAsBF,EAAE6L,SACpCF,KAAaK,MAAM,CACjBH,QAAS,oBACTC,YAAa9L,EAAE6L,YCjDV,SAASI,GAAQ9D,GAC9B,MAAO+D,EAAYC,GAAiBrN,oBAAS,GAEvC4H,EAAUL,EAAW8B,EAAM9H,SAAU8H,EAAM5B,SAEjD,IAAI6F,EAAeC,WAAW,QAE1BC,EAAe5F,EASnB,GAP6B,qBAAlByB,EAAMzB,UACf4F,EAAenE,EAAMzB,SAEI,qBAAhByB,EAAMrC,QACfwG,EAAenE,EAAMrC,OAGnBwG,EAAc,CAChB,MAAMC,EAAeC,aAAYF,GACjCD,WAAWE,GAAcE,QAAQ,GACjCL,EAAeC,WAAWE,GAG5B,IAAIG,EAAiBN,EAAaK,QAAQ,GAE1C,MAAM/J,EAAQyF,EAAMzF,OAASyF,EAAMwE,iBAMnC,OAJIjK,GAASwJ,IACXQ,EAAiB,KAAON,EAAe1J,GAAO+J,QAAQ,IAItDjE,IAAAC,cAAA,QACEW,MAAO,CACLC,cAAe,SACfW,SAAU7B,EAAMa,KAAOb,EAAMa,KAAO,GACpC4D,QAAS,EACTC,OAAQ,WAEVC,QAASA,KACPX,GAAeD,KAGhBQ,G,oCCnEQ,SAASK,GAAQ5E,GAC9B,OAAKA,EAAM5B,SAAgD,oBAA9B4B,EAAM5B,QAAQoD,YAIpCnB,IAAAC,cAACgB,IAAQuD,OAAAC,OAAA,CAACvD,KAAMvB,EAAM5B,QAAQoD,eAAmBxB,IAH/CK,IAAAC,cAAA,aC2BI,SAASyE,GAAa/E,GACnC,MAAOrC,EAAOC,GAAYjH,mBAASqJ,EAAMrC,QAClCqH,EAAMC,GAAWtO,oBAAS,GAE3BuO,EAAsC,qBAAhBlF,EAAMrC,MAAwBqC,EAAMrC,MAAQA,EAClEsC,EAAMlB,YAAiBiB,EAAME,YAAagF,GAE1CC,EACJ9E,IAAAC,cAAA,OACEW,MAAO,CAAEmE,UAAW,EAAGV,OAAQ,WAC/BC,QAASA,KACPM,GAASD,KAGX3E,IAAAC,cAAC+E,KAAK,CAACC,MAAOjF,IAAAC,cAACiF,KAAc,CAACtE,MAAO,CAAEY,SAAU,MAC/CxB,IAAAC,cAACkF,KAAc,CAACvE,MAAO,CAAEY,SAAU,OAC5B,IAAI,SAKX,YAAC3B,EAAW,SAAEzC,GAAYuC,EAC1ByF,EAAgB/G,sBACpB7H,UACE,GAAwB,qBAAboH,EAA0B,CACnC,IAAIG,EAAUH,EACd,GAAIG,EAAQnD,QAAQ,QAAU,GAAKmD,EAAQnD,QAAQ,QAAU,EAC3D,IACE,MAAMyK,QAAwBxF,EAAYT,YAAYrB,GAClDsH,IACFtH,EAAUsH,GAGZ,MAAO7N,IAEX+F,EAASQ,GACe,oBAAbX,GACTA,EAASW,KAIf,CAAC8B,EAAazC,IAGVkI,EAAUX,EACd3E,IAAAC,cAAA,OACEW,MAAO,CACL2E,OAAQ,IACRC,SAAU,WACVC,KAAM,EACNC,IAAK,EACLC,MAAO,QAETrB,QAASA,KACPM,GAAQ,KAGV5E,IAAAC,cAAC2F,YAAQ,CACP1J,MAAO,IACP2J,WAAY,KACZC,QAAStO,IACPC,QAAQC,IAAI,aAAcF,GAC1BoN,GAAQ,IAEVmB,OAAQnI,IACN,GAAIA,EAAU,CACZnG,QAAQC,IAAI,aAAckG,GAC1B,IAAIoI,EAAmBpI,EACnBoI,EAAiBpL,QAAQ,MAAQ,IACnCoL,EAAmBA,EAAiBzF,OAAOyF,EAAiBC,YAAY,OACxExO,QAAQC,IAAI,gBAAiBsO,IAE/BpB,GAAQ,GACRQ,EAAcY,KAGlBpF,MAAO,CAAE+E,MAAO,WAIpB,GAGF,OACE3F,IAAAC,cAAA,WACGqF,EACDtF,IAAAC,cAACiG,IAAK,CACJ3J,GAAI,YACJ/D,KAAM,YACN2N,aAAa,MACbC,UAAWzG,EAAMyG,UACjBC,YAAa1G,EAAM0G,YAAc1G,EAAM0G,YAAc,UACrDC,OAAQtG,IAAAC,cAACsE,GAAO,CAACxG,QAAS8G,EAAcrE,KAAM,EAAGY,MAAO,IACxD9D,MAAOsC,GAAOiF,EACd0B,WAAYzB,EACZ1H,SAAU5F,IACR4N,EAAc5N,EAAEsJ,OAAOxD,WCpGlB,SAASkJ,GAAW7G,GACjC,MAAO8G,EAAMC,GAAWpQ,mBAASqJ,EAAMzF,MAAQ,MAAQ,QAChDyM,EAASC,GAActQ,sBACvBgH,EAAOC,GAAYjH,qBAEpBuO,EAAsC,qBAAhBlF,EAAMrC,MAAwBqC,EAAMrC,MAAQA,EAElEuJ,EAASC,GACRnH,EAAMzF,MAET8F,IAAAC,cAAA,OACEW,MAAO,CAAEyD,OAAQ,WACjBC,QAASA,KACP,GAAa,QAATmC,EACFC,EAAQ,OACRE,EAAW/B,QAGX,GADA6B,EAAQ,OACJ7B,EAAc,CAChB,MAAMkC,EAAW,IAAMlD,WAAWgB,GAAgBlF,EAAMzF,OAAO+J,QAAQ,GACvE2C,EAAWG,QAEXH,EAAW/B,KAKhBiC,GAnBoB,GAwB3B,IAAIR,EACAC,EAiBJ,MAhBa,QAATE,GACFH,EAAS,IACTC,EAAaM,EAAO,sBAEpBP,EAAS,SACTC,EAAaM,EAAO,qBAGtBtQ,oBACE,KACMsO,GACF+B,EAAW,KAGhB,CAAE/B,IAGD7E,IAAAC,cAACiG,IAAK,CACJG,YAAa1G,EAAM0G,YAAc1G,EAAM0G,YAAc,aAAeI,EACpEL,UAAWzG,EAAMyG,UACjBE,OAAQA,EACRhJ,MAAOqJ,EACPJ,WAAYA,EACZnJ,SAAU5G,UACR,MAAMoH,EAAWpG,EAAEsJ,OAAOxD,MAC1B,GAAa,QAATmJ,EAAgB,CAClB,MAAMT,EAAmBnC,WAAWjG,GACpC,GAAGoI,EAAiB,CAClB,MAAMgB,EAAWhB,EAAmBrG,EAAMzF,MAC1CqD,EAASyJ,GACqB,oBAAnBrH,EAAMvC,UACfuC,EAAMvC,SAAS4J,GAEjBJ,EAAWhJ,QAEXgJ,EAAWhJ,QAGbL,EAASK,GACqB,oBAAnB+B,EAAMvC,UACfuC,EAAMvC,SAASQ,GAEjBgJ,EAAWhJ,M,aC9FrB,MAAQ4B,KAAI,aAAEyH,IAAcxH,IA8Bb,SAASyH,GAAOvH,GAC7B,MAAMwH,EAAgBC,YAAezH,EAAM9H,UACrCwP,EAAkB1H,EAAM5B,SAAWoJ,GAElCjE,EAAMoE,GAAWhR,sBACjBiR,EAAIC,GAASlR,sBACbmR,EAAQC,GAAapR,sBACrBqR,EAAWC,GAAgBtR,sBAC3BuR,EAAIC,GAASxR,qBAEdyR,EAAepI,EAAM9H,SACzBmI,IAAAC,cAAC+H,KAAO,CAAClB,MAAM,UACb9G,IAAAC,cAACgI,KAAc,CACb3D,QAASA,KACPgD,GAASpE,IAEXgF,QAAS,GACTtH,MAAO,CACLwD,QAAS,EACT/K,MAAOsG,EAAMtG,MAAQsG,EAAMtG,MAAQ,GACnCgL,OAAQ,UACR7C,SAAU,GACVX,cAAe,aAKrB,GAGF,IAAI8F,EACAwB,EACAC,EACJ,GAAIb,EACFZ,EACE3G,IAAAC,cAAA,WACED,IAAAC,cAAA,WACED,IAAAC,cAACT,GAAI,CAAC+B,UAAQ,GAAE8F,IAElBrH,IAAAC,cAACoI,KAAE,CACD/K,MAAO+J,EACP7G,KAAK,MACL8H,MAAM,IACNC,eAAa,EACbC,SAAS,MACTC,cAAe,CAAEC,UAAU,MAIjCP,EACEnI,IAAAC,cAAC0I,IAAM,CACLC,IAAI,OACJtE,QAASA,KACPkD,EAAM,MAGRxH,IAAAC,cAACkF,KAAc,MAAG,SAGtBiD,EACCpI,IAAAC,cAAC0I,IAAM,CAACC,IAAI,OAAOtE,QAASA,KAAKwD,EAAMT,GAAiBG,EAAM,MAC5DxH,IAAAC,cAAC4I,KAAW,MAAG,qBAGf,GAAGhB,EAAG,CAEV,IAAIA,EAAKxM,aAAaC,QAAQ,kBAC1BwN,EAAS,IAAIC,UAAO7B,OAAOW,GAE/B,GAAGiB,EAAO/K,UAAUsJ,EAClBV,EACE3G,IAAAC,cAAA,WACED,IAAAC,cAAA,SAAG,gDAGJ,CAEH,IAAI+I,EAAsB,GACtBC,EAAiB,GASrB,IAAK,IAAIL,KARTI,EAAoBF,EAAO/K,UAAW,EACtCkL,EAAeC,KACblJ,IAAAC,cAAA,OAAKW,MAAO,CAACY,SAAS,GAAG4C,QAAQ,EAAE+E,gBAAgB,YAChDnJ,IAAAC,cAAA,KAAGc,KAAM,OAAO8G,GACd7H,IAAAC,cAACP,GAAO,CAACiB,WAAW,EAAM5C,QAAS+K,EAAO/K,QAAS8B,YAAaF,EAAME,cAAe,IAAEiJ,EAAO/K,QAAQwC,OAAO,EAAE,MAItGlF,aACd,GAAGuN,EAAIhO,QAAQ,0BAA0B,EAAE,CACzCnD,QAAQC,IAAIkR,GACZ,IAAIQ,EAAS/N,aAAaC,QAAQsN,GAC9BS,EAAa,IAAIN,UAAO7B,OAAOkC,GAC/BJ,EAAoBK,EAAWtL,WACjCiL,EAAoBK,EAAWtL,UAAW,EAC1CkL,EAAeC,KACblJ,IAAAC,cAAA,OAAKW,MAAO,CAACY,SAAS,KACnBxB,IAAAC,cAAA,KAAGc,KAAM,OAAOqI,GACdpJ,IAAAC,cAACP,GAAO,CAACiB,WAAW,EAAM5C,QAASsL,EAAWtL,QAAS8B,YAAaF,EAAME,cAAe,IAAEwJ,EAAWtL,QAAQwC,OAAO,EAAE,OASpIoG,EACE3G,IAAAC,cAAA,WACED,IAAAC,cAAA,SAAG,gBAEHD,IAAAC,cAAA,WACCD,IAAAC,cAACT,GAAI,CAAC+B,UAAQ,GAAEsG,IAGhB7H,IAAAC,cAAA,WAEDD,IAAAC,cAAA,SAAG,gDACDD,IAAAC,cAAA,KAAGa,OAAO,SAASC,KAAM,mBAAmB8G,EAAI7G,IAAI,uBAAsB,iBAAiB,KAE7FhB,IAAAC,cAACoI,KAAE,CAAC/K,MAAO,mBAAmBuK,EAAIrH,KAAM,MAAO8H,MAAO,IAAKC,eAAe,EAAMC,SAAU,MAAOC,cAAe,CAACC,UAAS,KAE1H1I,IAAAC,cAACgH,GAAS,CAACrG,MAAO,CAACY,SAAS,MAAOD,UAAQ,GAAE,mBAAmBsG,GAE/DoB,EACCjJ,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,uBAGHgJ,EACDjJ,IAAAC,cAAC0I,IAAM,CAACrE,QAASA,KACf,IAAIlJ,EAAoB5B,OAAO6B,aAAaC,QAAQ,kBACjDF,GACD5B,OAAO6B,aAAaE,QAAQ,wBAAwBC,KAAKC,MAAML,GAEjE,MACMH,EADe8N,UAAO7B,OAAOoC,eACHC,cAActO,WAC9CzB,OAAO6B,aAAaE,QAAQ,iBAAiBN,GAC7CzB,OAAOC,SAAS+P,WACf,aAIL,IAMRrB,EACEnI,IAAAC,cAAC0I,IAAM,CAACC,IAAI,UAAUtE,QAASA,KAAKkD,EAAMH,GAAiBS,EAAM,MAC/D9H,IAAAC,cAACkF,KAAc,MAAG,YAGtBiD,EACEpI,IAAAC,cAAC0I,IAAM,CAACC,IAAI,OAAOtE,QAASA,KAAKwD,EAAM,IAAIN,EAAM,MAC/CxH,IAAAC,cAAC4I,KAAW,MAAG,aAGb,CACL,MAAMY,EAAa,CACjBrF,QAAS,IAGXuC,EACE3G,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKW,MAAO6I,GACVzJ,IAAAC,cAACyE,GAAY,CACX0B,WAAS,EACTvG,YAAaF,EAAME,YACnBwG,YAAY,aACZtI,QAAS4J,EACTvK,SAAUwK,KAGd5H,IAAAC,cAAA,OAAKW,MAAO6I,GACVzJ,IAAAC,cAACuG,GAAU,CACTtM,MAAOyF,EAAMzF,MACboD,MAAOmK,EACPrK,SAAUE,IACRoK,EAAUpK,QAMpB6K,EACEnI,IAAAC,cAAC0I,IAAM,CACLC,IAAI,UACJtE,QAASA,KACPkD,EAAMH,GACNS,EAAM,MAGR9H,IAAAC,cAACkF,KAAc,MAAG,YAGtBiD,EACEpI,IAAAC,cAAC0I,IAAM,CAACC,IAAI,OAAOtE,QAASA,KAAKwD,EAAMT,GAAiBG,EAAM,MAC5DxH,IAAAC,cAAC4I,KAAW,MAAG,gBAKrB,OACE7I,IAAAC,cAAA,YACG8H,EACD/H,IAAAC,cAACyJ,IAAK,CACJC,QAASzG,EACT4D,MACE9G,IAAAC,cAAA,WACGoH,EAAkBrH,IAAAC,cAACP,GAAO,CAAC3B,QAASsJ,EAAiBxH,YAAaF,EAAME,cAAkBG,IAAAC,cAAC2J,KAAI,MAChG5J,IAAAC,cAAA,OAAKW,MAAO,CAAEiJ,MAAO,QAASC,aAAc,KAC1C9J,IAAAC,cAACwD,GAAO,CAAC1F,QAASsJ,EAAiBxP,SAAU8H,EAAM9H,SAAUsM,iBAAkBxE,EAAMzF,UAI3F6P,KAAMA,KACJvC,IACAM,IACAR,GAASpE,IAEX8G,SAAUA,KACRxC,IACAM,IACAR,GAASpE,IAEX+G,OAAQ,CACN7B,EAAkBD,EAClBnI,IAAAC,cAAC0I,IAAM,CACLC,IAAI,SACJnQ,KAAK,UACLyR,UAAWzC,IAAWE,GAAaJ,EACnC4C,SAAS,EACT7F,QAASA,KACP,MAAM7B,EAAKf,GAAW/B,EAAM9H,UAE5B,IAAIyF,EACJ,IACEA,EAAQ8M,aAAW,GAAK3C,GACxB,MAAOjQ,GAEP8F,EAAQ8M,aAAW,GAAKvG,WAAW4D,GAAQxD,QAAQ,IAGrDxB,EAAG,CACD4H,GAAI1C,EACJrK,UAEFgK,GAASpE,GACTsE,MAGFxH,IAAAC,cAACqK,KAAY,MAAG,WAInB3D,IClQM,SAAS4D,GAAOC,GAW3B,IAX4B,QAC9BzM,EAAO,aACP0M,EAAY,cACZjQ,EAAa,gBACbkQ,EAAe,MACfxQ,EAAK,UACLyG,EAAS,UACTgK,EAAS,cACTC,EAAa,kBACbC,EAAiB,cACjBvR,GACDkR,EACC,MAAMM,EAAe,GACjBH,IACEA,EAAUI,eACZD,EAAa5B,KACXlJ,IAAAC,cAAC0I,IAAM,CACLC,IAAI,eACJhI,MAAO,CAAEC,cAAe,MAAOmK,WAAY,EAAGjG,UAAW,GACzDkG,MAAM,QACNzK,KAAK,QACL8D,QAASuG,GACV,WAKHC,EAAa5B,KACXlJ,IAAAC,cAAC0I,IAAM,CACLC,IAAI,cACJhI,MAAO,CAAEC,cAAe,MAAOmK,WAAY,EAAGjG,UAAW,GACzDkG,MAAM,QACNzK,KAAK,QAEL8D,QAASsG,GACV,aAOP,MAAM,aAAE9K,GAAiBC,eAEnB4G,EAAUhG,EACd,GAEAX,IAAAC,cAAA,YACGlC,EAAUiC,IAAAC,cAACP,GAAO,CAAC3B,QAASA,EAAS8B,YAAa6K,EAAiBpR,cAAeA,IAAoB,gBACvG0G,IAAAC,cAAA,QACAW,MAAO,CACLC,cAAe,SACfW,SAAU,GACV4C,QAAS,EACTC,OAAQ,YAGTnK,GAED8F,IAAAC,cAACiH,GAAM,CAACnJ,QAASA,EAASlG,SAAU4S,EAAc5K,YAAa6K,EAAiBxQ,MAAOA,EAAOb,MAAwB,UAAjByG,EAA2B,UAAY,aAIhJ,OACEE,IAAAC,cAAA,WACG0G,EACAmE,G,eCxFQI,OAdMC,IACnB,GAAIA,GAASA,EAAMC,SACjB,IACE,OAAOD,EAAMC,WACb,MAAO5T,GACP,MAAO,SAAM6T,aAAYF,EAAO,SAGpC,OAAIA,GAASA,EAAMvQ,SAAmC,IAAxBuQ,EAAMvQ,QAAQ,OAAgC,KAAjBuQ,EAAMvU,OACxDoJ,IAAAC,cAACP,GAAO,CAAC3B,QAASoN,EAAO3J,SAAU,KAErC1C,KAAKS,UAAU4L,ICsCTG,OA/CSd,IAAyE,IAAxE,iBAAEe,EAAgB,aAAEC,EAAY,gBAAEC,EAAe,eAAEC,GAAelB,EACzF,MAAOmB,EAAUC,GAAetV,mBAAS,IAEnCuV,EAAUxN,sBAAY7H,UAC1B,IACE,MAAMsV,QAAqBP,IAC3BK,EAAYE,GACZJ,GAAe,GACf,MAAOlU,GACPC,QAAQC,IAAIF,KAEb,CAACoU,EAAaL,EAAkBG,IAMnC,OAJAnV,oBAAU,KACRsV,KACC,CAACA,EAASJ,EAAiBF,IAG5BvL,IAAAC,cAAA,WACED,IAAAC,cAAC8L,IAAG,KACF/L,IAAAC,cAAC+L,IAAG,CACFC,KAAM,EACNrL,MAAO,CACLsL,UAAW,QACXC,QAAS,KACTrC,aAAc,EACdtI,SAAU,KAGXgK,EAAahT,MAEhBwH,IAAAC,cAAC+L,IAAG,CAACC,KAAM,IACTjM,IAAAC,cAAA,UAAKiL,GAAaS,KAEpB3L,IAAAC,cAAC+L,IAAG,CAACC,KAAM,GACTjM,IAAAC,cAAA,UACED,IAAAC,cAAA,KAAGc,KAAK,IAAIuD,QAASuH,GAAS,mBAMpC7L,IAAAC,cAACmM,KAAO,Q,SCtCd,MAAQC,MAAM,IAAItV,EAAQ,IAEX,SAASuV,GAAY9B,GAA0E,IAAzE,iBAAEe,EAAgB,aAAEC,EAAY,SAAE3T,EAAQ,SAAEsC,EAAQ,eAAEuR,GAAgBlB,EACzG,MAAO+B,EAAMC,GAAWlW,mBAAS,KAC1BmW,EAASC,GAAcpW,sBACvBqW,EAAaC,GAAkBtW,qBAEhCmM,EAAKf,GAAW7J,EAAUsC,GAEhC,IAAI0S,EAAa,EACjB,MAAMvU,EAASkT,EAAalT,OAAOwU,IAAIC,IACrC,MAAMnE,EAAM4C,EAAahT,KAAO,IAAMuU,EAAMvU,KAAO,IAAMuU,EAAMtU,KAAO,IAAMoU,IAE5E,IAAIG,EAAU,GACd,GAAmB,YAAfD,EAAMtU,KACRuU,EACEhN,IAAAC,cAAC+H,KAAO,CAACzE,UAAU,QAAQuD,MAAO,cAChC9G,IAAAC,cAAA,OACExH,KAAK,SACLmI,MAAO,CAAEyD,OAAQ,WACjBC,QAAS9N,UACP,GAAI6V,GAAMY,YAAYV,EAAK3D,IAAO,CAChC,MAAMsE,EAAa,IAAKX,GACxBW,EAAWtE,GAAOyD,GAAMc,mBAAmBZ,EAAK3D,IAChD4D,EAAQU,OACH,CACL,MAAMA,EAAa,IAAKX,GACxBW,EAAWtE,GAAOyD,GAAMe,oBAAoBb,EAAK3D,IACjD4D,EAAQU,MAGb,uBAKA,GAAmB,UAAfH,EAAMtU,KACfuU,EACEhN,IAAAC,cAAC+H,KAAO,CAACzE,UAAU,QAAQuD,MAAO,UAChC9G,IAAAC,cAAA,OACExH,KAAK,SACLmI,MAAO,CAAEyD,OAAQ,WACjBC,QAAS9N,UACP,GAAI6V,GAAMY,YAAYV,EAAK3D,IAAO,CAChC,MAAMsE,EAAa,IAAKX,GACxBW,EAAWtE,GAAOyD,GAAMgB,aAAad,EAAK3D,IAC1C4D,EAAQU,OACH,CACL,MAAMA,EAAa,IAAKX,GACxBW,EAAWtE,GAAOyD,GAAMxJ,QAAQwJ,GAAMiB,YAAYf,EAAK3D,KACvD4D,EAAQU,MAGb,uBAKA,GAAmB,YAAfH,EAAMtU,KACfuU,EACEhN,IAAAC,cAAC+H,KAAO,CAACzE,UAAU,QAAQuD,MAAO,cAChC9G,IAAAC,cAAA,OACExH,KAAK,SACLmI,MAAO,CAAEyD,OAAQ,WACjBC,QAAS9N,UACP,MAAM0W,EAAa,IAAKX,GACxBW,EAAWtE,GAAOyD,GAAMjC,WAAWmC,EAAK3D,IACxC4D,EAAQU,KAEX,sBAKA,GAAmB,YAAfH,EAAMtU,KAAoB,CACnC,MAAM4M,EAAkBkH,EAAK3D,IAAQ2D,EAAK3D,GAAKzH,aAAeoL,EAAK3D,GAAKzH,cAAcoM,OAClFlI,GAA8C,KAA3BA,EAAgBzO,SACrCoW,EACEhN,IAAAC,cAAC+H,KAAO,CAACzE,UAAU,QAAQuD,MAAO,WAChC9G,IAAAC,cAACgB,IAAQ,CAACC,KAAMmE,EAAiBjE,MAAO,MAMhD,OACEpB,IAAAC,cAAA,OAAKW,MAAO,CAAE4M,OAAQ,GAAK5E,IAAKA,GAC9B5I,IAAAC,cAACiG,IAAK,CACJ1F,KAAK,QACL6F,YAAa0G,EAAMvU,KAAOuU,EAAMtU,KAAO,IAAMsU,EAAMvU,KAAOuU,EAAMtU,KAChE0N,aAAa,MACb7I,MAAOiP,EAAK3D,GACZpQ,KAAMoQ,EACNxL,SAAUqQ,IACR,MAAMP,EAAa,IAAKX,GACxBW,EAAWO,EAAM3M,OAAOtI,MAAQiV,EAAM3M,OAAOxD,MAC7CkP,EAAQU,IAEVQ,OAAQV,OAMVW,EACJ3N,IAAAC,cAAA,OAAKW,MAAO,CAAE4M,OAAQ,GAAK5E,IAAK,gBAC9B5I,IAAAC,cAACiG,IAAK,CACJG,YAAY,oBACZjJ,SAAU5F,GAAKkV,EAAWlV,EAAEsJ,OAAOxD,OACnCA,MAAOmP,EACPlG,WACEvG,IAAAC,cAAA,WACED,IAAAC,cAAC8L,IAAG,KACF/L,IAAAC,cAAC+L,IAAG,CAACC,KAAM,IACTjM,IAAAC,cAAC+H,KAAO,CAACzE,UAAU,QAAQuD,MAAO,aAChC9G,IAAAC,cAAA,OACExH,KAAK,SACLmI,MAAO,CAAEyD,OAAQ,WACjBC,QAAS9N,UACP,IAAIoX,EAAa/J,WAAW4I,GACxBmB,GAAYlB,EAAW,GAAKkB,EAAa,IAAM,MAEtD,kBAKL5N,IAAAC,cAAC+L,IAAG,CAACC,KAAM,IACTjM,IAAAC,cAAC+H,KAAO,CAACzE,UAAU,QAAQuD,MAAO,iBAChC9G,IAAAC,cAAA,OACExH,KAAK,SACLmI,MAAO,CAAEyD,OAAQ,WACjBC,QAAS9N,UACPkW,EAAWmB,KAAUC,KAAKrB,GAASsB,iBAEtC,wBAYbvC,EAAa9S,SACfJ,EAAO4Q,KAAKyE,GAGd,MAAMK,EACkB,SAAtBxC,EAAa/S,KACXuH,IAAAC,cAAC0I,IAAM,CAAC/H,MAAO,CAAEoK,YAAa,KAAM,oBAEpChL,IAAAC,cAAC0I,IAAM,CAAC/H,MAAO,CAAEoK,YAAa,KAAM,oBA4DxC,OA1DA1S,EAAO4Q,KACLlJ,IAAAC,cAAA,OAAKW,MAAO,CAAEyD,OAAQ,UAAWmJ,OAAQ,GAAK5E,IAAK,YACjD5I,IAAAC,cAACiG,IAAK,CACJ9I,SAAU5F,GAAKoV,EAAepV,EAAEsJ,OAAOxD,OACvC2Q,aAAa,GACbC,UAAU,EACVhE,UAAU,EACV5M,MAAOqP,EACPe,OACE1N,IAAAC,cAAA,OACEW,MAAO,CAAE+E,MAAO,GAAIwI,OAAQ,GAAIX,OAAQ,GACxC/U,KAAK,UACL6L,QAAS9N,UACP,IAAI4X,EAAa,EACjB,MAAMzR,EAAO6O,EAAalT,OAAOwU,IAAIC,IACnC,MAAMnE,EAAM4C,EAAahT,KAAO,IAAMuU,EAAMvU,KAAO,IAAMuU,EAAMtU,KAAO,IAAM2V,IAC5E,IAAI9Q,EAAQiP,EAAK3D,GAUjB,MATuB,UAAnBmE,EAAMsB,SACR/Q,EAAQwB,KAAKC,MAAMzB,GACK,SAAfyP,EAAMtU,OAEb6E,EADY,SAAVA,GAA8B,MAAVA,GAA2B,QAAVA,GAA6B,SAAVA,GAA8B,WAAVA,EACtE,EAEA,GAGLA,IAGT,IAAIkF,EACJ,GAAqC,SAAjCgJ,EAAa7S,iBAA+D,SAAjC6S,EAAa7S,gBAA4B,CACtF,MAAM2V,QAAiB/C,KAAoB5O,GAC3C6F,EAAS0I,GAAaoD,OACjB,CACL,MAAMC,EAAY,GACd9B,IACF8B,EAAUjR,MAAQmP,GAMpB,MAAM6B,QAAiB7L,EAAG8I,KAAoB5O,EAAM4R,IACpD/L,EAAS0I,GAAaoD,GAGxB7W,QAAQC,IAAI,kBAAmB8K,GAC/BoK,EAAepK,GACfkJ,GAAe,KAGhBsC,OAQThO,IAAAC,cAAA,WACED,IAAAC,cAAC8L,IAAG,KACF/L,IAAAC,cAAC+L,IAAG,CACFC,KAAM,EACNrL,MAAO,CACLsL,UAAW,QACXC,QAAS,KACTrC,aAAc,EACdtI,SAAU,KAGXgK,EAAahT,MAEhBwH,IAAAC,cAAC+L,IAAG,CAACC,KAAM,IAAK3T,IAElB0H,IAAAC,cAACmM,KAAO,OC1Od,MAAMoC,GACJxO,IAAAC,cAAA,WAAK,aACQ,IACXD,IAAAC,cAAA,OAAKW,MAAO,CAAEwD,QAAS,KAAM,kBACX,IAChBpE,IAAAC,cAAA,QAAMwO,MAAM,YAAY7N,MAAO,CAAEoK,WAAY,EAAmC5G,QAAS,EAAGsK,aAAc,EAAGC,WAAY,WAAY,kBAE7H,IAAI,MACR,IACJ3O,IAAAC,cAAA,QAAMwO,MAAM,YAAY7N,MAAO,CAAEoK,WAAY,EAAmC5G,QAAS,EAAGsK,aAAc,EAAGC,WAAY,WAAY,mBAE7H,IAAI,8BAGd3O,IAAAC,cAAA,OAAKW,MAAO,CAAEwD,QAAS,KACrBpE,IAAAC,cAAA,QAAMW,MAAO,CAAEgO,YAAa,GAAKC,KAAK,MAAMC,aAAW,WAAU,gBAE1D,iCAEP9O,IAAAC,cAAA,QAAMwO,MAAM,YAAY7N,MAAO,CAAEoK,WAAY,EAAmC5G,QAAS,EAAGsK,aAAc,EAAGC,WAAY,WAAY,mBAE7H,IACR3O,IAAAC,cAAA,SAAG,SAAS,kCAOH,SAAS5I,GAAQmT,GAA6F,IAA5F,eAAEuE,EAAc,QAAEC,EAAO,SAAE7U,EAAQ,OAAE1D,EAAM,SAAEoB,EAAQ,KAAEW,EAAI,KAAEyW,EAAI,MAAE/U,EAAK,cAAEZ,GAAekR,EAExH,MAAMpU,EAAYF,EAAkB2B,GACpC,IAAIiG,EAIFA,EAHEiR,IACS3Y,EAAYA,EAAUoC,GAAQ,IAK3C,MAAMuF,EAAUD,EAAWA,EAASC,QAAU,GACxChG,EAAqBH,EAA2BC,EAAUkG,GAE1DmR,EAA6BzU,kBACjC,IACEqD,EACI0G,OAAO2K,OAAOrR,EAASsR,UAAUC,WAAWC,OAC1CrT,GAAkB,aAAZA,EAAGxD,QAAyBwW,GAAQA,EAAKrU,QAAQqB,EAAGzD,MAAQ,IAEpE,GACN,CAACsF,EAAUmR,KAGNxD,EAAiBC,GAAkBpV,oBAAS,GAC7CiZ,EAAkBL,EAA2BpC,IAAI7Q,GA1BrCA,KAA8B,SAAvBA,EAAGtD,iBAAqD,SAAvBsD,EAAGtD,kBAAoD,IAArBsD,EAAG3D,OAAO1B,OA2BhG4Y,CAAYvT,GAEP+D,IAAAC,cAACqL,GAAe,CAAC1C,IAAK3M,EAAGzD,KAAM+S,iBAAkBzN,EAAS7B,EAAGzD,MAAOgT,aAAcvP,EAAIwP,gBAAiBA,EAAiBC,eAAgBA,IAI/I1L,IAAAC,cAACqM,GAAY,CACX1D,IAAK,KAAO3M,EAAGzD,KACf+S,iBAA0C,SAAvBtP,EAAGtD,iBAAqD,SAAvBsD,EAAGtD,gBAA4BmF,EAAS7B,EAAGzD,MAAMsF,EAAS2R,QAAQhZ,GAAQwF,EAAGzD,MACjIgT,aAAcvP,EACdpE,SAAUA,EACVsC,SAAUA,EACVuR,eAAgBA,KAKtB,OACE1L,IAAAC,cAAA,OAAKW,MAAO,CAAE4M,OAAQ,OAAQ7H,MAAO,SACnC3F,IAAAC,cAACyP,IAAI,CACH5I,MACE9G,IAAAC,cAAA,WACGzH,EACDwH,IAAAC,cAAA,OAAKW,MAAO,CAAEiJ,MAAO,UACnB7J,IAAAC,cAACsK,GAAO,CACNxM,QAASA,EACTvD,cAAe3C,EACf0C,iBAAkB1C,EAClB6S,gBAAiB7S,EACjBqC,MAAOA,EACPZ,cAAeA,IAEhB0V,IAIPxO,KAAK,QACLI,MAAO,CAAEmE,UAAW,GAAIY,MAAO,QAC/BwE,QAASoF,GAAmBA,EAAgB3Y,QAAU,GAErDmB,EAAqBwX,EAAkBf,K,yBC1EjC,SAASmB,GAAKhQ,GAC3B,MAAOiQ,EAASC,GAAcvZ,mBAAS,QAEjCmC,EAAO,UAEb,IAAIqX,EAAa,GACjB,IAAK,IAAI5W,KAAKyG,EAAMoQ,SACgB,QAA9BpQ,EAAMoQ,SAAS7W,GAAGD,SAAmD,IAA9B0G,EAAMoQ,SAAS7W,GAAGD,SAC3D6W,EAAW5G,KACTlJ,IAAAC,cAAA,KAAG2I,IAAKjJ,EAAMoQ,SAAS7W,GAAGD,SACxB+G,IAAAC,cAAC0I,IAAM,CACL/H,MAAO,CAAEvH,MAAOsG,EAAMoQ,SAAS7W,GAAGG,OAClCZ,KAAMA,EACN+H,KAAK,QACLyK,MAAM,QACN3G,QAASA,KACP9K,OAAO0J,KAAKvD,EAAMoQ,SAAS7W,GAAGW,UAG/B8F,EAAMoQ,SAAS7W,GAAGV,QAO7B,OACEwH,IAAAC,cAAA,WACED,IAAAC,cAAC0I,IAAM,CACLnI,KAAK,QACLyK,MAAM,QACN3G,QAASA,KACPuL,EAAW,QAGb7P,IAAAC,cAAC+P,KAAoB,CAACpP,MAAO,CAAEvH,MAAO,aAAgB,IAC/B,oBAAfsG,EAAMzF,MAAuB,EAAIyF,EAAMzF,MAAM+J,QAAQ,IAE/DjE,IAAAC,cAACyJ,IAAK,CACJ5C,MAAM,UACN6C,QAAqB,OAAZiG,EACT5F,SAAUA,KACR6F,EAAW,SAEb5F,OAAQ,CACNjK,IAAAC,cAAC0I,IAAM,CACLC,IAAI,OACJtE,QAASA,KACPuL,EAAW,UAEd,YAKH7P,IAAAC,cAAA,SACED,IAAAC,cAAC0I,IAAM,CACLlQ,KAAMA,EACN+H,KAAK,QACLyK,MAAM,QACN3G,QAASA,KACP9K,OAAO0J,KAAK,2EAA6EvD,EAAM5B,WAGjGiC,IAAAC,cAAA,QAAMW,MAAO,CAAEkJ,aAAc,IAAM+E,KAAK,OACtC7O,IAAAC,cAAA,QAAM4O,KAAK,MAAMC,aAAW,WAAU,6BAGjC,SAIX9O,IAAAC,cAAA,SACG,IACDD,IAAAC,cAAC0I,IAAM,CACLlQ,KAAMA,EACN+H,KAAK,QACLyK,MAAM,QACN3G,QAASA,KACP,IAAI2L,KAAe,CACjBC,YAAa,eACbC,YAAa,0CACbC,WAAY,qBACZC,UAAW,MACXC,YAAa3Q,EAAM5B,UAElBjB,GAAG,IAAK2Q,GAAShW,QAAQC,IAAI+V,IAC7BwB,SAGLjP,IAAAC,cAAA,QAAMW,MAAO,CAAEkJ,aAAc,IAAM+E,KAAK,OACtC7O,IAAAC,cAAA,QAAM4O,KAAK,MAAMC,aAAW,WAAU,6BAGjC,SAKX9O,IAAAC,cAAA,SACED,IAAAC,cAAC0I,IAAM,CACLlQ,KAAMA,EACN+H,KAAK,QACLyK,MAAM,QACN3G,QAASA,KACP9K,OAAO0J,KAAK,2CAGdlD,IAAAC,cAAA,QAAMW,MAAO,CAAEkJ,aAAc,IAAM+E,KAAK,MAAMC,aAAW,QAAO,gBAEzD,aAKX9O,IAAAC,cAACmM,KAAO,MAERpM,IAAAC,cAAA,UAAI,eAEH6P,IC7GM,SAASS,GAAO5Q,GAC7B,MAAO5B,EAASyS,GAAcla,qBAE9B,IAAIma,EAEFA,EADE1S,GAA0C,oBAAxBA,EAAQoD,YAClBnB,IAAAC,cAACgB,IAAQ,CAACC,KAAMnD,EAAQoD,cAAeX,KAAM,EAAGY,MAAO,IAEvDpB,IAAAC,cAAA,YAGZ,MAAML,EAAMlB,YAAiBiB,EAAME,YAAa9B,GAE1CqH,EAAgB/G,sBACpB7H,UACE,GAAwB,qBAAboH,EAA0B,CACnC,IAAIG,EAAUH,EACd,GAAIG,EAAQnD,QAAQ,QAAU,GAAKmD,EAAQnD,QAAQ,QAAU,EAC3D,IACE,MAAMyK,QAAwB1F,EAAME,YAAYT,YAAYrB,GACxDsH,IACFtH,EAAUsH,GAGZ,MAAO7N,IAEXgZ,EAAWzS,KAGf,CAAC4B,EAAME,cAGH4C,EAAKf,GAAW/B,EAAMnF,eAE5B,OACEwF,IAAAC,cAAA,YACED,IAAAC,cAACiG,IAAK,CACJ1F,KAAK,QACL6F,YAAa1G,EAAM0G,YAAc1G,EAAM0G,YAAc,eACrDC,OAAQmK,EAERnT,MAAOsC,GAAO7B,EACdX,SAAU5F,IAER4N,EAAc5N,EAAEsJ,OAAOxD,QAEzBoQ,OACE1N,IAAAC,cAAC+H,KAAO,CAAClB,MAAM,2CACb9G,IAAAC,cAAC0I,IAAM,CACLrE,QAASA,KACP7B,EAAG,CACD4H,GAAItM,EACJT,MAAO8M,aAAW,SAEpBoG,EAAW,KAEbvF,MAAM,SACNyF,KAAM1Q,IAAAC,cAACqK,KAAY,QAErBtK,IAAAC,cAACiH,GAAM,CAAC7N,MAAM,UAAUxB,SAAU8H,EAAMnF,cAAeqF,YAAaF,EAAME,YAAa3F,MAAOyF,EAAMzF,Y,eC/EjGyW,OAXf,WACE,OACE3Q,IAAAC,cAAA,KAAGa,OAAO,SAASE,IAAI,uBACrBhB,IAAAC,cAAC2Q,KAAU,CACT9J,MAAM,2BACNlG,MAAO,CAAEyD,OAAQ,e,uBCLzB,MAAQ7E,KAAK,IAAIC,ICgBF,SAASoR,GAASlR,GAE/B,OACEK,IAAAC,cAAC0I,IAAM,CACLrE,QAASA,KACP9K,OAAO0J,KAAK,gCAEd1C,KAAK,QACLyK,MAAM,SAENjL,IAAAC,cAAA,QAAMW,MAAO,CAAEgO,YAAa,IAAK5O,IAAAC,cAAA,QAAM4O,KAAK,MAAMC,aAAW,YAAW,iBAC9C,oBAAlBnP,EAAMxF,SAA0B,EAAIqE,SAASmB,EAAMxF,SAAU,IAAM,IAAM,EAAE,KC9BzF,MAAQkS,MAAK,aAAEyE,IAAc/Z,EAAQ,I,4DCsBrC,MAAM,OAAEga,IAAWC,MACXxR,KAAK,IAAIC,IA4pBFwR,I,WCjrBA,SAASC,KAEtB,MAAMC,EAAQ3X,OAAO6B,aAAaC,QAAQ,UACnC8V,EAAYC,GAAiB/a,sBAAU6a,GAAmB,UAAVA,KACjD,SAAEG,EAAQ,aAAExR,EAAY,OAAEyR,GAAWxR,eAE3CxJ,oBAAU,KACRiD,OAAO6B,aAAaE,QAAQ,QAASuE,IACpC,CAACA,IAYJ,OACEE,IAAAC,cAAA,OAAKuR,UAAU,eAAe5Q,MAAO,CAAC4E,SAAS,QAAQiM,MAAM,EAAEC,OAAO,IACpE1R,IAAAC,cAAA,QAAMW,MAAO,CAACwD,QAAQ,IAAoB,UAAftE,EAAyB,eAAO,gBAC3DE,IAAAC,cAAC0R,KAAM,CAACC,QAASR,EAAYhU,SAbZyU,IACnBR,EAAcQ,GACdP,EAAS,CAAEH,MAAOU,EAAYN,EAAOO,KAAOP,EAAOQ,YCdxC,SAASC,KACtB,OACEhS,IAAAC,cAAA,OAAKuR,UAAU,aACbxR,IAAAC,cAAA,OAAKuR,UAAU,iCACbxR,IAAAC,cAAA,OAAKuR,UAAU,yBACbxR,IAAAC,cAAA,SAAG,oCACgCD,IAAAC,cAAA,WAAM,iBACxB,IACfD,IAAAC,cAAA,KACEc,KAAK,qBACLD,OAAO,SACPE,IAAI,uBACL,YAEG,QCdD,SAASiR,KACtB,OACEjS,IAAAC,cAAA,OACEW,MAAO,CACL4E,SAAU,QACVD,OAAQ,EACRG,IAAK,EACLD,KAAM,EACNE,MAAO,OACPwI,OAAQ,OACR+D,WAAY,6BAGdlS,IAAAC,cAAA,OACEW,MAAO,CACL4E,SAAU,WACVD,OAAQ,EACRG,IAAK,MACLD,KAAM,MACNE,MAAO,QACPwI,OAAQ,OACRnD,WAAY,QACZjG,UAAW,SACXmH,UAAW,WAGblM,IAAAC,cAAA,OAAKuR,UAAU,iBAAiB3C,KAAK,UACnC7O,IAAAC,cAAA,QAAMuR,UAAU,WAAU,iB,wDC7BrB,IAAC,+CAAiD,CAAC,KAAO,UAAU,YAAc,yBAAyB,aAAe,6DAA6D,MAAQ,0DAA0D,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,SAAS,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,MAAM,+CAAiD,CAAC,KAAO,QAAQ,YAAc,+BAA+B,aAAe,2DAA2D,MAAQ,wDAAwD,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,QAAQ,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,MAAM,+CAAiD,CAAC,KAAO,QAAQ,YAAc,eAAe,aAAe,2DAA2D,MAAQ,wDAAwD,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,QAAQ,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,MAAM,+CAAiD,CAAC,KAAO,OAAO,YAAc,wBAAwB,aAAe,0DAA0D,MAAQ,uDAAuD,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,QAAQ,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,MAAM,+CAAiD,CAAC,KAAO,WAAW,YAAc,eAAe,aAAe,8DAA8D,MAAQ,2DAA2D,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,SAAS,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,KAAK,+CAAiD,CAAC,KAAO,WAAW,YAAc,UAAU,aAAe,8DAA8D,MAAQ,2DAA2D,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,UAAU,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,MAAM,+CAAiD,CAAC,KAAO,WAAW,YAAc,cAAc,aAAe,8DAA8D,MAAQ,2DAA2D,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,UAAU,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,MAAM,+CAAiD,CAAC,KAAO,OAAO,YAAc,cAAc,aAAe,0DAA0D,MAAQ,uDAAuD,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,SAAS,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,MAAM,+CAAiD,CAAC,KAAO,WAAW,YAAc,qBAAqB,aAAe,8DAA8D,MAAQ,2DAA2D,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,UAAU,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,MAAM,+CAAiD,CAAC,KAAO,QAAQ,YAAc,UAAU,aAAe,2DAA2D,MAAQ,wDAAwD,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,SAAS,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,MAAM,+CAAiD,CAAC,KAAO,UAAU,YAAc,gBAAgB,aAAe,6DAA6D,MAAQ,0DAA0D,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,QAAQ,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,MAAM,+CAAiD,CAAC,KAAO,gBAAgB,YAAc,UAAU,aAAe,kEAAkE,MAAQ,+DAA+D,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,QAAQ,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,MAAM,+CAAiD,CAAC,KAAO,UAAU,YAAc,eAAe,aAAe,6DAA6D,MAAQ,0DAA0D,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,UAAU,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,MAAM,+CAAiD,CAAC,KAAO,KAAK,YAAc,cAAc,aAAe,wDAAwD,MAAQ,qDAAqD,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,QAAQ,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,MAAM,+CAAiD,CAAC,KAAO,UAAU,YAAc,sBAAsB,aAAe,6DAA6D,MAAQ,0DAA0D,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,UAAU,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,MAAM,+CAAiD,CAAC,KAAO,SAAS,YAAc,cAAc,aAAe,4DAA4D,MAAQ,yDAAyD,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,UAAU,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,MAAM,+CAAiD,CAAC,KAAO,eAAe,YAAc,WAAW,aAAe,iEAAiE,MAAQ,8DAA8D,WAAa,CAAC,CAAC,WAAa,kBAAkB,MAAQ,SAAS,CAAC,WAAa,OAAO,MAAQ,UAAU,CAAC,WAAa,UAAU,MAAQ,O,qBC8DhzM,MAAM,WAAEW,IAAepb,EAAQ,MAK/BU,QAAQC,IAAI,kCAAyB0a,IAErC,MAAMC,GAAwB,GAC9B,IAAK,IAAIC,MAAKC,KACZF,GAAsBE,KAAkBD,KAAM,GAC9CD,GAAsBE,KAAkBD,KAAIE,SAAU,EACtDH,GAAsBE,KAAkBD,KAAIG,YAAa,EACzDJ,GAAsBE,KAAkBD,KAAII,iBAAmB,IAGjE,MAAMC,GAAqB,GACrBC,GAAW,GAGjBnb,QAAQC,IAAI,sCAqBZ,MAAMmb,GAAgB1Z,EAAoB,UAMpC2Z,GAAgB,CACpBxP,YAAa,yBACbyP,aAAc,kDACdC,MAAO,0DACPxa,KAAM,UACNya,WAAY,CACV,CACEC,WAAY,kBACZ5V,MAAO,SAET,CACE4V,WAAY,OACZ5V,MAAO,YAKP6V,GAAc,CAClBC,aAAa,EACbC,kBAAmB,GACnBC,YAAY,GAkBH7b,QAAQC,IAAI,+CAMvB,MAAM6b,GAAsB,IAAIC,IAC9B,oCAEIC,GAAgB,IAAID,IACxB,gCAAkCpb,GAK9Bsb,GAAmBb,GAActZ,OAEjCoa,GAA0BC,kgBAAYC,mBACxCD,kgBAAYC,mBACZH,GACOjc,QAAQC,IAAI,uCAA8Bic,IACrD,MAAMnZ,GAAgB,IAAIgZ,IAAsBE,IAG1Cpa,GAAgBuZ,GAAcvZ,cAuwCpC,MAAMqR,GAAY,IAAImJ,IAAU,CAE9BC,eAAe,EACfC,gBAAiB,CACfC,cAAe,CACbC,QAASC,IACTrS,QAAS,CACPsS,SAAUhc,OAMHic,OAlxCf,SAAa1U,GACPnG,OAAO8a,WACTnB,GAAYC,aAAc,GAG5B,IAAKmB,GAAsBje,oBAAS,GAEpC,MAAMoU,EACJ6I,IAAuBA,GAAoBxX,SACvCwX,GACAE,IAGClZ,EAAkBia,GAAuBle,qBAG1C4D,ECxLO,SAA0B2Y,EAAenI,EAAiBxN,GACvE,MAAOhD,EAAOua,GAAYne,mBAAS,GAqBnC,OAFA0F,YAjBkB0Y,MAChBle,iBACE,GAAGqc,EAAc3Y,MACfua,EAAS5B,EAAc3Y,WACpB,CACH,MAAMya,EAAM,IAAIC,IACdlK,EAAgB9I,QAAU8I,EAAgB9I,QAAQ3I,QAAU,EAC5D,6CACA,IAEI4b,QAAaC,IAAQC,cAAcJ,EAAKK,IAAKL,EAAI1b,SAAUyR,GAC3DuK,EAAQ,IAAIC,IAAM,CAACL,GAAOG,IAAKL,EAAI1b,UACzCwb,EAAS5Q,WAAWoR,EAAME,SAASC,cAAc,MAGrDC,IAEmBnY,GAAY,MAE1BhD,EDkKOob,CAAiBzC,GAAenI,GAGxCvQ,EE3LO,SAAqB0Y,EAAc0C,GAChD,MAAOpb,EAAUqb,GAAelf,qBAkBhC,OADA0F,YAhBqBxF,UAChBqc,EAAc1Y,SACfqb,EAAY3C,EAAc1Y,UAE1Bsb,IACGC,IAAI,kDACJpW,KAAKqW,IACJ,MAAMC,EAA+C,IAAjCD,EAASE,KAAKN,GAAS,QACvCK,IAAgBzb,GAClBqb,EAAYI,KAGfE,MAAMtS,GAAS/L,QAAQC,IAAI8L,KAIV,OACjBrJ,EFwKU4b,CAAYlD,GAAe,QAEtCpI,EAAenQ,EAAgBC,EAAkBC,IACjDuD,EAAUqJ,YAAeqD,GAC1BkI,GAAmB5U,KACtB4U,GAAmB5U,GAAW,IAG3B6U,GAAS7U,KACZ6U,GAAS7U,GAAW,IAGjBoV,GAAYE,kBAAkBtV,GAGjCwW,EAAqBpB,GAAYE,kBAAkBtV,GAFnDoV,GAAYE,kBAAkBtV,IAAW,EAM3C,IAAIiY,EACFxb,IAAiBA,GAAcuB,UAAYvB,GAAcuB,SAAS9C,QAChEgd,EACFxL,GAAgBA,EAAa1O,UAAY0O,EAAa1O,SAAS9C,QACjExB,QAAQC,IAAI,wBAAyB+S,EAAa1O,UAKlD,MAAM0G,EAAKf,GAAW+I,EAActQ,GAM9B+b,EAAgBhgB,EAAkBsE,IAGlC2b,EAAiBjgB,EAAkBuU,GAGnC2L,EAAmBvY,EAAWsY,EAAgBpY,EAASvD,IAKvD6b,EGrNO,SAAmCxe,EAAUkG,EAASuY,EAAKC,GACxE,MAAOzY,EAAU0Y,GAAelgB,qBAyBhC,OAxBAC,oBAAU,MACRC,iBACE,GAAwB,qBAAbqB,GAA4BkG,GAAWuY,EAChD,IAEE,IAAI7f,EACJ,MAAMC,QAAiBmB,EAASlB,eAE9BF,EADEC,GAAYA,EAASE,OAAS,EACvBiB,EAAShB,YAETgB,EAGX,MAAMkX,EAAiB,IAAI1X,IAAS0G,EAASuY,EAAK7f,GAC/C8f,IAAkBxH,EAAexX,SAAWgf,GAE/CC,EAAYzH,GACZ,MAAOvX,GACPC,QAAQC,IAAI,sCAAsCqG,EAAQ,wCAAyCvG,IAIzGL,IACC,CAACU,EAAUkG,EAASuY,EAAKC,IACrBzY,EH2LoB2Y,CACzB/L,E9BlOuB,6C8BoOvBrS,GAGSZ,QAAQC,IAAI,wCAA+B2e,GAGtD,MAAMK,EAAsB1Z,EAC1B,CAAE2X,IAAK0B,GACP,MACA,YACA,CAAC,+CAEQ5e,QAAQC,IAAI,oCAA2Bgf,GAGlD,MAAMxY,EAAUlB,EAAkBkZ,EAAe,WAAY,YAAa,CACxEnY,IAEStG,QAAQC,IAAI,wBAAewG,GAGtC,MAAMyY,EIjPO,SAA0BvgB,EAAWc,EAAc0f,EAAW/e,EAAUgf,EAAYla,GACjG,MAAOma,EAASC,GAAczgB,mBAAS,IAsBvC,OApBAC,oBAAU,KAKR,GAJwB,qBAAbsB,GAAkD,qBAAfgf,GAE5Chf,EAASmf,iBAAiBH,GAExBzgB,GAAac,GAAgBd,EAAUc,GACzC,IAKE,OAJAd,EAAUc,GAAc4F,GAAG8Z,GAAW,WAAc,IAAD,IAAAK,EAAAjZ,UAAApH,OAAT+F,EAAI,IAAAua,MAAAD,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAJxa,EAAIwa,GAAAnZ,UAAAmZ,GAC5C,IAAIta,EAAcF,EAAKA,EAAK/F,OAAO,GAAGiG,YACtCka,EAAWK,GAAY,CAAC5S,OAAOC,OAAO,CAAC5H,eAAaF,EAAK0a,MAAM1a,SAAUya,OAEpE,KACLhhB,EAAUc,GAAcogB,eAAeV,IAEzC,MAAOpf,GACPC,QAAQC,IAAIF,KAGf,CAACK,EAAUgf,EAAYzgB,EAAWc,EAAc0f,IAE5CE,EJ0NgBS,CACrBrB,EACA,WACA,WACA1b,GACA,GAES/C,QAAQC,IAAI,gCAAuBif,GAE9C,MAAOa,EAAcC,GAAmBnhB,oBAAS,IAC1CohB,EAAgBC,GAAqBrhB,mBAAS,CACnD4D,MAAO,GACP0d,SAAU,MAELC,EAAcC,GAAmBxhB,mBAAS,KAK1CyhB,GAAkBC,IAAuB1hB,mBAC9C+b,IAGF,IAAK4F,GAAiBC,IAAsB5hB,mBAAS,IACjDqc,GAAmB5U,KACrBka,GAAkB,IAAItF,GAAmB5U,KAwC3CxH,oBAAU,KAGNmU,GACA3M,GACAkY,GACAG,GACAF,GACAC,GACAE,IAEA5e,QAAQC,IACN,yGAEFD,QAAQC,IAAI,+BAAsBgT,GAClCjT,QAAQC,IAAI,4BAAmBse,GAC/Bve,QAAQC,IAAI,mDAA2BqG,GACvCtG,QAAQC,IAAI,8DAA4Bue,GACxCxe,QAAQC,IACN,gCACA0e,GAAsC,OAExC3e,QAAQC,IAAI,6BAAoBwe,GAChCze,QAAQC,IAAI,wCAA+B2e,GAC3C5e,QAAQC,IAAI,8BAAqBye,KAElC,CACDzL,EACA3M,EACAkY,EACAG,EACAF,EACAC,EACAE,IAGF,IAAI8B,GAAiB,GAEnBA,GADEnC,GAAgBC,GAAmBD,GAAgBC,EAEnDjW,IAAAC,cAAA,OACEW,MAAO,CACL2E,OAAQ,EACRC,SAAU,WACViM,MAAO,EACP/L,IAAK,GACLtB,QAAS,KAGXpE,IAAAC,cAACmY,IAAK,CACJ/U,QAAS,6BACTC,YACEtD,IAAAC,cAAA,WAAK,WACM,IACTD,IAAAC,cAAA,SACGjH,EAAQid,GACLjd,EAAQid,GAAiBzd,KACzB,kBACD,IAAI,kCACsBwH,IAAAC,cAAA,SAAIjH,EAAQgd,GAAcxd,MAAS,KAItEC,KAAK,QACL4f,UAAU,KAMdrY,IAAAC,cAAA,OACEW,MAAO,CACL2E,QAAS,EACTC,SAAU,WACViM,MAAO,IACP/L,IAAK,GACLtB,QAAS,GACT/K,MAAOwZ,GAAcxZ,QAGtBwZ,GAAcra,MAKrB,MAAMoS,GAAgBvM,sBAAY7H,UAChCiB,QAAQC,IAAI,gBAAiBiT,GAAWA,GAAUI,gBAClD,MAAMlT,QAAiB8S,GAAU8E,UACjChY,QAAQC,IAAIG,GACZ2c,EAAoB,IAAI5Y,IAAa/D,KACpC,CAAC2c,IAEJje,oBAAU,KACJoU,GAAUI,gBACZH,MAED,CAACA,KAEJ,MAAOqK,GAAOqD,IAAYhiB,qBAC1BC,oBAAU,KACR+hB,GAAS9e,OAAOC,SAASkB,WACxB,CAAC2d,KAEJ,IAAIC,GAAa,GACjB,MAAMC,GACJhe,IACAA,GAAckB,YACS,cAAvBmX,GAAcra,KAoBhBf,QAAQC,IAAI,kBACZD,QAAQC,IAAI,sBACZD,QAAQC,IAAI0e,GACZmC,GACEvY,IAAAC,cAAA,OACEW,MAAO,CACLwD,QAAS,GACToB,SAAU,QACV0G,UAAW,QACXuF,MAAO,EACP/L,IAAK,KAGP1F,IAAAC,cAAC0I,IAAM,CACLlQ,KAAM,UACN6L,QAASA,KAjCI9N,WACjB,IAAIiiB,EAAgBja,eACZ0X,EAAc5X,YAAYG,UAAUV,IAE5CtG,QAAQC,IACN,iDACA+gB,GAEEA,EAAgB,WACZhW,EAAGyT,EAAc5X,YAAYoa,KAAK3a,EAAS,MAEnD0a,QAAsBvC,EAAc5X,YAAYG,UAAUV,GAC1DtG,QAAQC,IACN,iDACA+gB,IAoBIE,KAEH,qFAML,MAAOC,GAAUC,IAAeviB,mBAASwc,KAClCgG,GAASC,IAAcziB,sBACvB0iB,GAAUC,IAAe3iB,sBACzB4iB,GAAcC,IAAmB7iB,sBAEjC8iB,GAAaC,IAAkB/iB,sBAC/BgjB,GAAaC,IAAkBjjB,qBACtC,IAAKkjB,GAASC,IAAcnjB,mBAASsc,GAAS7U,IAC1C6U,GAAS7U,KACXyb,GAAU5G,GAAS7U,IAGrB,MAAO2b,GAAqBC,IAA0BrjB,mBAAS,KAExDsjB,GAAcC,IAAmBvjB,sBAEjCwjB,GAAaC,IAAkBzjB,mBAAS,KAExC0jB,GAAaC,IAAkB3jB,mBAAS,GAE/C,IAAK4jB,GAAOC,IAAY7jB,oBAAS,GAEjC,MAAM8jB,GAAyB5jB,UAC7B,IAAI6jB,EAAc,GAClB,IAAK,IAAI/H,KAAKF,GACZ,IACE,MAAMI,EAAUuF,GAAiBzF,GAAGE,QACpC,IAAI8H,EACAC,EAAc,CAChBC,OAAQ,GACRtgB,MAAO,EACP0d,SAAU,EACV6C,aAAc,EACdC,OAAQ,EACRC,WAAY,EACZC,UAAU,EACVC,WAAY,GACZC,MAAO,IAET,IAAKtI,EAAS,CACZ,MAAMuI,EAAUjB,GAAYxH,GAC5BgI,QAAcpE,EAAc8E,SAASC,QAAQF,GAC7C,MAAMG,EAAahF,EAAc8E,SAASjd,QAC1CtG,QAAQC,IAAI,uBACZD,QAAQC,IAAIqgB,GAAiBzF,IACzByF,GAAiBzF,GAAGG,aAEpB8H,EAD2C,IAAzCxC,GAAiBzF,GAAGI,uBAEdwD,EAAciF,oBAAoBC,uBACtCF,EACAH,SAII7E,EAAcmF,kBAAkBD,uBACpCF,EACAH,IAIRtjB,QAAQC,IAAI,+BACZD,QAAQC,IAAI6iB,GAEdF,EAAYnR,KAAK,CACf3M,GAAI+V,KACDF,GAAOE,GACVE,QAASA,EACT8H,MAAOA,EACPC,gBAEF,MAAO/iB,GACPC,QAAQC,IAAIF,GAGhBqiB,GAAgBQ,IAGlB9jB,oBAAU,KACJ2f,GAAiB6B,IAAkBqC,MACtC,CAAChI,GAAQ8D,EAAeS,EAAgBoB,KAE3C,MAAMuD,GAAgBC,GACb/kB,UACA+D,SACGqQ,KAEHuI,GAAYE,kBAAkBtV,UAC3Byd,KAER1D,EAAgByD,GAChB9D,GAAgB,GAChBwC,GAAe,IAIbwB,GAAWjlB,MAAO+kB,EAAUG,EAAUC,KAC1ClkB,QAAQC,IAAI,iCAAkC6jB,GAC9C,MAAMR,EAAUjB,GAAYyB,GACtBL,EAAahF,EAAc8E,SAASjd,QAE1C,IACkB,IAAZ4d,GACFlkB,QAAQC,IAAI,4CACN+K,EACJ0T,EAAegF,oBAAoBS,IAAIV,EAAYH,EAASW,MAG9DjkB,QAAQC,IAAI,4CACN+K,EACJ0T,EAAekF,kBAAkBQ,iBAAiBX,EAAYH,IAEhE1I,GAAsBwF,GAAcpF,YAAa,SAC1C+G,GAAQ+B,GACftD,GAAgB/O,KAAKqS,GACrB5I,GAAmB5U,GAAWka,GAC9BC,GAAmBD,IACnBD,GAAoB3F,KAEtBO,GAAS7U,GAAWyb,GACpBY,KACA,MAAO5iB,GACPC,QAAQC,IAAI,sBACZD,QAAQC,IAAIF,KAIVskB,GAAmBP,GAChB/kB,UACL,MAAMukB,EAAUjB,GAAYyB,GACtBL,EAAahF,EAAc8E,SAASjd,QAMpC4c,SAJEzE,EAAciF,oBAAoBC,uBACtCF,EACAH,IAE2BJ,WAC/BljB,QAAQC,IAAI,yCAA0CijB,GACtD,UACQlY,EACJ0T,EAAegF,oBAAoBY,YAAYb,EAAYH,IAEzDJ,IAAe5c,GACjBka,GAAgB/O,KAAKqS,GACrB5I,GAAmB5U,GAAWka,IAE9BtF,GAAmBgI,GAAYzR,KAAKqS,GAEtClJ,GAAsBkJ,GAAU9I,YAAa,EAC7CuF,GAAoB3F,IACpB+H,KACA,MAAO5iB,GACPC,QAAQC,IAAI,8BACZD,QAAQC,IAAIF,KAKZwkB,GAAgBA,CAACT,EAAUvB,IACxBxjB,UACL,MAAMukB,EAAUjB,GAAYyB,GACtBL,EAAahF,EAAc8E,SAASjd,QACtB,IAAhBic,QACIvX,EACJ0T,EAAegF,oBAAoBc,aAAaf,EAAYH,UAGxDtY,EACJ0T,EAAekF,kBAAkBY,aAAaf,EAAYH,IAI9D1I,GAAsBkJ,GAAU9I,YAAa,EAC7CwF,GAAgB/O,KAAKqS,GACrB5I,GAAmB5U,GAAWka,GAC9BC,GAAmBD,IACnBD,GAAoB3F,IACpB+H,MAIE8B,GAAW1lB,UACV+D,SACGqQ,KAEHuI,GAAYE,kBAAkBtV,UAC3Byd,WAEFtF,EAAc8E,SAASmB,iBAAiBpe,EAASwd,GACvD,MAAMR,QAAiB7E,EAAc8E,SAASoB,cAAiB,EAE/DtC,GAAYyB,GAAYR,EACxB1I,GAAsBkJ,GAAU/I,SAAU,EAE1CyF,GAAgB/O,KAAKqS,GACrB5I,GAAmB5U,GAAWka,GAC9BC,GAAmBD,IACnBD,GAAoB3F,IACpB+H,MAGF,IAAIiC,GAAc,GAClB,IAAK,IAAI/J,KAAKsH,GAAeA,GAAa0C,MAAM,EAAG,GAAK,GAAI,CAG1D,IAAIC,EAAc,GACd7E,EAAiB,GACrB,GAAIkC,GAAatH,GAAGE,QAClB+J,EAAYrT,KACVlJ,IAAAC,cAAA,WACED,IAAAC,cAAC0I,IAAM,CACLrE,QAASA,KACP4X,GAAStC,GAAatH,GAAG/V,MAE5B,UAKLmb,EAAexO,KAAK,UACf,CACL,MAAM,YAAEqR,GAAgBX,GAAatH,GACrC7a,QAAQC,IAAI,2BAA4B6iB,EAAY3C,UACpD,MAAM4E,EAAWhe,SAAgC,IAAvB+b,EAAY3C,UACtCngB,QAAQC,IAAI,eAAgB8kB,GAC5B/kB,QAAQC,IAAI,oBAAoB,IAAI8D,MAAOihB,WAC3C,MAAMC,EAAqB,IAAXF,IAAmB,IAAIhhB,MAAOihB,UAE9ChlB,QAAQC,IAAI,qBACZD,QAAQC,IAAI6iB,GACZ9iB,QAAQC,IAAI,wDACZD,QAAQC,IAAI2a,GAAsBC,IAClC7a,QAAQC,IAAI4a,GACZ,MAAMqK,EAAmB/C,GAAatH,GAAG/V,GACzCggB,EAAYrT,KACVlJ,IAAAC,cAAA,WACED,IAAAC,cAAA,WAAK,YACO,IACVD,IAAAC,cAACP,GAAO,CACN3B,QAAS6b,GAAatH,GAAGgI,MACzBza,YAAa6K,EACbpR,cAAeA,GACfqH,WAAW,MAGbiZ,GAAatH,GAAGiI,YAAYK,UAC5B7c,IAAY6b,GAAatH,GAAGgI,OAC1Bta,IAAAC,cAAAD,IAAA4c,SAAA,KACE5c,IAAAC,cAAC0I,IAAM,CACL/H,MAAO,CAAEic,aAAc,QACvBvY,QAASgX,GAAa1B,GAAatH,GAAG/V,IACtC2N,SAAUnM,IAAY6b,GAAatH,GAAGgI,OACvC,iBAGDta,IAAAC,cAAA,YAGL2Z,GAAatH,GAAGiI,YAAYK,UAC3B7c,IAAY6b,GAAatH,GAAGiI,YAAYC,QACqB,IAA7DnI,GAAsBsK,GAAkBjK,kBACtC1S,IAAAC,cAAAD,IAAA4c,SAAA,KACE5c,IAAAC,cAAC0I,IAAM,CACL/H,MAAO,CAAEic,aAAc,QACvBvY,QAASwX,GAAgBlC,GAAatH,GAAG/V,KAC1C,oBAGDyD,IAAAC,cAAA,YAGL2Z,GAAatH,GAAGiI,YAAYK,UAC3B7c,IAAY6b,GAAatH,GAAGiI,YAAYC,QACtCxa,IAAAC,cAAAD,IAAA4c,SAAA,KACE5c,IAAAC,cAAC0I,IAAM,CACL/H,MAAO,CAAEic,aAAc,QACvBvY,QAAS0X,GACPpC,GAAatH,GAAG/V,GAChB8V,GAAsBsK,GAAkBjK,mBAE3C,kBAGD1S,IAAAC,cAAA,cAMVxI,QAAQC,IAAI,qBAAsBkiB,GAAatH,IAC/C7a,QAAQC,IAAI,eAAgB8hB,GAAQI,GAAatH,GAAG/V,KACpD9E,QAAQC,IAAI,qBAAsBglB,GAClChF,EAAexO,KACbqR,EAAYK,SACV5a,IAAAC,cAAA,OAAKW,MAAO,CAAEmE,UAAW,SACvB/E,IAAAC,cAAA,KAAGW,MAAO,CAAE+N,WAAY,SACwC,IAA7D0D,GAAsBsK,GAAkBjK,iBACrC,iBACA,eAAe,0BAGrB1S,IAAAC,cAAA,KAAGW,MAAO,CAAE4M,OAAQ,EAAGqP,aAAc,QAC2B,IAA7DxK,GAAsBsK,GAAkBjK,iBACrC,WACA,GAAI,IAAI,YACF6H,EAAYrgB,MAAM4iB,WAAY,KAE1C9c,IAAAC,cAAA,KAAGW,MAAO,CAAEmE,UAAW,IACnB2X,EAKE,4BALK,mBAAAplB,OACcylB,YACjB,IAAIvhB,KAAKghB,GACT,uBAIsD,IAA7DnK,GAAsBsK,GAAkBjK,kBACvC1S,IAAAC,cAAA,WACGsa,EAAYI,aAAe7J,aAAUkM,YACpC,+BAEAhd,IAAAC,cAAA,WAAK,kBACa,IAChBD,IAAAC,cAACP,GAAO,CACN3B,QAASwc,EAAYI,WACrB9a,YAAa6K,EACbpR,cAAeA,GACfqH,WAAW,IAEbX,IAAAC,cAAA,SAAG,OAAKsa,EAAYG,OAAOoC,cAM2B,IAA7DzK,GAAsBsK,GAAkBjK,kBACvC1S,IAAAC,cAAA,WACED,IAAAC,cAAA,WAAK,oCAC+B,IAClCD,IAAAC,cAAA,SAAIsa,EAAYrgB,MAAM4iB,cAK5B9c,IAAAC,cAAA,WACED,IAAAC,cAAA,OACEW,MAAO,CACL+F,QAAS,OACTsW,WAAY,SACZlY,UAAW,SAGb/E,IAAAC,cAAA,KAAGW,MAAO,CAAE4M,OAAQ,EAAGoB,YAAa,SAAU,qBACzB,KAErB5O,IAAAC,cAACid,IAAW,CACV7W,YAAY,MACZ/I,MAAOkc,GAAQI,GAAatH,GAAG/V,IAC/Ba,SAAW+f,IACTvK,GAAS7U,GAAW,IACfyb,GACH,CAACI,GAAatH,GAAG/V,IAAK4gB,GAExB1D,GAAW,IAAKD,GAAS,CAACI,GAAatH,GAAG/V,IAAK4gB,KAEjDvc,MAAO,CAAEwc,SAAU,MAGvBpd,IAAAC,cAAC0I,IAAM,CACL/H,MAAO,CAAEmE,UAAW,OACpBT,QAASA,IACPmX,GACE7B,GAAatH,GAAG/V,GAChBid,GAAQI,GAAatH,GAAG/V,IACxB8V,GAAsBsK,GAAkBjK,kBAG5CxI,UAAWsP,GAAQI,GAAatH,GAAG/V,KAAOmgB,GAC3C,iBAKH,MAIRL,GAAYnT,KACVlJ,IAAAC,cAAAD,IAAA4c,SAAA,KACE5c,IAAAC,cAACyP,IAAI,CACH9O,MAAO,CAAE+E,MAAO,KAChBiD,IAAKgR,GAAatH,GAAG9Z,KACrB6kB,QAASd,EACTzV,MACE9G,IAAAC,cAAA,WACG2Z,GAAatH,GAAG9Z,KAAM,IACvBwH,IAAAC,cAAA,KACEW,MAAO,CAAEyD,OAAQ,UAAW8H,QAAS,KACrCpL,KAAM6Y,GAAatH,GAAGS,aACtBjS,OAAO,SACPE,IAAI,uBAEJhB,IAAAC,cAACqd,IAAY,SAKnBtd,IAAAC,cAAA,OAAKW,MAAO,CAAE2c,SAAU,KAAOC,IAAK5D,GAAatH,GAAGU,QACpDhT,IAAAC,cAAA,OAAKW,MAAO,CAAEuL,QAAS,MAASyN,GAAatH,GAAGhP,aAC/CoU,KAkETle,OAAO8a,UAAY9a,OAAO8a,SAASxX,GAAG,eAAiB7D,OAEvDO,OAAO8a,UACL9a,OAAO8a,SAASxX,GAAG,kBAAoBpG,IACrCkU,OAQJ,MAAM4Q,GAAgBhlB,UAEpB,SADyBgE,GAAcijB,WAAW1f,IAChC,GAAK,CACrB,MAAMtH,EAAS+D,GAAc3D,YAC7B,IAAI2L,QAAe/L,EAAOqM,gBAAgB,CACxCuH,GAAItM,EACJT,MAAO8M,aAAW,OAClBjQ,SAAUwI,aAAW,MAAO,QAC5BC,SAAUC,aAAQ,QAEpBpL,QAAQC,IAAI,qBAAsB8K,GAGpC2Q,GAAYG,YAAa,QACnB7Q,EACJ0T,EAAe6E,SAAS0C,kBACtBvH,EAAekF,kBAAkBtd,SACjC,UAGE0E,EACJ0T,EAAe6E,SAAS0C,kBACtBvH,EAAegF,oBAAoBpd,SACnC,UAGE0E,EACJ0T,EAAe7X,YAAYqf,QACzBxH,EAAekF,kBAAkBtd,QACjC,YAGE0E,EACJ0T,EAAe7X,YAAYqf,QACzBxH,EAAegF,oBAAoBpd,QACnC,MAIJoV,GAAYE,kBAAkBtV,IAAW,EACzCoV,GAAYG,YAAa,GAGrBsK,GAAcpnB,UAClBiB,QAAQC,IAAI,eACZyiB,IAAUD,KAGZ,OACEla,IAAAC,cAAA,OAAKuR,UAAU,QACX2B,GAAYC,aAAepT,IAAAC,cAAC+R,GAAgB,MAK7CmB,GAAYG,YAActT,IAAAC,cAACgS,GAAO,MAElCkB,GAAYC,aACXpT,IAAAC,cAAA,WACED,IAAAC,cAACyJ,IAAK,CACJ5C,MAAM,gBACN6C,QAAS6N,EACTzN,KAtIOvT,UACfihB,GAAgB,GAChB,MAAM,MAAEvd,EAAK,SAAE0d,GAAaF,EACtBqD,EAAUjB,GAAYjC,GACtBqD,EAAahF,EAAc8E,SAASjd,QACpC8f,EAAe3H,EAAc5X,YAAYP,QAI/C,IAAI+f,EAHJrmB,QAAQC,IAAI,gBAAiBmgB,GAC7BpgB,QAAQC,IAAI,eAAgBkgB,GAIR,IAAhBoC,IACF8D,EAAe3H,EAAegF,oBAC9B9I,GAAsBwF,GAAcnF,iBAAmB,IAEvDoL,EAAe3H,EAAekF,kBAC9BhJ,GAAsBwF,GAAcnF,iBAAmB,GAGzDjb,QAAQC,IAAI,+BAEZ,MAAMqmB,EAAavf,SAAStE,EAAM4iB,YAClCrlB,QAAQC,IAAI,6BAA8BqmB,GAC1C,MAAMC,EAAgBC,KAAKC,OAAM,IAAI1iB,MAAOihB,UAAY,KAAQ7E,EAChEngB,QAAQC,IAAI,mBAAoBsmB,SAE1Bvb,EACJqb,EAAaK,mBACXjD,EACAH,EACA8C,EACAE,EACAC,IAIJ3L,GAAsBwF,GAAcpF,YAAa,EACjDhb,QAAQC,IAAI,+BAAgCmgB,GAC5CpgB,QAAQC,IAAI,gCAAiCugB,IAC7C,MAAMmG,EAAQnG,GAAgBrd,QAAQid,GACtCI,GAAgBoG,OAAOD,EAAO,GAC9B3mB,QAAQC,IAAI,+BAAgCugB,IAC5CtF,GAAmB5U,GAAWka,GAC9BC,GAAmBD,IACnBD,GAAoB3F,IACpB+H,MA0FQpQ,SAvFWsU,KACnB7G,GAAgB,IAuFR8G,cAAe,CACbrU,UAAWwN,EAAexd,QAAUwd,EAAeE,UAErD4G,OAAO,SAEPxe,IAAAC,cAAA,OAAKW,MAAO,CAAE+F,QAAS,OAAQsW,WAAY,WACzCjd,IAAAC,cAAA,KAAGW,MAAO,CAAE4M,OAAQ,EAAGoB,YAAa,SAAU,6BACjB,KAE7B5O,IAAAC,cAACid,IAAW,CACV7W,YAAY,MACZ/I,MAAOoa,EAAexd,MACtBkD,SAAWqhB,GACT9G,EAAkB,IAAKD,EAAgBxd,MAAOukB,IAEhD7d,MAAO,CAAEwc,SAAU,MAGvBpd,IAAAC,cAAA,WACAD,IAAAC,cAAA,OAAKW,MAAO,CAAE+F,QAAS,OAAQsW,WAAY,WACzCjd,IAAAC,cAAA,KAAGW,MAAO,CAAE4M,OAAQ,EAAGoB,YAAa,SAAU,uBACvB,KAEvB5O,IAAAC,cAACid,IAAW,CACV7W,YAAY,OACZ/I,MAAOoa,EAAeE,SACtBxa,SAAWshB,GACT/G,EAAkB,IACbD,EACHE,SAAU8G,IAGd9d,MAAO,CAAEwc,SAAU,MAGvBpd,IAAAC,cAAA,WACAD,IAAAC,cAAA,OAAKW,MAAO,CAAE+F,QAAS,OAAQsW,WAAY,WACzCjd,IAAAC,cAAC0e,IAAMC,MAAK,CAACxhB,SAzHE5F,IACzByiB,GAAeziB,EAAEsJ,OAAOxD,QAwH4BA,MAAO0c,IAC/Cha,IAAAC,cAAC0e,IAAK,CAACrhB,MAAO,GAAG,yBACjB0C,IAAAC,cAAC0e,IAAK,CAACrhB,MAAO,GAAG,0BAMvB0C,IAAAC,cAAC0Q,GAAM,MACNwH,GAEDnY,IAAAC,cAAC4e,IAAa,KACZ7e,IAAAC,cAAC6e,IAAI,CACHle,MAAO,CAAEsL,UAAW,SAAU+Q,WAAY,UAC1C8B,aAAc9J,GACdxO,KAAK,cAELzG,IAAAC,cAAC6e,IAAKE,KAAI,CAACpW,IAAI,KACb5I,IAAAC,cAACgf,IAAI,CACH3a,QAASA,KACPgU,GAAS,MAEXjO,GAAG,KACJ,YAIHrK,IAAAC,cAAC6e,IAAKE,KAAI,CAACpW,IAAI,qBACb5I,IAAAC,cAACgf,IAAI,CACH3a,QAASA,KACPgU,GAAS,sBAEXjO,GAAG,qBACJ,qBAIHrK,IAAAC,cAAC6e,IAAKE,KAAI,CAACpW,IAAI,cACb5I,IAAAC,cAACgf,IAAI,CACH3a,QAASA,KACPgU,GAAS,eAEXjO,GAAG,cACJ,cAIHrK,IAAAC,cAAC6e,IAAKE,KAAI,CAACpW,IAAI,WACb5I,IAAAC,cAACgf,IAAI,CACH3a,QAASA,KACPgU,GAAS,YAEXjO,GAAG,WACJ,gBAIHrK,IAAAC,cAAC6e,IAAKE,KAAI,CAACpW,IAAI,aACb5I,IAAAC,cAACgf,IAAI,CACH3a,QAASA,KACPgU,GAAS,cAEXjO,GAAG,aACJ,kBAIHrK,IAAAC,cAAC6e,IAAKE,KAAI,CAACpW,IAAI,mBACb5I,IAAAC,cAACgf,IAAI,CACH3a,QAASA,KACPgU,GAAS,oBAEXjO,GAAG,mBACJ,qBAMLrK,IAAAC,cAAC0R,IAAM,KACL3R,IAAAC,cAACiV,IAAK,CAACgK,OAAK,EAACC,KAAK,KAOhBnf,IAAAC,cAAA,OACEW,MAAO,CACL2c,SAAU,KACV/P,OAAQ,OACRzI,UAAW,GACXqa,cAAe,KAGjBpf,IAAAC,cAAC0I,IAAM,CACLuB,SAAiC,IAAvBmS,GAAYzlB,OACtB0N,QAAS8V,GACTxZ,MAAO,CAAEic,aAAc,SACxB,uBAID7c,IAAAC,cAACof,KAAS,CACRC,YAAa,IACbC,YAAa,GACbC,aAAc,IAEbnD,MAKPrc,IAAAC,cAACiV,IAAK,CAACiK,KAAK,qBACVnf,IAAAC,cAAA,OACEW,MAAO,CACL+E,MAAO,IACP6H,OAAQ,OACRzI,UAAW,GACXqa,cAAe,KAGjBpf,IAAAC,cAACwf,IAAI,CACHvR,UAAQ,EACRwR,WAAYzH,GACZ0H,WAAaC,GAET5f,IAAAC,cAACwf,IAAKT,KAAI,CACRpW,IAAKwJ,GAAOwN,GAAM7M,aAAe,IAAMhV,GAEvCiC,IAAAC,cAACyP,IAAI,CAAC5I,MAAO9G,IAAAC,cAAA,WAAMmS,GAAOwN,GAAMpnB,OAC9BwH,IAAAC,cAAA,WACED,IAAAC,cAAA,OACEud,IAAKpL,GAAOwN,GAAM5M,MAClBpS,MAAO,CAAE2c,SAAU,QAGvBvd,IAAAC,cAAA,WAAMmS,GAAOwN,GAAMtc,mBASjCtD,IAAAC,cAACiV,IAAK,CAACiK,KAAK,cACVnf,IAAAC,cAAA,OACEW,MAAO,CACL+E,MAAO,IACP6H,OAAQ,OACRzI,UAAW,GACXqa,cAAe,KAGjBpf,IAAAC,cAACwf,IAAI,CACHvR,UAAQ,EACRwR,WAAY/I,EACZgJ,WAAaC,GAET5f,IAAAC,cAACwf,IAAKT,KAAI,CACRpW,IACEgX,EAAK,GACL,IACAA,EAAK,GACL,IACAA,EAAK/iB,YACL,IACA+iB,EAAK,GAAGxU,YAGVpL,IAAAC,cAAA,QAAMW,MAAO,CAAEY,SAAU,GAAIoN,YAAa,IAAK,IAC3CgR,EAAK,GAAGxU,YAEZpL,IAAAC,cAACP,GAAO,CACN3B,QAAS6hB,EAAK,GACd/f,YAAa6K,EACblJ,SAAU,KAEZxB,IAAAC,cAACP,GAAO,CACN3B,QAAS6hB,EAAK,GACd/f,YAAa6K,EACblJ,SAAU,UASxBxB,IAAAC,cAACiV,IAAK,CAACiK,KAAK,WACVnf,IAAAC,cAAA,OACEW,MAAO,CACLif,WAAY,GACZla,MAAO,IACP6H,OAAQ,OACRtB,UAAW,SAGblM,IAAAC,cAAC6f,KAAS,CACRlf,MAAO,CAAEwD,QAAS,GAClBoZ,IAAK5E,GACLzH,MAAO,MACP4O,iBAAiB,EACjBC,OAAQA,CAACC,EAAM3N,KACbuG,GAAYoH,EAAKC,cAEnBC,MAAOA,CAACC,EAAK9N,KACXuG,GAAYuH,EAAIF,cAElBG,SAAUA,CAACC,EAAKhO,KACduG,GAAYyH,EAAIJ,iBAKtBlgB,IAAAC,cAAC0I,IAAM,CACL/H,MAAO,CAAE4M,OAAQ,GACjBrD,QAAS2O,GACTtY,KAAK,QACLyK,MAAM,QACNxS,KAAK,UACL6L,QAAS9N,UACPiB,QAAQC,IAAI,eAAgBkhB,IAC5BG,IAAW,GACXE,OAQH,kBAIDjZ,IAAAC,cAAA,OAAKW,MAAO,CAAEwD,QAAS,GAAIgb,cAAe,MACvCpG,KAGLhZ,IAAAC,cAACiV,IAAK,CAACiK,KAAK,aACVnf,IAAAC,cAAA,OAAKW,MAAO,CAAEif,WAAY,GAAIla,MAAO,IAAK6H,OAAQ,SAChDxN,IAAAC,cAACiG,IAAK,CACJ5I,MAAO4b,GACPqH,YACE,kEAEFnjB,SAAW5F,IACT2hB,GAAgB3hB,EAAEsJ,OAAOxD,WAI/B0C,IAAAC,cAAC0I,IAAM,CACL/H,MAAO,CAAE4M,OAAQ,GACjBrD,QAAS2O,GACTtY,KAAK,QACLyK,MAAM,QACNxS,KAAK,UACL6L,QAAS9N,UACPiB,QAAQC,IAAI,iBAAkBwhB,IAC9BG,IAAe,GACfE,KACA,MAAM/W,OAxqCNhM,aAwqCqBgqB,GACjBhe,GAAUA,EAAOsa,UACnBvD,GAAe/W,EAAOsa,YAExBzD,IAAe,KAElB,sBAIDrZ,IAAAC,cAAA,OACEW,MAAO,CACLwD,QAAS,GACTuB,MAAO,IACP6H,OAAQ,OACR4R,cAAe,MAGhB9F,KAGLtZ,IAAAC,cAACiV,IAAK,CAACiK,KAAK,mBACVnf,IAAAC,cAAC5I,GAAQ,CACPmB,KAAK,oBACL/B,OAAQgU,EAAa5T,YACrBgB,SAAU2C,GACVuD,QAASA,EACTzE,cAAeA,KAEjB0G,IAAAC,cAAC5I,GAAQ,CACPmB,KAAK,sBACL/B,OAAQgU,EAAa5T,YACrBgB,SAAU2C,GACVuD,QAASA,EACTzE,cAAeA,QAMvB0G,IAAAC,cAACwgB,GAAW,MAGZzgB,IAAAC,cAAA,OACEW,MAAO,CACL4E,SAAU,QACV0G,UAAW,QACXuF,MAAO,EACP/L,IAAK,EACLtB,QAAS,IAEXsc,aAAc9C,GACd+C,aAAc/C,IAEd5d,IAAAC,cAACsK,GAAO,CACNxM,QAASA,EACTvD,cAAeA,GACfiQ,aAAcA,EACdC,gBAAiBA,EACjBxQ,MAAOkc,EACPzL,UAAWA,GACXC,cAAeA,GACfC,kBA3bcrU,gBAClBmU,GAAUiW,uBA2bNtnB,cAAeA,KAEhB4gB,IAAS3B,IAIZvY,IAAAC,cAAA,OACEW,MAAO,CACL4E,SAAU,QACV0G,UAAW,OACXzG,KAAM,EACNiM,OAAQ,GACRtN,QAAS,KAGXpE,IAAAC,cAAC8L,IAAG,CAAC8U,MAAM,SAASC,OAAQ,CAAC,EAAG,IAC9B9gB,IAAAC,cAAC+L,IAAG,CAACC,KAAM,GACTjM,IAAAC,cAAC0P,GAAI,CAACzV,MAAOA,EAAO6D,QAASA,EAASgS,SAAU5W,KAGlD6G,IAAAC,cAAC+L,IAAG,CAACC,KAAM,EAAGrL,MAAO,CAAEsL,UAAW,SAAUC,QAAS,KACnDnM,IAAAC,cAAC4Q,GAAQ,CAAC1W,SAAUA,KAEtB6F,IAAAC,cAAC+L,IAAG,CAACC,KAAM,EAAGrL,MAAO,CAAEsL,UAAW,SAAUC,QAAS,IACnDnM,IAAAC,cAAC0I,IAAM,CACLrE,QAASA,KACP9K,OAAO0J,KAAK,iDAEd1C,KAAK,QACLyK,MAAM,SAENjL,IAAAC,cAAA,QACEW,MAAO,CAAEgO,YAAa,GACtBC,KAAK,MACLC,aAAW,WACZ,gBAEM,aAMb9O,IAAAC,cAAC8L,IAAG,CAAC8U,MAAM,SAASC,OAAQ,CAAC,EAAG,IAC9B9gB,IAAAC,cAAC+L,IAAG,CAACC,KAAM,IAGPuM,GACExY,IAAAC,cAACsQ,GAAM,CACL/V,cAAeA,GACfN,MAAOA,EACP2F,YAAa6K,IAGf,SK15CpB,MAAM6G,GAAS,CACbO,KAAK,GAADxa,OAAKsc,GAAsB,mBAC/B7B,MAAM,GAADza,OAAKsc,GAAsB,qBAG5BmN,GAAYvnB,OAAO6B,aAAaC,QAAQ,SAE9C,IAAI0lB,GAAc,kEAElB,MAAMC,GAAS,IAAIC,IAAa,CAC9BC,IAAKH,GACLniB,MAAO,IAAIuiB,MAGbC,IAASC,OACPthB,IAAAC,cAACshB,IAAc,CAACN,OAAQA,IACtBjhB,IAAAC,cAACuhB,KAAqB,CAACC,SAAUlQ,GAAQmQ,aAAcX,IAAwB,SAC7E/gB,IAAAC,cAACoU,GAAG,CAAC2M,YAAaA,OAGtBW,SAASC,eAAe,U,kBC5B1BC,EAAOC,QAAU,CACf,iDACA,iDACA,iDACA,iDACA,iDACA,iDACA,iDACA,iDACA,iDACA,iDACA,iDACA,iDACA,iDACA,iDACA,iDACA,iDACA,mD,kBCjBF,SAASC,EAAoBC,GAC5B,IAAIxqB,EAAI,IAAIyqB,MAAM,uBAAyBD,EAAM,KAEjD,MADAxqB,EAAE0qB,KAAO,mBACH1qB,EAEPuqB,EAAoBI,KAAO,WAAa,MAAO,IAC/CJ,EAAoBK,QAAUL,EAC9BF,EAAOC,QAAUC,EACjBA,EAAoBxlB,GAAK,K,kBCRzB,SAASwlB,EAAoBC,GAC5B,IAAIxqB,EAAI,IAAIyqB,MAAM,uBAAyBD,EAAM,KAEjD,MADAxqB,EAAE0qB,KAAO,mBACH1qB,EAEPuqB,EAAoBI,KAAO,WAAa,MAAO,IAC/CJ,EAAoBK,QAAUL,EAC9BF,EAAOC,QAAUC,EACjBA,EAAoBxlB,GAAK,K,qkBCRzB,SAASwlB,EAAoBC,GAC5B,IAAIxqB,EAAI,IAAIyqB,MAAM,uBAAyBD,EAAM,KAEjD,MADAxqB,EAAE0qB,KAAO,mBACH1qB,EAEPuqB,EAAoBI,KAAO,WAAa,MAAO,IAC/CJ,EAAoBK,QAAUL,EAC9BF,EAAOC,QAAUC,EACjBA,EAAoBxlB,GAAK,K,kBCRzBslB,EAAOC,QAAU,CAAC,oBAAoB,sBAAsB,cAAc,c","file":"static/js/main.050d3dc0.chunk.js","sourcesContent":["/* eslint-disable import/no-dynamic-require */\r\n/* eslint-disable global-require */\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Loads your local contracts and gives options to read values from contracts \r\n                                              or write transactions into them\r\n\r\n  ~ How can I use? ~\r\n\r\n  const readContracts = useContractLoader(localProvider) // or\r\n  const writeContracts = useContractLoader(userProvider)\r\n\r\n  ~ Features ~\r\n\r\n  - localProvider enables reading values from contracts\r\n  - userProvider enables writing transactions into contracts\r\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts \r\n    and using ContractReader.js hook:\r\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\r\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\r\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\r\n*/\r\n\r\nconst loadContract = (contractName, signer) => {\r\n  const newContract = new Contract(\r\n    require(`../contracts/${contractName}.address.js`),\r\n    require(`../contracts/${contractName}.abi.js`),\r\n    signer,\r\n  );\r\n  try {\r\n    newContract.bytecode = require(`../contracts/${contractName}.bytecode.js`);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return newContract;\r\n};\r\n\r\nexport default function useContractLoader(providerOrSigner) {\r\n  const [contracts, setContracts] = useState();\r\n  useEffect(() => {\r\n    async function loadContracts() {\r\n      if (typeof providerOrSigner !== \"undefined\") {\r\n        try {\r\n          // we need to check to see if this providerOrSigner has a signer or not\r\n          let signer;\r\n          let accounts;\r\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\r\n            accounts = await providerOrSigner.listAccounts();\r\n          }\r\n\r\n          if (accounts && accounts.length > 0) {\r\n            signer = providerOrSigner.getSigner();\r\n          } else {\r\n            signer = providerOrSigner;\r\n          }\r\n\r\n          const contractList = require(\"../contracts/contracts.js\");\r\n\r\n          const newContracts = contractList.reduce((accumulator, contractName) => {\r\n            accumulator[contractName] = loadContract(contractName, signer);\r\n            return accumulator;\r\n          }, {});\r\n          setContracts(newContracts);\r\n        } catch (e) {\r\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\r\n        }\r\n      }\r\n    }\r\n    loadContracts();\r\n  }, [providerOrSigner]);\r\n  return contracts;\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { isAddress } from \"@ethersproject/address\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\r\n\r\n  ~ How can I use? ~\r\n\r\n  const contractIsDeployed = useContractExistsAtAddress(localProvider, contractAddress);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide contractAddress to check if the contract is deployed\r\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\r\n*/\r\n\r\nconst useContractExistsAtAddress = (provider, contractAddress) => {\r\n  const [contractIsDeployed, setContractIsDeployed] = useState(false);\r\n\r\n  // We can look at the blockchain and see what's stored at `contractAddress`\r\n  // If we find code then we know that a contract exists there.\r\n  // If we find nothing (0x0) then there is no contract deployed to that address\r\n  useEffect(() => {\r\n    // eslint-disable-next-line consistent-return\r\n    const checkDeployment = async () => {\r\n      if (!isAddress(contractAddress)) return false;\r\n      const bytecode = await provider.getCode(contractAddress);\r\n      setContractIsDeployed(bytecode !== \"0x0\");\r\n    };\r\n    if (provider) checkDeployment();\r\n  }, [provider, contractAddress]);\r\n\r\n  return contractIsDeployed;\r\n};\r\n\r\nexport default useContractExistsAtAddress;\r\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\r\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\r\n\r\n//MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\r\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\r\n\r\n//BLOCKNATIVE ID FOR Notify.js:\r\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\r\n\r\n// EXTERNAL CONTRACTS\r\n\r\nexport const DAI_ADDRESS = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\";\r\n\r\nexport const DAI_ABI = [\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"chainId_\", type: \"uint256\" }],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"constructor\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      { indexed: true, internalType: \"address\", name: \"src\", type: \"address\" },\r\n      { indexed: true, internalType: \"address\", name: \"guy\", type: \"address\" },\r\n      { indexed: false, internalType: \"uint256\", name: \"wad\", type: \"uint256\" },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: true,\r\n    inputs: [\r\n      { indexed: true, internalType: \"bytes4\", name: \"sig\", type: \"bytes4\" },\r\n      { indexed: true, internalType: \"address\", name: \"usr\", type: \"address\" },\r\n      { indexed: true, internalType: \"bytes32\", name: \"arg1\", type: \"bytes32\" },\r\n      { indexed: true, internalType: \"bytes32\", name: \"arg2\", type: \"bytes32\" },\r\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"LogNote\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      { indexed: true, internalType: \"address\", name: \"src\", type: \"address\" },\r\n      { indexed: true, internalType: \"address\", name: \"dst\", type: \"address\" },\r\n      { indexed: false, internalType: \"uint256\", name: \"wad\", type: \"uint256\" },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"DOMAIN_SEPARATOR\",\r\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"PERMIT_TYPEHASH\",\r\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      { internalType: \"address\", name: \"\", type: \"address\" },\r\n      { internalType: \"address\", name: \"\", type: \"address\" },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      { internalType: \"address\", name: \"usr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"wad\", type: \"uint256\" },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    name: \"balanceOf\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      { internalType: \"address\", name: \"usr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"wad\", type: \"uint256\" },\r\n    ],\r\n    name: \"burn\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [{ internalType: \"uint8\", name: \"\", type: \"uint8\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [{ internalType: \"address\", name: \"guy\", type: \"address\" }],\r\n    name: \"deny\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      { internalType: \"address\", name: \"usr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"wad\", type: \"uint256\" },\r\n    ],\r\n    name: \"mint\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      { internalType: \"address\", name: \"src\", type: \"address\" },\r\n      { internalType: \"address\", name: \"dst\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"wad\", type: \"uint256\" },\r\n    ],\r\n    name: \"move\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    name: \"nonces\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      { internalType: \"address\", name: \"holder\", type: \"address\" },\r\n      { internalType: \"address\", name: \"spender\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"expiry\", type: \"uint256\" },\r\n      { internalType: \"bool\", name: \"allowed\", type: \"bool\" },\r\n      { internalType: \"uint8\", name: \"v\", type: \"uint8\" },\r\n      { internalType: \"bytes32\", name: \"r\", type: \"bytes32\" },\r\n      { internalType: \"bytes32\", name: \"s\", type: \"bytes32\" },\r\n    ],\r\n    name: \"permit\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      { internalType: \"address\", name: \"usr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"wad\", type: \"uint256\" },\r\n    ],\r\n    name: \"pull\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      { internalType: \"address\", name: \"usr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"wad\", type: \"uint256\" },\r\n    ],\r\n    name: \"push\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [{ internalType: \"address\", name: \"guy\", type: \"address\" }],\r\n    name: \"rely\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      { internalType: \"address\", name: \"dst\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"wad\", type: \"uint256\" },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      { internalType: \"address\", name: \"src\", type: \"address\" },\r\n      { internalType: \"address\", name: \"dst\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"wad\", type: \"uint256\" },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"version\",\r\n    outputs: [{ internalType: \"string\", name: \"\", type: \"string\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    name: \"wards\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\nexport const NETWORK = (chainId) => {\r\n  for (let n in NETWORKS) {\r\n    if (NETWORKS[n].chainId === chainId) {\r\n      return NETWORKS[n];\r\n    }\r\n  }\r\n};\r\n\r\nexport const NETWORKS = {\r\n  localhost: {\r\n    name: \"localhost\",\r\n    color: \"#666666\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\r\n  },\r\n  mainnet: {\r\n    name: \"mainnet\",\r\n    color: \"#ff8b9e\",\r\n    chainId: 1,\r\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://etherscan.io/\",\r\n  },\r\n  kovan: {\r\n    name: \"kovan\",\r\n    color: \"#7003DD\",\r\n    chainId: 42,\r\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://kovan.etherscan.io/\",\r\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", //https://faucet.kovan.network/\r\n  },\r\n  rinkeby: {\r\n    name: \"rinkeby\",\r\n    color: \"#e0d068\",\r\n    chainId: 4,\r\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\r\n    faucet: \"https://faucet.rinkeby.io/\",\r\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\r\n  },\r\n  ropsten: {\r\n    name: \"ropsten\",\r\n    color: \"#F60D09\",\r\n    chainId: 3,\r\n    faucet: \"https://faucet.ropsten.be/\",\r\n    blockExplorer: \"https://ropsten.etherscan.io/\",\r\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  goerli: {\r\n    name: \"goerli\",\r\n    color: \"#0975F6\",\r\n    chainId: 5,\r\n    faucet: \"https://goerli-faucet.slock.it/\",\r\n    blockExplorer: \"https://goerli.etherscan.io/\",\r\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  xdai: {\r\n    name: \"xdai\",\r\n    color: \"#48a9a6\",\r\n    chainId: 100,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://dai.poa.network\",\r\n    faucet: \"https://xdai-faucet.top/\",\r\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\r\n  },\r\n  matic: {\r\n    name: \"matic\",\r\n    color: \"#2bbdf7\",\r\n    chainId: 137,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\r\n  },\r\n  mumbai: {\r\n    name: \"mumbai\",\r\n    color: \"#92D9FA\",\r\n    chainId: 80001,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\r\n  },\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { Web3Provider } from \"@ethersproject/providers\";\r\nimport BurnerProvider from \"burner-provider\";\r\nimport { INFURA_ID } from \"../constants\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Gets user provider\r\n\r\n  ~ How can I use? ~\r\n\r\n  const userProvider = useUserProvider(injectedProvider, localProvider);\r\n\r\n  ~ Features ~\r\n\r\n  - Specify the injected provider from Metamask\r\n  - Specify the local provider\r\n  - Usage examples:\r\n    const address = useUserAddress(userProvider);\r\n    const tx = Transactor(userProvider, gasPrice)\r\n*/\r\n\r\nconst useUserProvider = (injectedProvider, localProvider) =>\r\nuseMemo(() => {\r\n  if (injectedProvider) {\r\n    console.log(\"🦊 Using injected provider\");\r\n    return injectedProvider;\r\n  }\r\n  if (!localProvider) return undefined;\r\n\r\n  let burnerConfig = {}\r\n\r\n  if(window.location.pathname){\r\n    if(window.location.pathname.indexOf(\"/pk\")>=0){\r\n      let incomingPK = window.location.hash.replace(\"#\",\"\")\r\n      let rawPK\r\n      if(incomingPK.length===64||incomingPK.length===66){\r\n        console.log(\"🔑 Incoming Private Key...\");\r\n        rawPK=incomingPK\r\n        burnerConfig.privateKey = rawPK\r\n        window.history.pushState({},\"\", \"/\");\r\n        let currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n        if(currentPrivateKey && currentPrivateKey!==rawPK){\r\n          window.localStorage.setItem(\"metaPrivateKey_backup\"+Date.now(),currentPrivateKey);\r\n        }\r\n        window.localStorage.setItem(\"metaPrivateKey\",rawPK);\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log(\"🔥 Using burner provider\",burnerConfig);\r\n  if (localProvider.connection && localProvider.connection.url) {\r\n    burnerConfig.rpcUrl = localProvider.connection.url\r\n    return new Web3Provider(new BurnerProvider(burnerConfig));\r\n  }else{\r\n    // eslint-disable-next-line no-underscore-dangle\r\n    const networkName = localProvider._network && localProvider._network.name;\r\n    burnerConfig.rpcUrl = `https://${networkName || \"mainnet\"}.infura.io/v3/${INFURA_ID}`\r\n    return new Web3Provider(new BurnerProvider(burnerConfig));\r\n  }\r\n}, [injectedProvider, localProvider]);\r\n\r\nexport default useUserProvider;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\n// helper hook to call a function regularly in time intervals\r\n\r\nexport default function usePoller(fn, delay, extraWatch) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest fn.\r\n  useEffect(() => {\r\n    savedCallback.current = fn;\r\n  }, [fn]);\r\n  // Set up the interval.\r\n  // eslint-disable-next-line consistent-return\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n  // run at start too\r\n  useEffect(() => {\r\n    fn();\r\n  },[ extraWatch ]);\r\n}\r\n","import { useEffect, useRef } from \"react\";\r\n\r\n// helper hook to call a function regularly in time intervals\r\nlet DEBUG = false;\r\n\r\nexport default function useOnBlock(provider, fn, args) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest fn.\r\n  useEffect(() => {\r\n    savedCallback.current = fn;\r\n  }, [fn]);\r\n\r\n  // Turn on the listener if we have a function & a provider\r\n  useEffect(() => {\r\n    if (fn && provider) {\r\n      const listener = blockNumber => {\r\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\r\n\r\n        if (args && args.length > 0) {\r\n          savedCallback.current(...args);\r\n        } else {\r\n          savedCallback.current();\r\n        }\r\n      };\r\n\r\n      provider.on(\"block\", listener);\r\n\r\n      return () => {\r\n        provider.off(\"block\", listener);\r\n      };\r\n    } else {\r\n      return () => {}\r\n    }\r\n  }, [provider]);\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport usePoller from \"./Poller\";\r\nimport useOnBlock from \"./OnBlock\";\r\n\r\nconst DEBUG = false;\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Enables you to read values from contracts and keep track of them in the local React states\r\n\r\n  ~ How can I use? ~\r\n\r\n  const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\r\n\r\n  ~ Features ~\r\n\r\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\r\n  - Specify the name of the contract, in this case it is \"YourContract\"\r\n  - Specify the name of the variable in the contract, in this case we keep track of \"purpose\" variable\r\n  - Pass an args array if the function requires\r\n  - Pass pollTime - if no pollTime is specified, the function will update on every new block\r\n*/\r\n\r\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\r\n  let adjustPollTime = 0;\r\n  if (pollTime) {\r\n    adjustPollTime = pollTime;\r\n  } else if (!pollTime && typeof args === \"number\") {\r\n    // it's okay to pass poll time as last argument without args for the call\r\n    adjustPollTime = args;\r\n  }\r\n\r\n  const [value, setValue] = useState();\r\n  useEffect(() => {\r\n    if (typeof onChange === \"function\") {\r\n      setTimeout(onChange.bind(this, value), 1);\r\n    }\r\n  }, [value, onChange]);\r\n\r\n  const updateValue = async () => {\r\n    try {\r\n      let newValue;\r\n      if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\r\n      if (args && args.length > 0) {\r\n        newValue = await contracts[contractName][functionName](...args);\r\n        if (DEBUG)\r\n          console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\r\n      } else {\r\n        newValue = await contracts[contractName][functionName]();\r\n      }\r\n      if (formatter && typeof formatter === \"function\") {\r\n        newValue = formatter(newValue);\r\n      }\r\n      // console.log(\"GOT VALUE\",newValue)\r\n      if (newValue !== value) {\r\n        setValue(newValue);\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  // Only pass a provider to watch on a block if we have a contract and no PollTime\r\n  useOnBlock(contracts && contracts[contractName] && adjustPollTime === 0 && contracts[contractName].provider, () => {\r\n    if (contracts && contracts[contractName] && adjustPollTime === 0) {\r\n      updateValue();\r\n    }\r\n  });\r\n\r\n  // Use a poller if a pollTime is provided\r\n  usePoller(\r\n    async () => {\r\n      if (contracts && contracts[contractName] && adjustPollTime > 0) {\r\n        if (DEBUG) console.log(\"polling!\", contractName, functionName);\r\n        updateValue();\r\n      }\r\n    },\r\n    adjustPollTime,\r\n    contracts && contracts[contractName],\r\n  );\r\n\r\n  return value;\r\n}\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport usePoller from \"./Poller\";\r\nimport useOnBlock from \"./OnBlock\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Gets your balance in ETH from given address and provider\r\n\r\n  ~ How can I use? ~\r\n\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address and get balance corresponding to given address\r\n  - Change provider to access balance on different chains (ex. mainnetProvider)\r\n  - If no pollTime is passed, the balance will update on every new block\r\n*/\r\n\r\nlet DEBUG = false\r\n\r\nexport default function useBalance(contract, address, provider,pollTime = 0) {\r\n\r\nconst [balance, setBalance] = useState();\r\n\r\nconst pollBalance = useCallback(async (contract, address) => {\r\n  if (contract.SimpleToken && address) {\r\n    const newBalance = parseInt(await contract.SimpleToken.balanceOf(address));\r\n    if (newBalance !== balance) {\r\n      setBalance(newBalance);\r\n    }\r\n  }\r\n}, [contract, address]);\r\n\r\n// Only pass a provider to watch on a block if there is no pollTime\r\nuseOnBlock((pollTime === 0)&& provider, () => {\r\n  if (contract && address && pollTime === 0) {\r\n    pollBalance(contract, address);\r\n}\r\n})\r\n\r\n// Use a poller if a pollTime is provided\r\nusePoller(async () => {\r\n  if (contract && address && pollTime > 0) {\r\n    if (DEBUG) console.log('polling!', address)\r\n    pollBalance()\r\n  }\r\n}, pollTime, contract && address)\r\n\r\nreturn balance;\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { getAddress, isAddress } from \"@ethersproject/address\";\r\nimport { useLocalStorage } from \".\"\r\n\r\n// resolved if(name){} to not save \"\" into cache\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Gets ENS name from given address and provider\r\n\r\n  ~ How can I use? ~\r\n\r\n  const ensName = useLookupAddress(mainnetProvider, address);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address and get ENS name corresponding to given address\r\n*/\r\n\r\nconst lookupAddress = async (provider, address) => {\r\n  if(isAddress(address)) {\r\n    //console.log(`looking up ${address}`)\r\n    try {\r\n      // Accuracy of reverse resolution is not enforced.\r\n      // We then manually ensure that the reported ens name resolves to address\r\n      const reportedName = await provider.lookupAddress(address);\r\n\r\n      const resolvedAddress = await provider.resolveName(reportedName);\r\n\r\n      if (getAddress(address) === getAddress(resolvedAddress)) {\r\n        return reportedName;\r\n      } else {\r\n        return getAddress(address)\r\n      }\r\n    } catch (e) {\r\n      return getAddress(address)\r\n    }\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst useLookupAddress = (provider, address) => {\r\n  const [ensName, setEnsName] = useState(address);\r\n  //const [ensCache, setEnsCache] = useLocalStorage('ensCache_'+address); Writing directly due to sync issues\r\n\r\n  useEffect(() => {\r\n\r\n    let cache = window.localStorage.getItem('ensCache_'+address);\r\n    cache = cache && JSON.parse(cache)\r\n\r\n    if( cache && cache.timestamp>Date.now()){\r\n      setEnsName(cache.name)\r\n    }else{\r\n      if (provider) {\r\n        lookupAddress(provider, address).then((name) => {\r\n          if (name) {\r\n            setEnsName(name);\r\n            window.localStorage.setItem('ensCache_'+address, JSON.stringify({\r\n              timestamp:Date.now()+360000,\r\n              name:name\r\n            }))\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }, [provider, address, setEnsName]);\r\n\r\n  return ensName;\r\n};\r\n\r\nexport default useLookupAddress;\r\n","import React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Typography, Skeleton } from \"antd\";\r\nimport { useLookupAddress } from \"../hooks\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\n// changed value={address} to address={address}\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an address with a blockie image and option to copy address\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Address\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    blockExplorer={blockExplorer}\r\n    fontSize={fontSize}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n  - Provide fontSize={fontSize} to change the size of address text\r\n*/\r\n\r\nconst { Text } = Typography;\r\n\r\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\r\n\r\nexport default function Address(props) {\r\n\r\n  const address = props.value || props.address;\r\n\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  if (!address) {\r\n    return (\r\n      <span>\r\n        <Skeleton avatar paragraph={{ rows: 1 }} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let displayAddress = address.substr(0, 6);\r\n\r\n  if (ens && ens.indexOf(\"0x\")<0) {\r\n    displayAddress = ens;\r\n  } else if (props.size === \"short\") {\r\n    displayAddress += \"...\" + address.substr(-4);\r\n  } else if (props.size === \"long\") {\r\n    displayAddress = address;\r\n  }\r\n\r\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\r\n  if (props.minimized) {\r\n    return (\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <a style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }} target={\"_blank\"} href={etherscanLink} rel=\"noopener noreferrer\">\r\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\r\n        </a>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let text;\r\n  if (props.onChange) {\r\n    text = (\r\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\r\n        <a style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }} target={\"_blank\"} href={etherscanLink} rel=\"noopener noreferrer\">\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  } else {\r\n    text = (\r\n      <Text copyable={{ text: address }}>\r\n        <a style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }} target={\"_blank\"} href={etherscanLink} rel=\"noopener noreferrer\">\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize?props.fontSize/7:4} />\r\n      </span>\r\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize?props.fontSize:28 }}>{text}</span>\r\n    </span>\r\n  );\r\n}\r\n","import { hexlify } from \"@ethersproject/bytes\";\r\nimport { parseUnits } from \"@ethersproject/units\";\r\nimport { notification } from \"antd\";\r\nimport { BLOCKNATIVE_DAPPID, } from \"../constants\";\r\n\r\nimport Notify from \"bnc-notify\";\r\n\r\n// this should probably just be renamed to \"notifier\"\r\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\r\n// https://docs.blocknative.com/notify\r\n\r\nexport default function Transactor(provider, gasPrice, etherscan) {\r\n  if (typeof provider !== \"undefined\") {\r\n    // eslint-disable-next-line consistent-return\r\n    return async tx => {\r\n      const signer = provider.getSigner();\r\n      const network = await provider.getNetwork();\r\n      console.log(\"network\", network);\r\n      const options = {\r\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\r\n        system: \"ethereum\",\r\n        networkId: network.chainId,\r\n        // darkMode: Boolean, // (default: false)\r\n        transactionHandler: txInformation => {\r\n          console.log(\"HANDLE TX\", txInformation);\r\n        },\r\n      };\r\n      const notify = Notify(options);\r\n\r\n      let etherscanNetwork = \"\";\r\n      if (network.name && network.chainId > 1) {\r\n        etherscanNetwork = network.name + \".\";\r\n      }\r\n\r\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\r\n      if (network.chainId === 100) {\r\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\r\n      }\r\n\r\n      try {\r\n        let result;\r\n        if (tx instanceof Promise) {\r\n          console.log(\"AWAITING TX\", tx);\r\n          result = await tx;\r\n        } else {\r\n          if (!tx.gasPrice) {\r\n            tx.gasPrice = gasPrice || parseUnits(\"4.1\", \"gwei\");\r\n          }\r\n          if (!tx.gasLimit) {\r\n            tx.gasLimit = hexlify(120000);\r\n          }\r\n          console.log(\"RUNNING TX\", tx);\r\n          result = await signer.sendTransaction(tx);\r\n        }\r\n        console.log(\"RESULT:\", result);\r\n        // console.log(\"Notify\", notify);\r\n\r\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\r\n        if ([1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\r\n          const { emitter } = notify.hash(result.hash);\r\n          emitter.on(\"all\", transaction => {\r\n            return {\r\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\r\n            };\r\n          });\r\n        } else {\r\n          notification.info({\r\n            message: \"Local Transaction Sent\",\r\n            description: result.hash,\r\n            placement: \"bottomRight\",\r\n          });\r\n        }\r\n\r\n        return result;\r\n      } catch (e) {\r\n        console.log(e);\r\n        console.log(\"Transaction Error:\", e.message);\r\n        notification.error({\r\n          message: \"Transaction Error\",\r\n          description: e.message,\r\n        });\r\n      }\r\n    };\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { formatEther } from \"@ethersproject/units\";\r\nimport { useBalance } from \"../hooks\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a balance of given address in ether & dollar\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Balance\r\n    address={address}\r\n    provider={mainnetProvider}\r\n    price={price}\r\n  />\r\n\r\n  ~ If you already have the balance as a bignumber ~\r\n  <Balance\r\n    balance={balance}\r\n    price={price}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to given address\r\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n*/\r\n\r\nexport default function Balance(props) {\r\n  const [dollarMode, setDollarMode] = useState(true);\r\n\r\n  const balance = useBalance(props.provider, props.address);\r\n\r\n  let floatBalance = parseFloat(\"0.00\");\r\n\r\n  let usingBalance = balance;\r\n\r\n  if (typeof props.balance !== \"undefined\") {\r\n    usingBalance = props.balance;\r\n  }\r\n  if (typeof props.value !== \"undefined\") {\r\n    usingBalance = props.value;\r\n  }\r\n\r\n  if (usingBalance) {\r\n    const etherBalance = formatEther(usingBalance);\r\n    parseFloat(etherBalance).toFixed(2);\r\n    floatBalance = parseFloat(etherBalance);\r\n  }\r\n\r\n  let displayBalance = floatBalance.toFixed(4);\r\n\r\n  const price = props.price || props.dollarMultiplier;\r\n\r\n  if (price && dollarMode) {\r\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <span\r\n      style={{\r\n        verticalAlign: \"middle\",\r\n        fontSize: props.size ? props.size : 24,\r\n        padding: 8,\r\n        cursor: \"pointer\",\r\n      }}\r\n      onClick={() => {\r\n        setDollarMode(!dollarMode);\r\n      }}\r\n    >\r\n      {displayBalance}\r\n    </span>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\n// provides a blockie image for the address using \"react-blockies\" library\r\n\r\nexport default function Blockie(props) {\r\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\r\n    return <span />;\r\n  }\r\n  // eslint-disable-next-line react/jsx-props-no-spreading\r\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\r\n}\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { QrReader } from \"react-qr-reader\";\r\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\r\nimport { Input, Badge } from \"antd\";\r\nimport { useLookupAddress } from \"eth-hooks\";\r\nimport Blockie from \"./Blockie\";\r\n\r\n// probably we need to change value={toAddress} to address={toAddress}\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an address input with QR scan option\r\n\r\n  ~ How can I use? ~\r\n\r\n  <AddressInput\r\n    autoFocus\r\n    ensProvider={mainnetProvider}\r\n    placeholder=\"Enter address\"\r\n    value={toAddress}\r\n    onChange={setToAddress}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide placeholder=\"Enter address\" value for the input\r\n  - Value of the address input is stored in value={toAddress}\r\n  - Control input change by onChange={setToAddress} \r\n                          or onChange={address => { setToAddress(address);}}\r\n*/\r\n\r\nexport default function AddressInput(props) {\r\n  const [value, setValue] = useState(props.value);\r\n  const [scan, setScan] = useState(false);\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n  const ens = useLookupAddress(props.ensProvider, currentValue);\r\n\r\n  const scannerButton = (\r\n    <div\r\n      style={{ marginTop: 4, cursor: \"pointer\" }}\r\n      onClick={() => {\r\n        setScan(!scan);\r\n      }}\r\n    >\r\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\r\n        <QrcodeOutlined style={{ fontSize: 18 }} />\r\n      </Badge>{\" \"}\r\n      Scan\r\n    </div>\r\n  );\r\n\r\n  const {ensProvider, onChange} = props;\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\r\n          try {\r\n            const possibleAddress = await ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setValue(address);\r\n        if (typeof onChange === \"function\") {\r\n          onChange(address);\r\n        }\r\n      }\r\n    },\r\n    [ensProvider, onChange],\r\n  );\r\n\r\n  const scanner = scan ? (\r\n    <div\r\n      style={{\r\n        zIndex: 256,\r\n        position: \"absolute\",\r\n        left: 0,\r\n        top: 0,\r\n        width: \"100%\",\r\n      }}\r\n      onClick={() => {\r\n        setScan(false);\r\n      }}\r\n    >\r\n      <QrReader\r\n        delay={250}\r\n        resolution={1200}\r\n        onError={e => {\r\n          console.log(\"SCAN ERROR\", e);\r\n          setScan(false);\r\n        }}\r\n        onScan={newValue => {\r\n          if (newValue) {\r\n            console.log(\"SCAN VALUE\", newValue);\r\n            let possibleNewValue = newValue;\r\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\r\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\r\n              console.log(\"CLEANED VALUE\", possibleNewValue);\r\n            }\r\n            setScan(false);\r\n            updateAddress(possibleNewValue);\r\n          }\r\n        }}\r\n        style={{ width: \"100%\" }}\r\n      />\r\n    </div>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {scanner}\r\n      <Input\r\n        id={\"0xAddress\"}//name it something other than address for auto fill doxxing\r\n        name={\"0xAddress\"}//name it something other than address for auto fill doxxing\r\n        autoComplete=\"off\"\r\n        autoFocus={props.autoFocus}\r\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\r\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\r\n        value={ens || currentValue}\r\n        addonAfter={scannerButton}\r\n        onChange={e => {\r\n          updateAddress(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Input } from \"antd\";\r\n\r\n// small change in useEffect, display currentValue if it's provided by user\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n*/\r\n\r\nexport default function EtherInput(props) {\r\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState();\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    if (!props.price) return \"\";\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"USD\") {\r\n            setMode(\"ETH\");\r\n            setDisplay(currentValue);\r\n          } else {\r\n            setMode(\"USD\");\r\n            if (currentValue) {\r\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\r\n              setDisplay(usdValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let prefix;\r\n  let addonAfter;\r\n  if (mode === \"USD\") {\r\n    prefix = \"$\";\r\n    addonAfter = option(\"USD 🔀\");\r\n  } else {\r\n    prefix = \"Ξ\";\r\n    addonAfter = option(\"ETH 🔀\");\r\n  }\r\n\r\n  useEffect(\r\n    ()=>{\r\n      if(!currentValue){\r\n        setDisplay(\"\");\r\n      }\r\n    }\r\n  ,[ currentValue ])\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      prefix={prefix}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"USD\") {\r\n          const possibleNewValue = parseFloat(newValue)\r\n          if(possibleNewValue){\r\n            const ethValue = possibleNewValue / props.price;\r\n            setValue(ethValue);\r\n            if (typeof props.onChange === \"function\") {\r\n              props.onChange(ethValue);\r\n            }\r\n            setDisplay(newValue);\r\n          }else{\r\n            setDisplay(newValue);\r\n          }\r\n        } else {\r\n          setValue(newValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { WalletOutlined, QrcodeOutlined, SendOutlined, KeyOutlined } from \"@ant-design/icons\";\r\nimport { Tooltip, Spin, Modal, Button, Typography } from \"antd\";\r\nimport QR from \"qrcode.react\";\r\nimport { parseEther } from \"@ethersproject/units\";\r\nimport { useUserAddress } from \"eth-hooks\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Address from \"./Address\";\r\nimport Balance from \"./Balance\";\r\nimport AddressInput from \"./AddressInput\";\r\nimport EtherInput from \"./EtherInput\";\r\nimport { ethers } from \"ethers\";\r\nconst { Text, Paragraph } = Typography;\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a wallet where you can specify address and send USD/ETH, with options to\r\n  scan address, to convert between USD and ETH, to see and generate private keys,\r\n  to send, receive and extract the burner wallet\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Wallet\r\n    provider={userProvider}\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    price={price}\r\n    color='red'\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide provider={userProvider} to display a wallet\r\n  - Provide address={address} if you want to specify address, otherwise\r\n                                                    your default address will be used\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide color to specify the color of wallet icon\r\n*/\r\n\r\nexport default function Wallet(props) {\r\n  const signerAddress = useUserAddress(props.provider);\r\n  const selectedAddress = props.address || signerAddress;\r\n\r\n  const [open, setOpen] = useState();\r\n  const [qr, setQr] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [toAddress, setToAddress] = useState();\r\n  const [pk, setPK] = useState()\r\n\r\n  const providerSend = props.provider ? (\r\n    <Tooltip title=\"Wallet\">\r\n      <WalletOutlined\r\n        onClick={() => {\r\n          setOpen(!open);\r\n        }}\r\n        rotate={-90}\r\n        style={{\r\n          padding: 7,\r\n          color: props.color ? props.color : \"\",\r\n          cursor: \"pointer\",\r\n          fontSize: 28,\r\n          verticalAlign: \"middle\",\r\n        }}\r\n      />\r\n    </Tooltip>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  let display;\r\n  let receiveButton;\r\n  let privateKeyButton\r\n  if (qr) {\r\n    display = (\r\n      <div>\r\n        <div>\r\n          <Text copyable>{selectedAddress}</Text>\r\n        </div>\r\n        <QR\r\n          value={selectedAddress}\r\n          size=\"450\"\r\n          level=\"H\"\r\n          includeMargin\r\n          renderAs=\"svg\"\r\n          imageSettings={{ excavate: false }}\r\n        />\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Hide\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n     <Button key=\"hide\" onClick={()=>{setPK(selectedAddress);setQr(\"\")}}>\r\n       <KeyOutlined /> Private Key\r\n     </Button>\r\n   )\r\n }else if(pk){\r\n\r\n   let pk = localStorage.getItem(\"metaPrivateKey\")\r\n   let wallet = new ethers.Wallet(pk)\r\n\r\n   if(wallet.address!==selectedAddress){\r\n     display = (\r\n       <div>\r\n         <b>*injected account*, private key unknown</b>\r\n       </div>\r\n     )\r\n   }else{\r\n\r\n     let extraPkDisplayAdded = {}\r\n     let extraPkDisplay = []\r\n     extraPkDisplayAdded[wallet.address] = true\r\n     extraPkDisplay.push(\r\n       <div style={{fontSize:16,padding:2,backgroundStyle:\"#89e789\"}}>\r\n          <a href={\"/pk#\"+pk}>\r\n            <Address minimized={true} address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0,6)}\r\n          </a>\r\n       </div>\r\n     )\r\n     for (var key in localStorage){\r\n       if(key.indexOf(\"metaPrivateKey_backup\")>=0){\r\n         console.log(key)\r\n         let pastpk = localStorage.getItem(key)\r\n         let pastwallet = new ethers.Wallet(pastpk)\r\n         if(!extraPkDisplayAdded[pastwallet.address] /*&& selectedAddress!=pastwallet.address*/){\r\n           extraPkDisplayAdded[pastwallet.address] = true\r\n           extraPkDisplay.push(\r\n             <div style={{fontSize:16}}>\r\n                <a href={\"/pk#\"+pastpk}>\r\n                  <Address minimized={true} address={pastwallet.address} ensProvider={props.ensProvider} /> {pastwallet.address.substr(0,6)}\r\n                </a>\r\n             </div>\r\n           )\r\n         }\r\n       }\r\n     }\r\n\r\n\r\n     display = (\r\n       <div>\r\n         <b>Private Key:</b>\r\n\r\n         <div>\r\n          <Text copyable>{pk}</Text>\r\n          </div>\r\n\r\n          <hr/>\r\n\r\n         <i>Point your camera phone at qr code to open in\r\n           <a target=\"_blank\" href={\"https://xdai.io/\"+pk} rel=\"noopener noreferrer\">burner wallet</a>:\r\n         </i>\r\n         <QR value={\"https://xdai.io/\"+pk} size={\"450\"} level={\"H\"} includeMargin={true} renderAs={\"svg\"} imageSettings={{excavate:false}}/>\r\n\r\n         <Paragraph style={{fontSize:\"16\"}} copyable>{\"https://xdai.io/\"+pk}</Paragraph>\r\n\r\n         {extraPkDisplay?(\r\n           <div>\r\n             <h3>\r\n              Known Private Keys:\r\n             </h3>\r\n             {extraPkDisplay}\r\n             <Button onClick={()=>{\r\n               let currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n               if(currentPrivateKey){\r\n                 window.localStorage.setItem(\"metaPrivateKey_backup\"+Date.now(),currentPrivateKey);\r\n               }\r\n               const randomWallet = ethers.Wallet.createRandom()\r\n               const privateKey = randomWallet._signingKey().privateKey\r\n               window.localStorage.setItem(\"metaPrivateKey\",privateKey);\r\n               window.location.reload()\r\n             }}>\r\n              Generate\r\n             </Button>\r\n           </div>\r\n         ):\"\"}\r\n\r\n       </div>\r\n     )\r\n   }\r\n\r\n   receiveButton = (\r\n     <Button key=\"receive\" onClick={()=>{setQr(selectedAddress);setPK(\"\")}}>\r\n       <QrcodeOutlined /> Receive\r\n     </Button>\r\n   )\r\n   privateKeyButton = (\r\n     <Button key=\"hide\" onClick={()=>{setPK(\"\");setQr(\"\")}}>\r\n       <KeyOutlined /> Hide\r\n     </Button>\r\n   )\r\n  } else {\r\n    const inputStyle = {\r\n      padding: 10,\r\n    };\r\n\r\n    display = (\r\n      <div>\r\n        <div style={inputStyle}>\r\n          <AddressInput\r\n            autoFocus\r\n            ensProvider={props.ensProvider}\r\n            placeholder=\"to address\"\r\n            address={toAddress}\r\n            onChange={setToAddress}\r\n          />\r\n        </div>\r\n        <div style={inputStyle}>\r\n          <EtherInput\r\n            price={props.price}\r\n            value={amount}\r\n            onChange={value => {\r\n              setAmount(value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button key=\"hide\" onClick={()=>{setPK(selectedAddress);setQr(\"\")}}>\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {providerSend}\r\n      <Modal\r\n        visible={open}\r\n        title={\r\n          <div>\r\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\r\n            <div style={{ float: \"right\", paddingRight: 25 }}>\r\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        onOk={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        onCancel={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        footer={[\r\n          privateKeyButton, receiveButton,\r\n          <Button\r\n            key=\"submit\"\r\n            type=\"primary\"\r\n            disabled={!amount || !toAddress || qr}\r\n            loading={false}\r\n            onClick={() => {\r\n              const tx = Transactor(props.provider);\r\n\r\n              let value;\r\n              try {\r\n                value = parseEther(\"\" + amount);\r\n              } catch (e) {\r\n                // failed to parseEther, try something else\r\n                value = parseEther(\"\" + parseFloat(amount).toFixed(8));\r\n              }\r\n\r\n              tx({\r\n                to: toAddress,\r\n                value,\r\n              });\r\n              setOpen(!open);\r\n              setQr();\r\n            }}\r\n          >\r\n            <SendOutlined /> Send\r\n          </Button>,\r\n        ]}\r\n      >\r\n        {display}\r\n      </Modal>\r\n    </span>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button } from \"antd\";\r\nimport Address from \"./Address\";\r\nimport Wallet from \"./Wallet\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an Address, Balance, and Wallet as one Account component,\r\n  also allows users to log in to existing accounts and log out\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Account\r\n    address={address}\r\n    localProvider={localProvider}\r\n    userProvider={userProvider}\r\n    mainnetProvider={mainnetProvider}\r\n    price={price}\r\n    web3Modal={web3Modal}\r\n    loadWeb3Modal={loadWeb3Modal}\r\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n    blockExplorer={blockExplorer}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to the given address\r\n  - Provide localProvider={localProvider} to access balance on local network\r\n  - Provide userProvider={userProvider} to display a wallet\r\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n              to be able to log in/log out to/from existing accounts\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n*/\r\n\r\nexport default function Account({\r\n  address,\r\n  userProvider,\r\n  localProvider,\r\n  mainnetProvider,\r\n  price,\r\n  minimized,\r\n  web3Modal,\r\n  loadWeb3Modal,\r\n  logoutOfWeb3Modal,\r\n  blockExplorer,\r\n}) {\r\n  const modalButtons = [];\r\n  if (web3Modal) {\r\n    if (web3Modal.cachedProvider) {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"logoutbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          onClick={logoutOfWeb3Modal}\r\n        >\r\n          logout\r\n        </Button>,\r\n      );\r\n    } else {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"loginbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          /*type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time*/\r\n          onClick={loadWeb3Modal}\r\n        >\r\n          connect\r\n        </Button>,\r\n      );\r\n    }\r\n  }\r\n\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  const display = minimized ? (\r\n    \"\"\r\n  ) : (\r\n    <span>\r\n      {address ? <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} /> : \"Connecting...\"}\r\n      <span\r\n      style={{\r\n        verticalAlign: \"middle\",\r\n        fontSize: 24,\r\n        padding: 8,\r\n        cursor: \"pointer\",\r\n      }}\r\n    >\r\n      {price}\r\n    </span>\r\n      <Wallet address={address} provider={userProvider} ensProvider={mainnetProvider} price={price} color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"} />\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {display}\r\n      {modalButtons}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { formatUnits } from \"@ethersproject/units\";\r\nimport { Address } from \"../../components\";\r\n\r\nconst tryToDisplay = thing => {\r\n  if (thing && thing.toNumber) {\r\n    try {\r\n      return thing.toNumber();\r\n    } catch (e) {\r\n      return \"Ξ\" + formatUnits(thing, \"ether\");\r\n    }\r\n  }\r\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\r\n    return <Address address={thing} fontSize={22} />;\r\n  }\r\n  return JSON.stringify(thing);\r\n};\r\n\r\nexport default tryToDisplay;\r\n","/* eslint-disable jsx-a11y/accessible-emoji */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Row, Col, Divider } from \"antd\";\r\nimport tryToDisplay from \"./utils\";\r\n\r\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh}) => {\r\n  const [variable, setVariable] = useState(\"\");\r\n\r\n  const refresh = useCallback(async () => {\r\n    try {\r\n      const funcResponse = await contractFunction();\r\n      setVariable(funcResponse);\r\n      triggerRefresh(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [setVariable, contractFunction, triggerRefresh]);\r\n\r\n  useEffect(() => {\r\n    refresh();\r\n  }, [refresh, refreshRequired, contractFunction]);\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={14}>\r\n          <h2>{tryToDisplay(variable)}</h2>\r\n        </Col>\r\n        <Col span={2}>\r\n          <h2>\r\n            <a href=\"#\" onClick={refresh}>\r\n              🔄\r\n            </a>\r\n          </h2>\r\n        </Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayVariable;\r\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/accessible-emoji */\r\nimport React, { useState } from \"react\";\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { hexlify } from \"@ethersproject/bytes\";\r\nimport { Row, Col, Input, Divider, Tooltip, Button } from \"antd\";\r\nimport { Transactor } from \"../../helpers\";\r\nimport tryToDisplay from \"./utils\";\r\nimport Blockies from \"react-blockies\";\r\nconst { utils } = require(\"ethers\");\r\n\r\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\r\n  const [form, setForm] = useState({});\r\n  const [txValue, setTxValue] = useState();\r\n  const [returnValue, setReturnValue] = useState();\r\n\r\n  const tx = Transactor(provider, gasPrice);\r\n\r\n  let inputIndex = 0;\r\n  const inputs = functionInfo.inputs.map(input => {\r\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\r\n\r\n    let buttons = \"\";\r\n    if (input.type === \"bytes32\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title={\"to bytes32\"}>\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.parseBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.formatBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"bytes\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title={\"to hex\"}>\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.toUtf8String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"uint256\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title={\"* 10 ** 18\"}>\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              const formUpdate = { ...form };\r\n              formUpdate[key] = utils.parseEther(form[key]);\r\n              setForm(formUpdate);\r\n            }}\r\n          >\r\n            ✴️\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"address\") {\r\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\r\n      if (possibleAddress && possibleAddress.length === 42) {\r\n        buttons = (\r\n          <Tooltip placement=\"right\" title={\"blockie\"}>\r\n            <Blockies seed={possibleAddress} scale={3} />\r\n          </Tooltip>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ margin: 2 }} key={key}>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\r\n          autoComplete=\"off\"\r\n          value={form[key]}\r\n          name={key}\r\n          onChange={event => {\r\n            const formUpdate = { ...form };\r\n            formUpdate[event.target.name] = event.target.value;\r\n            setForm(formUpdate);\r\n          }}\r\n          suffix={buttons}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const txValueInput = (\r\n    <div style={{ margin: 2 }} key={\"txValueInput\"}>\r\n      <Input\r\n        placeholder=\"transaction value\"\r\n        onChange={e => setTxValue(e.target.value)}\r\n        value={txValue}\r\n        addonAfter={\r\n          <div>\r\n            <Row>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title={\" * 10^18 \"}>\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      let floatValue = parseFloat(txValue);\r\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\r\n                    }}\r\n                  >\r\n                    ✳️\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title={\"number to hex\"}>\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      setTxValue(BigNumber.from(txValue).toHexString());\r\n                    }}\r\n                  >\r\n                    #️⃣\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  if (functionInfo.payable) {\r\n    inputs.push(txValueInput);\r\n  }\r\n\r\n  const buttonIcon =\r\n    functionInfo.type === \"call\" ? (\r\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\r\n    ) : (\r\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\r\n    );\r\n  inputs.push(\r\n    <div style={{ cursor: \"pointer\", margin: 2 }} key={\"goButton\"}>\r\n      <Input\r\n        onChange={e => setReturnValue(e.target.value)}\r\n        defaultValue=\"\"\r\n        bordered={false}\r\n        disabled={true}\r\n        value={returnValue}\r\n        suffix={\r\n          <div\r\n            style={{ width: 50, height: 30, margin: 0 }}\r\n            type=\"default\"\r\n            onClick={async () => {\r\n              let innerIndex = 0;\r\n              const args = functionInfo.inputs.map(input => {\r\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\r\n                let value = form[key];\r\n                if (input.baseType === \"array\") {\r\n                  value = JSON.parse(value);\r\n                } else if (input.type === \"bool\") {\r\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\r\n                    value = 1;\r\n                  } else {\r\n                    value = 0;\r\n                  }\r\n                }\r\n                return value;\r\n              });\r\n\r\n              let result;\r\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\r\n                const returned = await contractFunction(...args);\r\n                result = tryToDisplay(returned);\r\n              } else {\r\n                const overrides = {};\r\n                if (txValue) {\r\n                  overrides.value = txValue; // ethers.utils.parseEther()\r\n                }\r\n                // Uncomment this if you want to skip the gas estimation for each transaction\r\n                // overrides.gasLimit = hexlify(1200000);\r\n\r\n                // console.log(\"Running with extras\",extras)\r\n                const returned = await tx(contractFunction(...args, overrides));\r\n                result = tryToDisplay(returned);\r\n              }\r\n\r\n              console.log(\"SETTING RESULT:\", result);\r\n              setReturnValue(result);\r\n              triggerRefresh(true);\r\n            }}\r\n          >\r\n            {buttonIcon}\r\n          </div>\r\n        }\r\n      />\r\n    </div>,\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={16}>{inputs}</Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useMemo, useState } from \"react\";\r\nimport { Card } from \"antd\";\r\nimport { useContractLoader, useContractExistsAtAddress } from \"../../hooks\";\r\nimport Account from \"../Account\";\r\nimport DisplayVariable from \"./DisplayVariable\";\r\nimport FunctionForm from \"./FunctionForm\";\r\n\r\nconst noContractDisplay = (\r\n  <div>\r\n    Loading...{\" \"}\r\n    <div style={{ padding: 32 }}>\r\n      You need to run{\" \"}\r\n      <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f1f1f1\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\r\n        yarn run chain\r\n      </span>{\" \"}\r\n      and{\" \"}\r\n      <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f1f1f1\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      to see your contract here.\r\n    </div>\r\n    <div style={{ padding: 32 }}>\r\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\r\n        ☢️\r\n      </span>\r\n      Warning: You might need to run\r\n      <span class=\"highlight\" style={{ marginLeft: 4, /*backgroundColor: \"#f1f1f1\",*/ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}>\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      <i>again</i> after the frontend comes up!\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\r\n\r\nexport default function Contract({ customContract, account, gasPrice, signer, provider, name, show, price, blockExplorer }) {\r\n\r\n  const contracts = useContractLoader(provider);\r\n  let contract\r\n  if(!customContract){\r\n    contract = contracts ? contracts[name] : \"\";\r\n  }else{\r\n    contract = customContract\r\n  }\r\n\r\n  const address = contract ? contract.address : \"\";\r\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\r\n\r\n  const displayedContractFunctions = useMemo(\r\n    () =>\r\n      contract\r\n        ? Object.values(contract.interface.functions).filter(\r\n            fn => fn.type === \"function\" && !(show && show.indexOf(fn.name) < 0),\r\n          )\r\n        : [],\r\n    [contract, show],\r\n  );\r\n\r\n  const [refreshRequired, triggerRefresh] = useState(false)\r\n  const contractDisplay = displayedContractFunctions.map(fn => {\r\n    if (isQueryable(fn)) {\r\n      // If there are no inputs, just display return value\r\n      return <DisplayVariable key={fn.name} contractFunction={contract[fn.name]} functionInfo={fn} refreshRequired={refreshRequired} triggerRefresh={triggerRefresh}/>;\r\n    }\r\n    // If there are inputs, display a form to allow users to provide these\r\n    return (\r\n      <FunctionForm\r\n        key={\"FF\" + fn.name}\r\n        contractFunction={(fn.stateMutability === \"view\" || fn.stateMutability === \"pure\")?contract[fn.name]:contract.connect(signer)[fn.name]}\r\n        functionInfo={fn}\r\n        provider={provider}\r\n        gasPrice={gasPrice}\r\n        triggerRefresh={triggerRefresh}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\r\n      <Card\r\n        title={\r\n          <div>\r\n            {name}\r\n            <div style={{ float: \"right\" }}>\r\n              <Account\r\n                address={address}\r\n                localProvider={provider}\r\n                injectedProvider={provider}\r\n                mainnetProvider={provider}\r\n                price={price}\r\n                blockExplorer={blockExplorer}\r\n              />\r\n              {account}\r\n            </div>\r\n          </div>\r\n        }\r\n        size=\"large\"\r\n        style={{ marginTop: 25, width: \"100%\" }}\r\n        loading={contractDisplay && contractDisplay.length <= 0}\r\n      >\r\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Button, Modal, Divider } from \"antd\";\r\nimport { DollarCircleOutlined } from \"@ant-design/icons\";\r\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\r\n\r\n// added display of 0 if price={price} is not provided\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\r\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Ramp \r\n    price={price} \r\n    address={address}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Ramp opens directly in the application, component uses RampInstantSDK\r\n  - Provide price={price} and current ETH price will be displayed\r\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\r\n*/\r\n\r\nexport default function Ramp(props) {\r\n  const [modalUp, setModalUp] = useState(\"down\");\r\n\r\n  const type = \"default\";\r\n\r\n  let allFaucets = [];\r\n  for (let n in props.networks) {\r\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\r\n      allFaucets.push(\r\n        <p key={props.networks[n].chainId}>\r\n          <Button\r\n            style={{ color: props.networks[n].color }}\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(props.networks[n].faucet);\r\n            }}\r\n          >\r\n            {props.networks[n].name}\r\n          </Button>\r\n        </p>,\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"large\"\r\n        shape=\"round\"\r\n        onClick={() => {\r\n          setModalUp(\"up\");\r\n        }}\r\n      >\r\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\r\n        {typeof props.price == \"undefined\" ? 0 : props.price.toFixed(2)}\r\n      </Button>\r\n      <Modal\r\n        title=\"Buy ETH\"\r\n        visible={modalUp === \"up\"}\r\n        onCancel={() => {\r\n          setModalUp(\"down\");\r\n        }}\r\n        footer={[\r\n          <Button\r\n            key=\"back\"\r\n            onClick={() => {\r\n              setModalUp(\"down\");\r\n            }}\r\n          >\r\n            cancel\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <p>\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\">\r\n              <span role=\"img\" aria-label=\"flag-us\">\r\n                🇺🇸\r\n              </span>\r\n            </span>\r\n            Wyre\r\n          </Button>\r\n        </p>\r\n        <p>\r\n          {\" \"}\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              new RampInstantSDK({\r\n                hostAppName: \"scaffold-eth\",\r\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\r\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\r\n                swapAsset: \"ETH\",\r\n                userAddress: props.address,\r\n              })\r\n                .on(\"*\", event => console.log(event))\r\n                .show();\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\">\r\n              <span role=\"img\" aria-label=\"flag-gb\">\r\n                🇬🇧\r\n              </span>\r\n            </span>\r\n            Ramp\r\n          </Button>\r\n        </p>\r\n\r\n        <p>\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\r\n              🏦\r\n            </span>\r\n            Coinbase\r\n          </Button>\r\n        </p>\r\n\r\n        <Divider />\r\n\r\n        <h2>Testnet ETH</h2>\r\n\r\n        {allFaucets}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { Input, Button, Tooltip } from \"antd\";\r\nimport Blockies from \"react-blockies\";\r\nimport { SendOutlined } from \"@ant-design/icons\";\r\nimport { parseEther } from \"@ethersproject/units\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Wallet from \"./Wallet\";\r\nimport { useLookupAddress } from \"eth-hooks\";\r\n\r\n// improved a bit by converting address to ens if it exists\r\n// added option to directly input ens name\r\n// added placeholder option\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a local faucet to send ETH to given address, also wallet is provided\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Faucet\r\n    price={price}\r\n    localProvider={localProvider}\r\n    ensProvider={mainnetProvider}\r\n    placeholder={\"Send local faucet\"}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n*/\r\n\r\nexport default function Faucet(props) {\r\n  const [address, setAddress] = useState();\r\n\r\n  let blockie;\r\n  if (address && typeof address.toLowerCase === \"function\") {\r\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\r\n  } else {\r\n    blockie = <div />;\r\n  }\r\n\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\r\n          try {\r\n            const possibleAddress = await props.ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setAddress(address);\r\n      }\r\n    },\r\n    [props.ensProvider],\r\n  );\r\n\r\n  const tx = Transactor(props.localProvider);\r\n\r\n  return (\r\n    <span>\r\n      <Input\r\n        size=\"large\"\r\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\r\n        prefix={blockie}\r\n        //value={address}\r\n        value={ens || address}\r\n        onChange={e => {\r\n          //setAddress(e.target.value);\r\n          updateAddress(e.target.value);\r\n        }}\r\n        suffix={\r\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\r\n            <Button\r\n              onClick={() => {\r\n                tx({\r\n                  to: address,\r\n                  value: parseEther(\"0.5\"),\r\n                });\r\n                setAddress(\"\");\r\n              }}\r\n              shape=\"circle\"\r\n              icon={<SendOutlined />}\r\n            />\r\n            <Wallet color=\"#888888\" provider={props.localProvider} ensProvider={props.ensProvider} price={props.price} />\r\n          </Tooltip>\r\n        }\r\n      />\r\n    </span>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { PageHeader } from \"antd\";\r\n\r\n// displays a page header\r\n\r\nfunction Header() {\r\n  return (\r\n    <a target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <PageHeader\r\n        title=\"🏗 Auction App\"\r\n        style={{ cursor: \"pointer\" }}\r\n      />\r\n    </a>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Timeline, Typography } from \"antd\";\r\nimport { SendOutlined, DownloadOutlined, EditOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Text } = Typography;\r\n\r\n// displays a timeline for scaffold-eth usage\r\n\r\nexport default function TimelineDisplay(props) {\r\n  return (\r\n    <Timeline mode=\"right\">\r\n      <Timeline.Item dot=\"💾\">\r\n        <Text delete>\r\n          Clone and Install from the{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\r\n            github repo\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⚛️\">\r\n        <Text delete>\r\n          Start your frontend app with: <Text strong>yarn start</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⛓\">\r\n        <Text delete={props.chainIsUp}>\r\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📝\">\r\n        <Text delete={props.hasOwner}>\r\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🤡\">\r\n        <Text delete={props.isNotSmoort}>\r\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\r\n        <Text delete={props.hasEther}>\r\n          Send test ether to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\r\n          (bottom left) faucet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.contractHasEther ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.contractHasEther}>\r\n          Deposit some funds into your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.amOwnerOfContract}>\r\n          Set <b>owner</b> of your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"☢️\">\r\n        <Text>\r\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🔬\">\r\n        <Text>\r\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\r\n          <Text strong>yarn run test</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🚀\">\r\n        <Text>\r\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\r\n            @ me\r\n          </a>\r\n          !\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📖\">\r\n        <Text>\r\n          Read more about{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\r\n            Ethereum\r\n          </a>\r\n          ,{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\r\n            Solidity\r\n          </a>\r\n          , and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\r\n            Buidler\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n    </Timeline>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button } from \"antd\";\r\n\r\n// added display of 0 instead of NaN if gas price is not provided\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays gas gauge \r\n\r\n  ~ How can I use? ~\r\n\r\n  <GasGauge \r\n    gasPrice={gasPrice}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide gasPrice={gasPrice} and get current gas gauge\r\n*/\r\n\r\nexport default function GasGauge(props) {\r\n  \r\n  return (\r\n    <Button\r\n      onClick={() => {\r\n        window.open(\"https://ethgasstation.info/\");\r\n      }}\r\n      size=\"large\"\r\n      shape=\"round\"\r\n    >\r\n      <span style={{ marginRight: 8 }}><span role=\"img\" aria-label=\"fuelpump\">⛽️</span></span>\r\n      {typeof props.gasPrice == \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\r\n    </Button>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Input } from \"antd\";\r\nconst { utils, constants } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field with options to convert between STRING and BYTES32\r\n\r\n  ~ How can I use? ~\r\n\r\n  <BytesStringInput\r\n    autofocus\r\n    value={\"scaffold-eth\"}\r\n    placeholder=\"Enter value...\"\r\n    onChange={value => {\r\n      setValue(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide value={value} to specify initial string\r\n  - Provide placeholder=\"Enter value...\" value for the input\r\n  - Control input change by onChange={value => { setValue(value);}}\r\n\r\n*/\r\n\r\nexport default function BytesStringInput(props) {\r\n  const [mode, setMode] = useState(\"STRING\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState(constants.HashZero);\r\n\r\n  // current value is the value in bytes32\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"STRING\") {\r\n            setMode(\"BYTES32\");\r\n            if (!utils.isHexString(currentValue)) {\r\n                /* in case user enters invalid bytes32 number, \r\n                   it considers it as string and converts to bytes32 */\r\n                const changedValue = utils.formatBytes32String(currentValue);\r\n                setDisplay(changedValue);\r\n            }\r\n            else {\r\n                setDisplay(currentValue);\r\n            }\r\n            \r\n            \r\n          } \r\n          else {\r\n            setMode(\"STRING\");\r\n            if (currentValue && utils.isHexString(currentValue)) {\r\n              setDisplay(utils.parseBytes32String(currentValue));\r\n            } \r\n            else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let addonAfter;\r\n  if (mode === \"STRING\") {\r\n    addonAfter = option(\"STRING 🔀\");\r\n  } else {\r\n    addonAfter = option(\"BYTES32 🔀\");\r\n  }\r\n\r\n  useEffect(\r\n    ()=>{\r\n      if(!currentValue){\r\n        setDisplay(\"\");\r\n      }\r\n    }\r\n  ,[ currentValue ])\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"STRING\") {\r\n          //const ethValue = parseFloat(newValue) / props.price;\r\n          //setValue(ethValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(utils.formatBytes32String(newValue));\r\n          }\r\n          setValue(utils.formatBytes32String(newValue));\r\n          setDisplay(newValue);\r\n\r\n        } else {\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setValue(newValue);\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Space,\r\n  Row,\r\n  InputNumber,\r\n  Card,\r\n  notification,\r\n  Select,\r\n  Descriptions,\r\n  Typography,\r\n  Button,\r\n  Divider,\r\n  Tooltip,\r\n  Drawer,\r\n  Modal,\r\n} from \"antd\";\r\nimport { SettingOutlined, RetweetOutlined } from \"@ant-design/icons\";\r\nimport { ChainId, Token, WETH, Fetcher, Trade, TokenAmount, Percent } from \"@uniswap/sdk\";\r\nimport { parseUnits, formatUnits } from \"@ethersproject/units\";\r\nimport { ethers } from \"ethers\";\r\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\r\nimport abi from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\r\nimport { useDebounce } from \"../hooks\";\r\n\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\r\n\r\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n\r\nconst erc20Abi = [\r\n  \"function balanceOf(address owner) view returns (uint256)\",\r\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\r\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\r\n];\r\n\r\nconst makeCall = async (callName, contract, args, metadata = {}) => {\r\n  if (contract[callName]) {\r\n    let result;\r\n    if (args) {\r\n      result = await contract[callName](...args, metadata);\r\n    } else {\r\n      result = await contract[callName]();\r\n    }\r\n    return result;\r\n  } else {\r\n    console.log(\"no call of that name!\");\r\n  }\r\n};\r\n\r\nlet defaultToken = \"ETH\";\r\nlet defaultTokenOut = \"DAI\";\r\nlet defaultSlippage = \"0.5\";\r\nlet defaultTimeLimit = 60 * 10;\r\n\r\nconst tokenListToObject = array =>\r\n  array.reduce((obj, item) => {\r\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\r\n    return obj;\r\n  }, {});\r\n\r\nfunction Swap({ selectedProvider, tokenListURI }) {\r\n  const [tokenIn, setTokenIn] = useState(defaultToken);\r\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\r\n  const [exact, setExact] = useState();\r\n  const [amountIn, setAmountIn] = useState();\r\n  const [amountInMax, setAmountInMax] = useState();\r\n  const [amountOut, setAmountOut] = useState();\r\n  const [amountOutMin, setAmountOutMin] = useState();\r\n  const [trades, setTrades] = useState();\r\n  const [routerAllowance, setRouterAllowance] = useState();\r\n  const [balanceIn, setBalanceIn] = useState();\r\n  const [balanceOut, setBalanceOut] = useState();\r\n  const [slippageTolerance, setSlippageTolerance] = useState(\r\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\r\n  );\r\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\r\n  const [swapping, setSwapping] = useState(false);\r\n  const [approving, setApproving] = useState(false);\r\n  const [settingsVisible, setSettingsVisible] = useState(false);\r\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\r\n\r\n  const [tokenList, setTokenList] = useState([]);\r\n\r\n  const [tokens, setTokens] = useState();\r\n\r\n  const [invertPrice, setInvertPrice] = useState(false);\r\n\r\n  let blockNumber = useBlockNumber(selectedProvider, 3000);\r\n\r\n  let signer = selectedProvider.getSigner();\r\n  let routerContract = new ethers.Contract(ROUTER_ADDRESS, abi, signer);\r\n\r\n  let _tokenListUri = tokenListURI ? tokenListURI : \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\r\n\r\n  const debouncedAmountIn = useDebounce(amountIn, 500);\r\n  const debouncedAmountOut = useDebounce(amountOut, 500);\r\n\r\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\r\n\r\n  useEffect(() => {\r\n    const getTokenList = async () => {\r\n      // console.log(_tokenListUri);\r\n      try {\r\n        let tokenList = await fetch(_tokenListUri);\r\n        let tokenListJson = await tokenList.json();\r\n        let filteredTokens = tokenListJson.tokens.filter(function (t) {\r\n          return t.chainId === activeChainId;\r\n        });\r\n        let ethToken = WETH[activeChainId];\r\n        ethToken.name = \"Ethereum\";\r\n        ethToken.symbol = \"ETH\";\r\n        ethToken.logoURI =\r\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\r\n        let _tokenList = [ethToken, ...filteredTokens];\r\n        setTokenList(_tokenList);\r\n        let _tokens = tokenListToObject(_tokenList);\r\n        setTokens(_tokens);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    };\r\n    getTokenList();\r\n  }, [_tokenListUri, activeChainId]);\r\n\r\n  const getTrades = async () => {\r\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\r\n      let pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\r\n\r\n      let baseTokens = tokenList\r\n        .filter(function (t) {\r\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\r\n        })\r\n        .map(el => {\r\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\r\n        });\r\n\r\n      let listOfPairwiseTokens = pairs(baseTokens);\r\n\r\n      const getPairs = async list => {\r\n        let listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\r\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\r\n      };\r\n\r\n      let listOfPairs = await getPairs(listOfPairwiseTokens);\r\n\r\n      let bestTrade;\r\n\r\n      if (exact === \"in\") {\r\n        setAmountInMax();\r\n        bestTrade = Trade.bestTradeExactIn(\r\n          listOfPairs.filter(item => item),\r\n          new TokenAmount(tokens[tokenIn], parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\r\n          tokens[tokenOut],\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountOut();\r\n        }\r\n      } else if (exact === \"out\") {\r\n        setAmountOutMin();\r\n        bestTrade = Trade.bestTradeExactOut(\r\n          listOfPairs.filter(item => item),\r\n          tokens[tokenIn],\r\n          new TokenAmount(tokens[tokenOut], parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountIn();\r\n        }\r\n      }\r\n\r\n      setTrades(bestTrade);\r\n\r\n      console.log(bestTrade);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTrades();\r\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (trades && trades[0]) {\r\n      if (exact === \"in\") {\r\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\r\n      } else if (exact === \"out\") {\r\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\r\n      }\r\n    }\r\n  }, [exact, slippageTolerance, amountIn, amountOut, trades]);\r\n\r\n  const getBalance = async (_token, _account, _contract) => {\r\n    let newBalance;\r\n    if (_token === \"ETH\") {\r\n      newBalance = await selectedProvider.getBalance(_account);\r\n    } else {\r\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\r\n    }\r\n    return newBalance;\r\n  };\r\n\r\n  const getAccountInfo = async () => {\r\n    if (tokens) {\r\n      let accountList = await selectedProvider.listAccounts();\r\n\r\n      if (tokenIn) {\r\n        let tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\r\n        let newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\r\n        setBalanceIn(newBalanceIn);\r\n\r\n        let allowance;\r\n\r\n        if (tokenIn === \"ETH\") {\r\n          setRouterAllowance();\r\n        } else {\r\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\r\n          setRouterAllowance(allowance);\r\n        }\r\n      }\r\n\r\n      if (tokenOut) {\r\n        let tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\r\n        let newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\r\n        setBalanceOut(newBalanceOut);\r\n      }\r\n    }\r\n  };\r\n\r\n  usePoller(getAccountInfo, 6000);\r\n\r\n  let route = trades\r\n    ? trades.length > 0\r\n      ? trades[0].route.path.map(function (item) {\r\n          return item[\"symbol\"];\r\n        })\r\n      : []\r\n    : [];\r\n\r\n  const updateRouterAllowance = async newAllowance => {\r\n    setApproving(true);\r\n    try {\r\n      let tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\r\n      let result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\r\n      console.log(result);\r\n      setApproving(false);\r\n      return true;\r\n    } catch (e) {\r\n      notification.open({\r\n        message: \"Approval unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const approveRouter = async () => {\r\n    let approvalAmount =\r\n      exact === \"in\"\r\n        ? ethers.utils.hexlify(parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\r\n        : amountInMax.raw.toString();\r\n    console.log(approvalAmount);\r\n    let approval = updateRouterAllowance(approvalAmount);\r\n    if (approval) {\r\n      notification.open({\r\n        message: \"Token transfer approved\",\r\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeRouterAllowance = async () => {\r\n    let approvalAmount = ethers.utils.hexlify(0);\r\n    console.log(approvalAmount);\r\n    let removal = updateRouterAllowance(approvalAmount);\r\n    if (removal) {\r\n      notification.open({\r\n        message: \"Token approval removed\",\r\n        description: `The router is no longer approved for ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const executeSwap = async () => {\r\n    setSwapping(true);\r\n    try {\r\n      let args;\r\n      let metadata = {};\r\n\r\n      let call;\r\n      let deadline = Math.floor(Date.now() / 1000) + timeLimit;\r\n      let path = trades[0].route.path.map(function (item) {\r\n        return item[\"address\"];\r\n      });\r\n      console.log(path);\r\n      let accountList = await selectedProvider.listAccounts();\r\n      let address = accountList[0];\r\n\r\n      if (exact === \"in\") {\r\n        let _amountIn = ethers.utils.hexlify(parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\r\n        let _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapExactETHForTokens\";\r\n          args = [_amountOutMin, path, address, deadline];\r\n          metadata[\"value\"] = _amountIn;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\r\n          args = [_amountIn, _amountOutMin, path, address, deadline];\r\n        }\r\n      } else if (exact === \"out\") {\r\n        let _amountOut = ethers.utils.hexlify(parseUnits(amountOut.toString(), tokens[tokenOut].decimals));\r\n        let _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapETHForExactTokens\";\r\n          args = [_amountOut, path, address, deadline];\r\n          metadata[\"value\"] = _amountInMax;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\r\n          args = [_amountOut, _amountInMax, path, address, deadline];\r\n        }\r\n      }\r\n      console.log(call, args, metadata);\r\n      let result = await makeCall(call, routerContract, args, metadata);\r\n      console.log(result);\r\n      notification.open({\r\n        message: \"Swap complete 🦄\",\r\n        description: (\r\n          <>\r\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\r\n            <Text copyable>{result.hash}</Text>\r\n          </>\r\n        ),\r\n      });\r\n      setSwapping(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSwapping(false);\r\n      notification.open({\r\n        message: \"Swap unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const showSwapModal = () => {\r\n    setSwapModalVisible(true);\r\n  };\r\n\r\n  const handleSwapModalOk = () => {\r\n    setSwapModalVisible(false);\r\n    executeSwap();\r\n  };\r\n\r\n  const handleSwapModalCancel = () => {\r\n    setSwapModalVisible(false);\r\n  };\r\n\r\n  let insufficientBalance = balanceIn ? parseFloat(formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn : null;\r\n  let inputIsToken = tokenIn !== \"ETH\";\r\n  let insufficientAllowance = !inputIsToken\r\n    ? false\r\n    : routerAllowance\r\n    ? parseFloat(formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  let formattedBalanceIn = balanceIn\r\n    ? parseFloat(formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\r\n    : null;\r\n  let formattedBalanceOut = balanceOut\r\n    ? parseFloat(formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\r\n    : null;\r\n\r\n  let metaIn =\r\n    tokens && tokenList && tokenIn\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenIn].address;\r\n        })[0]\r\n      : null;\r\n  let metaOut =\r\n    tokens && tokenList && tokenOut\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenOut].address;\r\n        })[0]\r\n      : null;\r\n\r\n  const cleanIpfsURI = uri => {\r\n    try {\r\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\r\n    } catch (e) {\r\n      console.log(e, uri);\r\n      return uri;\r\n    }\r\n  };\r\n\r\n  let logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\r\n  let logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\r\n\r\n  let rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\r\n  let price = rawPrice ? rawPrice.toSignificant(7) : null;\r\n  let priceDescription = rawPrice\r\n    ? invertPrice\r\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\r\n      : `${price} ${tokenOut} per ${tokenIn}`\r\n    : null;\r\n\r\n  let priceWidget = (\r\n    <Space>\r\n      <Text type=\"secondary\">{priceDescription}</Text>\r\n      <Button\r\n        type=\"text\"\r\n        onClick={() => {\r\n          setInvertPrice(!invertPrice);\r\n        }}\r\n      >\r\n        <RetweetOutlined />\r\n      </Button>\r\n    </Space>\r\n  );\r\n\r\n  let swapModal = (\r\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n          {amountIn}\r\n          {tokenIn}\r\n        </Space>\r\n      </Row>\r\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\r\n        <span>↓</span>\r\n      </Row>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\r\n          {amountOut}\r\n          {tokenOut}\r\n        </Space>\r\n      </Row>\r\n      <Divider />\r\n      <Row>{priceWidget}</Row>\r\n      <Row>\r\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\r\n          ? exact === \"in\"\r\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\r\n                6,\r\n              )} ${tokenOut} or the transaction will revert.`\r\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\r\n                6,\r\n              )} ${tokenIn} or the transaction will revert.`\r\n          : null}\r\n      </Row>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      title={\r\n        <Space>\r\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\r\n          <Typography>Uniswapper</Typography>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => {\r\n            setSettingsVisible(true);\r\n          }}\r\n        >\r\n          <SettingOutlined />\r\n        </Button>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\">\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n                <Button\r\n                  type=\"link\"\r\n                  onClick={() => {\r\n                    setAmountOut();\r\n                    setAmountIn(formatUnits(balanceIn, tokens[tokenIn].decimals));\r\n                    setAmountOutMin();\r\n                    setAmountInMax();\r\n                    setExact(\"in\");\r\n                  }}\r\n                >\r\n                  {formattedBalanceIn}\r\n                </Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              min={0}\r\n              size={\"large\"}\r\n              value={amountIn}\r\n              onChange={e => {\r\n                setAmountOut();\r\n                setTrades();\r\n                setAmountIn(e);\r\n                setExact(\"in\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenIn}\r\n              style={{ width: \"120px\" }}\r\n              size={\"large\"}\r\n              bordered={false}\r\n              defaultValue={defaultToken}\r\n              onChange={value => {\r\n                console.log(value);\r\n                if (value === tokenOut) {\r\n                  console.log(\"switch!\", tokenIn);\r\n                  setTokenOut(tokenIn);\r\n                  setAmountOut(amountIn);\r\n                  setBalanceOut(balanceIn);\r\n                }\r\n                setTokenIn(value);\r\n                setTrades();\r\n                setAmountIn();\r\n                setExact(\"out\");\r\n                setBalanceIn();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Tooltip title={route.join(\"->\")}>\r\n            <span>↓</span>\r\n          </Tooltip>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\r\n                <Button type=\"text\">{formattedBalanceOut}</Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              size={\"large\"}\r\n              min={0}\r\n              value={amountOut}\r\n              onChange={e => {\r\n                setAmountOut(e);\r\n                setAmountIn();\r\n                setTrades();\r\n                setExact(\"out\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenOut}\r\n              style={{ width: \"120px\" }}\r\n              size={\"large\"}\r\n              bordered={false}\r\n              onChange={value => {\r\n                console.log(value, tokenIn, tokenOut);\r\n                if (value === tokenIn) {\r\n                  console.log(\"switch!\", tokenOut);\r\n                  setTokenIn(tokenOut);\r\n                  setAmountIn(amountOut);\r\n                  setBalanceIn(balanceOut);\r\n                }\r\n                setTokenOut(value);\r\n                setExact(\"in\");\r\n                setAmountOut();\r\n                setTrades();\r\n                setBalanceOut();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          {priceDescription ? priceWidget : null}\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Space>\r\n            {inputIsToken ? (\r\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\r\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\r\n              </Button>\r\n            ) : null}\r\n            <Button\r\n              size=\"large\"\r\n              loading={swapping}\r\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\r\n              onClick={showSwapModal}\r\n            >\r\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\r\n            </Button>\r\n            {swapModal}\r\n          </Space>\r\n        </Row>\r\n      </Space>\r\n      <Drawer\r\n        visible={settingsVisible}\r\n        onClose={() => {\r\n          setSettingsVisible(false);\r\n        }}\r\n        width={500}\r\n      >\r\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\r\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\r\n          <Descriptions.Item label=\"routerAllowance\">\r\n            <Space>\r\n              {routerAllowance ? formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\r\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\r\n            </Space>\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\r\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\r\n          <Descriptions.Item label=\"bestPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"nextMidPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"priceImpact\">\r\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"slippageTolerance\">\r\n            {\r\n              <InputNumber\r\n                defaultValue={defaultSlippage}\r\n                min={0}\r\n                max={100}\r\n                precision={2}\r\n                formatter={value => `${value}%`}\r\n                parser={value => value.replace(\"%\", \"\")}\r\n                onChange={value => {\r\n                  console.log(value);\r\n\r\n                  let slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\r\n                  setSlippageTolerance(slippagePercent);\r\n                }}\r\n              />\r\n            }\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"timeLimitInSeconds\">\r\n            {\r\n              <InputNumber\r\n                min={0}\r\n                max={3600}\r\n                defaultValue={defaultTimeLimit}\r\n                onChange={value => {\r\n                  console.log(value);\r\n                  setTimeLimit(value);\r\n                }}\r\n              />\r\n            }\r\n          </Descriptions.Item>\r\n        </Descriptions>\r\n      </Drawer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Swap;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Switch } from \"antd\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nexport default function ThemeSwitcher() {\r\n\r\n  const theme = window.localStorage.getItem(\"theme\");\r\n  const [isDarkMode, setIsDarkMode] = useState(!theme || theme === \"light\" ? false : true);\r\n  const { switcher, currentTheme, themes } = useThemeSwitcher();\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"theme\", currentTheme);\r\n  }, [currentTheme]);\r\n\r\n  const toggleTheme = (isChecked) => {\r\n    setIsDarkMode(isChecked);\r\n    switcher({ theme: isChecked ? themes.dark : themes.light });\r\n  };\r\n\r\n  // Avoid theme change flicker\r\n  // if (status === \"loading\") {\r\n  //   return null;\r\n  // }\r\n\r\n  return (\r\n    <div className=\"main fade-in\" style={{position:\"fixed\",right:8,bottom:8}}>\r\n      <span style={{padding:8}}>{currentTheme===\"light\" ? \"☀️\" : \"🌜\"}</span>\r\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function NoWalletDetected() {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row justify-content-md-center\">\r\n        <div className=\"col-6 p-4 text-center\">\r\n          <p>\r\n            No Ethereum wallet was detected. <br />\r\n            Please install{\" \"}\r\n            <a\r\n              href=\"http://metamask.io\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              MetaMask\r\n            </a>\r\n            .\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Loading() {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"fixed\",\r\n        zIndex: 2,\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        background: \"rgba(255, 255, 255, 0.5)\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          zIndex: 3,\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          width: \"100px\",\r\n          height: \"50px\",\r\n          marginLeft: \"-50px\",\r\n          marginTop: \" -25px\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <div className=\"spinner-border\" role=\"status\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default {\"Qme9T6kxqGE13fFLMN7o1gPXnojgktmDPENDphkHf5gMsn\":{\"name\":\"Buffalo\",\"description\":\"It's actually a bison?\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=buffalo\",\"image\":\"https://austingriffith.com/images/paintings/buffalo.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"green\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":42}]},\"QmToMnfPdtTDqjtJ2FjqPuPQtYQh7Ughq2ZCaJ8yj5B9qh\":{\"name\":\"Zebra\",\"description\":\"What is it so worried about?\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=zebra\",\"image\":\"https://austingriffith.com/images/paintings/zebra.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"blue\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":38}]},\"QmTEQGEPggM5CXKnhqSwEyig2C2r4NtbTk6BqBthfDqn11\":{\"name\":\"Rhino\",\"description\":\"What a horn!\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=rhino\",\"image\":\"https://austingriffith.com/images/paintings/rhino.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"pink\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":22}]},\"QmVJbUM3nftSWTvmwmqpNCswHsnqJ7oXwAm9erSHLLMwA9\":{\"name\":\"Fish\",\"description\":\"Is that an underbyte?\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=fish\",\"image\":\"https://austingriffith.com/images/paintings/fish.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"blue\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":15}]},\"QmZwLCzYR9aN4Urq9k7UtcEi7C4o22fhcFEyhGxxpPbe9C\":{\"name\":\"Flamingo\",\"description\":\"So delicate.\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=flamingo\",\"image\":\"https://austingriffith.com/images/paintings/flamingo.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"black\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":6}]},\"QmNssM24YWndkbXdNQbFGnbyoK5DyWrpoRXdAZ1joGv3xT\":{\"name\":\"Godzilla\",\"description\":\"Raaaar!\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=godzilla\",\"image\":\"https://austingriffith.com/images/paintings/godzilla.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"orange\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":99}]},\"QmRt3Se2vWwvhsEXdV8KKwpC5U2FuX5Zd4htBCTd7EpWrN\":{\"name\":\"Antelope\",\"description\":\"Speed goat.\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=antelope\",\"image\":\"https://austingriffith.com/images/paintings/antelope.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"purple\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":86}]},\"QmfBe45wDzgA4G33U5ggz3X5fMPXgVuYSKtLr7BTE7N1E7\":{\"name\":\"Bear\",\"description\":\"Snack time!\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=bear\",\"image\":\"https://austingriffith.com/images/paintings/bear.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"green\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":47}]},\"QmWSBgXskKJuMuUCz9KtvUFvV1jVc97UKSFUX9XJfBoijS\":{\"name\":\"Elephant\",\"description\":\"Junk in the trunk!\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=elephant\",\"image\":\"https://austingriffith.com/images/paintings/elephant.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"orange\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":38}]},\"QmVYpLtUbSnXLtT7eSFjaPnifjPUVr9QaQNNbLYaYtYwrT\":{\"name\":\"Hippo\",\"description\":\"Unsure.\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=hippo\",\"image\":\"https://austingriffith.com/images/paintings/hippo.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"green\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":39}]},\"QmeF1727dJwNKE66Y4baGtyk9dA6SdDXCc2SJCus2EVsAQ\":{\"name\":\"Lobster\",\"description\":\"Rock lobster!\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=lobster\",\"image\":\"https://austingriffith.com/images/paintings/lobster.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"grey\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":12}]},\"QmSQ31Cn4nS2FwEDPMMs2pM682wZLosEkDTyWgjhYRcdgS\":{\"name\":\"Mountain Goat\",\"description\":\"Goatse!\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=mountaingoat\",\"image\":\"https://austingriffith.com/images/paintings/mountaingoat.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"blue\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":70}]},\"QmTpuhVJKJWjaRbwUmhPhPj2i38y12MfgoQZ1yHtFJiq6p\":{\"name\":\"Octopus\",\"description\":\"Dope 'stach.\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=octopus\",\"image\":\"https://austingriffith.com/images/paintings/octopus.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"purple\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":41}]},\"QmUFExYWG6KkkgN7zvGoBWr97d1RRQeQGHG5Nx83mymCWS\":{\"name\":\"Ox\",\"description\":\"The ringer.\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=ox\",\"image\":\"https://austingriffith.com/images/paintings/ox.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"blue\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":59}]},\"QmebbAqgcvM58jBPVdEsTqZjoMn7Njz8cJwPArgjbr9ghf\":{\"name\":\"Penguin\",\"description\":\"It's cold out here.\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=penguin\",\"image\":\"https://austingriffith.com/images/paintings/penguin.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"orange\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":23}]},\"QmUjc4oorKhK3dRKQJQ7Rb3TQriLKA8rFJoURBf5N7NWk2\":{\"name\":\"Walrus\",\"description\":\"Seems nice.\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=walrus\",\"image\":\"https://austingriffith.com/images/paintings/walrus.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"orange\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":23}]},\"QmeMmdSgg5psqCfTxQmEtXkYKMqhTivxMNevFyfBbqY3Fp\":{\"name\":\"Killer Whale\",\"description\":\"Killers.\",\"external_url\":\"https://austingriffith.com/portfolio/paintings/?id=killerwhale\",\"image\":\"https://austingriffith.com/images/paintings/killerwhale.jpg\",\"attributes\":[{\"trait_type\":\"BackgroundColor\",\"value\":\"green\"},{\"trait_type\":\"Eyes\",\"value\":\"googly\"},{\"trait_type\":\"Stamina\",\"value\":87}]}}","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\r\n// import \"antd/dist/antd.css\";\r\nimport { LinkOutlined } from \"@ant-design/icons\";\r\nimport { StaticJsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\r\nimport \"./App.css\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Menu,\r\n  Alert,\r\n  Input,\r\n  List,\r\n  Card,\r\n  Modal,\r\n  InputNumber,\r\n  Radio,\r\n} from \"antd\";\r\nimport Web3Modal from \"web3modal\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport { useUserAddress } from \"eth-hooks\";\r\nimport { format } from \"date-fns\";\r\nimport {\r\n  Header,\r\n  Account,\r\n  Faucet,\r\n  Ramp,\r\n  Contract,\r\n  GasGauge,\r\n  Address,\r\n  ThemeSwitch,\r\n  NoWalletDetected,\r\n  Loading,\r\n} from \"./components\";\r\nimport {\r\n  useExchangePrice,\r\n  useGasPrice,\r\n  useUserProvider,\r\n  useContractLoader,\r\n  useContractReader,\r\n  useEventListener,\r\n  useBalance,\r\n  useExternalContractLoader,\r\n} from \"./hooks\";\r\nimport { Transactor } from \"./helpers\";\r\nimport { parseEther } from \"@ethersproject/units\";\r\nimport { constants } from \"ethers\";\r\nimport {\r\n  INFURA_ID,\r\n  DAI_ADDRESS,\r\n  DAI_ABI,\r\n  NETWORK,\r\n  NETWORKS,\r\n} from \"./constants.js\";\r\nimport { parseUnits } from \"@ethersproject/units\";\r\nimport { hexlify } from \"@ethersproject/bytes\";\r\nimport StackGrid from \"react-stack-grid\";\r\nimport ReactJson from \"react-json-view\";\r\nimport assets from \"./assets.js\";\r\nimport assetsAuctionStat from \"./assetsAuctionStat.js\";\r\n\r\nconst { BufferList } = require(\"bl\");\r\n// https://www.npmjs.com/package/ipfs-http-client\r\n// const ipfsAPI = require(\"ipfs-http-client\");\r\n// const ipfs = ipfsAPI({ host: \"localhost\", port: \"5001\", protocol: \"http\" });\r\n\r\nconsole.log(\"📦 Assets:========== \", assets);\r\n\r\nconst assetsInitAuctionStat = {};\r\nfor (let a in assetsAuctionStat) {\r\n  assetsInitAuctionStat[assetsAuctionStat[a]] = {};\r\n  assetsInitAuctionStat[assetsAuctionStat[a]].forSale = true;\r\n  assetsInitAuctionStat[assetsAuctionStat[a]].forAuction = false;\r\n  assetsInitAuctionStat[assetsAuctionStat[a]].assetAuctionType = \"1\";\r\n}\r\n\r\nconst allUserCollections = {};\r\nconst usersBid = {};\r\n// let networkError;\r\n\r\nconsole.log(\"Hello , I'm  assetsInitAuctionStat\");\r\n/*\r\n    Welcome to 🏗 scaffold-eth !\r\n\r\n    Code:\r\n    https://github.com/austintgriffith/scaffold-eth\r\n\r\n    Support:\r\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\r\n    or DM @austingriffith on twitter or telegram\r\n\r\n    You should get your own Infura.io ID and put it in `constants.js`\r\n    (this is your connection to the main Ethereum network for ENS etc.)\r\n\r\n\r\n    🌏 EXTERNAL CONTRACTS:\r\n    You can also bring in contract artifacts in `constants.js`\r\n    (and then use the `useExternalContractLoader()` hook!)\r\n*/\r\n\r\n/// 📡 What chain are your contracts deployed to?\r\nconst targetNetwork = NETWORKS[\"localhost\"]; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\r\n\r\n// 😬 Sorry for all the console logging\r\nconst DEBUG = true;\r\n\r\n//EXAMPLE STARTING JSON:\r\nconst STARTING_JSON = {\r\n  description: \"It's actually a bison?\",\r\n  external_url: \"https://austingriffith.com/portfolio/paintings/\", // <-- this can link to a page for the specific file too\r\n  image: \"https://austingriffith.com/images/paintings/buffalo.jpg\",\r\n  name: \"Buffalo\",\r\n  attributes: [\r\n    {\r\n      trait_type: \"BackgroundColor\",\r\n      value: \"green\",\r\n    },\r\n    {\r\n      trait_type: \"Eyes\",\r\n      value: \"googly\",\r\n    },\r\n  ],\r\n};\r\n\r\nconst WalletCheck = {\r\n  walletExist: false,\r\n  approvePermission: {},\r\n  connecting: false,\r\n};\r\n\r\n//helper function to \"Get\" from IPFS\r\n// you usually go content.toString() after this...\r\nconst getFromIPFS = async (hashToGet) => {\r\n  // for await (const file of ipfs.get(hashToGet)) {\r\n  //   if (!file.content) continue;\r\n  //   const content = new BufferList();\r\n  //   for await (const chunk of file.content) {\r\n  //     content.append(chunk);\r\n  //   }\r\n  //   console.log(content);\r\n  //   return content;\r\n  // }\r\n};\r\n\r\n// 🛰 providers\r\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\r\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\r\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\r\n//\r\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\r\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\r\nconst scaffoldEthProvider = new StaticJsonRpcProvider(\r\n  \"https://rpc.scaffoldeth.io:48544\"\r\n);\r\nconst mainnetInfura = new StaticJsonRpcProvider(\r\n  \"https://mainnet.infura.io/v3/\" + INFURA_ID\r\n);\r\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_I\r\n\r\n// 🏠 Your local provider is usually pointed at your local blockchain\r\nconst localProviderUrl = targetNetwork.rpcUrl;\r\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\r\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER\r\n  ? process.env.REACT_APP_PROVIDER\r\n  : localProviderUrl;\r\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\r\nconst localProvider = new StaticJsonRpcProvider(localProviderUrl);\r\n\r\n// 🔭 block explorer URL\r\nconst blockExplorer = targetNetwork.blockExplorer;\r\n\r\nfunction App(props) {\r\n  if (window.ethereum) {\r\n    WalletCheck.walletExist = true;\r\n  }\r\n\r\n  let [permissionApproved] = useState(false);\r\n\r\n  const mainnetProvider =\r\n    scaffoldEthProvider && scaffoldEthProvider._network\r\n      ? scaffoldEthProvider\r\n      : mainnetInfura;\r\n\r\n  //const _provider = new ethers.providers.Web3Provider(window.ethereum)\r\n  const [injectedProvider, setInjectedProvider] = useState();\r\n\r\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\r\n  const price = useExchangePrice(targetNetwork, mainnetProvider);\r\n\r\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\r\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\r\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\r\n  const userProvider = useUserProvider(injectedProvider, localProvider);\r\n  const address = useUserAddress(userProvider);\r\n  if (!allUserCollections[address]) {\r\n    allUserCollections[address] = [];\r\n  }\r\n\r\n  if (!usersBid[address]) {\r\n    usersBid[address] = {};\r\n  }\r\n\r\n  if (!WalletCheck.approvePermission[address]) {\r\n    WalletCheck.approvePermission[address] = false;\r\n  } else {\r\n    permissionApproved = WalletCheck.approvePermission[address];\r\n  }\r\n\r\n  // You can warn the user if you would like them to be on a specific network\r\n  let localChainId =\r\n    localProvider && localProvider._network && localProvider._network.chainId;\r\n  let selectedChainId =\r\n    userProvider && userProvider._network && userProvider._network.chainId;\r\n  console.log(\"user provider network\", userProvider._network);\r\n\r\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\r\n\r\n  // The transactor wraps transacti ons and provides notificiations\r\n  const tx = Transactor(userProvider, gasPrice);\r\n\r\n  // Faucet Tx can be used to send funds from the faucet\r\n  // const faucetTx = Transactor(localProvider, gasPrice);\r\n\r\n  // Load in your local 📝 contract and read a value from it:\r\n  const readContracts = useContractLoader(localProvider);\r\n\r\n  // If you want to make 🔐 write transactions to your contracts, use the userProvider:\r\n  const writeContracts = useContractLoader(userProvider);\r\n\r\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\r\n  const yourLocalBalance = useBalance(writeContracts, address, localProvider);\r\n\r\n  // EXTERNAL CONTRACT EXAMPLE:\r\n  //\r\n  // If you want to bring in the mainnet DAI contract it would look like:\r\n  const mainnetDAIContract = useExternalContractLoader(\r\n    mainnetProvider,\r\n    DAI_ADDRESS,\r\n    DAI_ABI\r\n  );\r\n\r\n  if (DEBUG) console.log(\"🌍 DAI contract on mainnet:\", mainnetDAIContract);\r\n  //\r\n  // Then read your DAI balance like:\r\n  const myMainnetDAIBalance = useContractReader(\r\n    { DAI: mainnetDAIContract },\r\n    \"DAI\",\r\n    \"balanceOf\",\r\n    [\"0x34aA3F359A9D614239015126635CE7732c18fDF3\"]\r\n  );\r\n  if (DEBUG) console.log(\"🥇 myMainnetDAIBalance:\", myMainnetDAIBalance);\r\n\r\n  // keep track of a variable from the contract in the local React state:\r\n  const balance = useContractReader(readContracts, \"MYERC721\", \"balanceOf\", [\r\n    address,\r\n  ]);\r\n  if (DEBUG) console.log(\"🤗 balance:\", balance);\r\n\r\n  //📟 Listen for broadcast events\r\n  const transferEvents = useEventListener(\r\n    readContracts,\r\n    \"MYERC721\",\r\n    \"Transfer\",\r\n    localProvider,\r\n    1\r\n  );\r\n  if (DEBUG) console.log(\"📟 Transfer events:\", transferEvents);\r\n\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [auctionDetails, setAuctionDetails] = useState({\r\n    price: \"\",\r\n    duration: \"\",\r\n  });\r\n  const [auctionToken, setAuctionToken] = useState(\"\");\r\n\r\n  //\r\n  // 🧠 This effect will update yourCollectibles by polling when your balance changes\r\n  //\r\n  const [yourCollectibles, setYourCollectibles] = useState(\r\n    assetsInitAuctionStat\r\n  );\r\n\r\n  let [userCollections, setUserCollections] = useState([]);\r\n  if (allUserCollections[address]) {\r\n    userCollections = [...allUserCollections[address]];\r\n  }\r\n\r\n  // useEffect(()=>{\r\n  //   const updateYourCollectibles = async () => {\r\n  //     let collectibleUpdate = []\r\n  //     for(let tokenIndex=0;tokenIndex<balance;tokenIndex++){\r\n  //       try{\r\n  //         console.log(\"GEtting token index\",tokenIndex)\r\n  //         const tokenId = await readContracts.YourCollectible.tokenOfOwnerByIndex(address, tokenIndex)\r\n  //         console.log(\"tokenId\",tokenId)\r\n  //         const tokenURI = await readContracts.YourCollectible.tokenURI(tokenId)\r\n  //         console.log(\"tokenURI\",tokenURI)\r\n  //\r\n  //         const ipfsHash =  tokenURI.replace(\"https://ipfs.io/ipfs/\",\"\")\r\n  //         console.log(\"ipfsHash\",ipfsHash)\r\n  //\r\n  //         const jsonManifestBuffer = await getFromIPFS(ipfsHash)\r\n  //\r\n  //         try{\r\n  //           const jsonManifest = JSON.parse(jsonManifestBuffer.toString())\r\n  //           // console.log(\"jsonManifest\",jsonManifest)\r\n  //           collectibleUpdate.push({ id:tokenId, uri:tokenURI, owner: address, ...jsonManifest })\r\n  //         }catch(e){console.log(e)}\r\n  //\r\n  //       }catch(e){console.log(e)}\r\n  //     }\r\n  //     setYourCollectibles(collectibleUpdate)\r\n  //   }\r\n  //   updateYourCollectibles()\r\n  // },[ address, yourBalance ])\r\n\r\n  /*\r\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\r\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\r\n  */\r\n\r\n  //\r\n  // 🧫 DEBUG 👨🏻‍🔬\r\n  //\r\n  useEffect(() => {\r\n    if (\r\n      DEBUG &&\r\n      mainnetProvider &&\r\n      address &&\r\n      selectedChainId &&\r\n      yourLocalBalance &&\r\n      readContracts &&\r\n      writeContracts &&\r\n      mainnetDAIContract\r\n    ) {\r\n      console.log(\r\n        \"_____________________________________ 🏗 scaffold-eth _____________________________________\"\r\n      );\r\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\r\n      console.log(\"🏠 localChainId\", localChainId);\r\n      console.log(\"👩‍💼 selected address:\", address);\r\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\r\n      console.log(\r\n        \"💵 yourLocalBalance\",\r\n        yourLocalBalance ? yourLocalBalance : \"...\"\r\n      );\r\n      console.log(\"📝 readContracts\", readContracts);\r\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetDAIContract);\r\n      console.log(\"🔐 writeContracts\", writeContracts);\r\n    }\r\n  }, [\r\n    mainnetProvider,\r\n    address,\r\n    selectedChainId,\r\n    yourLocalBalance,\r\n    readContracts,\r\n    writeContracts,\r\n    mainnetDAIContract,\r\n  ]);\r\n\r\n  let networkDisplay = \"\";\r\n  if (localChainId && selectedChainId && localChainId != selectedChainId) {\r\n    networkDisplay = (\r\n      <div\r\n        style={{\r\n          zIndex: 2,\r\n          position: \"absolute\",\r\n          right: 0,\r\n          top: 60,\r\n          padding: 16,\r\n        }}\r\n      >\r\n        <Alert\r\n          message={\"⚠️ Wrong Network\"}\r\n          description={\r\n            <div>\r\n              You have{\" \"}\r\n              <b>\r\n                {NETWORK(selectedChainId)\r\n                  ? NETWORK(selectedChainId).name\r\n                  : \"unknow network\"}\r\n              </b>{\" \"}\r\n              selected and you need to be on <b>{NETWORK(localChainId).name}</b>\r\n              .\r\n            </div>\r\n          }\r\n          type=\"error\"\r\n          closable={false}\r\n        />\r\n      </div>\r\n    );\r\n  } else {\r\n    networkDisplay = (\r\n      <div\r\n        style={{\r\n          zIndex: -1,\r\n          position: \"absolute\",\r\n          right: 154,\r\n          top: 28,\r\n          padding: 16,\r\n          color: targetNetwork.color,\r\n        }}\r\n      >\r\n        {targetNetwork.name}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const loadWeb3Modal = useCallback(async () => {\r\n    console.log(\"loadWeb3Modal\", web3Modal, web3Modal.cachedProvider);\r\n    const provider = await web3Modal.connect();\r\n    console.log(provider);\r\n    setInjectedProvider(new Web3Provider(provider));\r\n  }, [setInjectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (web3Modal.cachedProvider) {\r\n      loadWeb3Modal();\r\n    }\r\n  }, [loadWeb3Modal]);\r\n\r\n  const [route, setRoute] = useState();\r\n  useEffect(() => {\r\n    setRoute(window.location.pathname);\r\n  }, [setRoute]);\r\n\r\n  let faucetHint = \"\";\r\n  const faucetAvailable =\r\n    localProvider &&\r\n    localProvider.connection &&\r\n    targetNetwork.name === \"localhost\";\r\n\r\n  const grabFounds = async () => {\r\n    let currentSupply = parseInt(\r\n      await readContracts.SimpleToken.balanceOf(address)\r\n    );\r\n    console.log(\r\n      \"Total balance of erc20 with current address is\",\r\n      currentSupply\r\n    );\r\n    if (currentSupply < 1000) {\r\n      await tx(readContracts.SimpleToken.mint(address, 1000));\r\n    }\r\n    currentSupply = await readContracts.SimpleToken.balanceOf(address);\r\n    console.log(\r\n      \"Total balance of erc20 with current address is\",\r\n      currentSupply\r\n    );\r\n  };\r\n\r\n  console.log(\"For grabFounds\");\r\n  console.log(\"Your local Balance\");\r\n  console.log(yourLocalBalance);\r\n  faucetHint = (\r\n    <div\r\n      style={{\r\n        padding: 16,\r\n        position: \"fixed\",\r\n        textAlign: \"right\",\r\n        right: 0,\r\n        top: 40,\r\n      }}\r\n    >\r\n      <Button\r\n        type={\"primary\"}\r\n        onClick={() => {\r\n          grabFounds();\r\n        }}\r\n      >\r\n        💰 Grab funds from the faucet when balance less than 1000 ⛽️\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const [yourJSON, setYourJSON] = useState(STARTING_JSON);\r\n  const [sending, setSending] = useState();\r\n  const [ipfsHash, setIpfsHash] = useState();\r\n  const [ipfsDownHash, setIpfsDownHash] = useState();\r\n\r\n  const [downloading, setDownloading] = useState();\r\n  const [ipfsContent, setIpfsContent] = useState();\r\n  let [yourBid, setYourBid] = useState(usersBid[address]);\r\n  if (usersBid[address]) {\r\n    yourBid = usersBid[address];\r\n  }\r\n\r\n  const [transferToAddresses, setTransferToAddresses] = useState({});\r\n\r\n  const [loadedAssets, setLoadedAssets] = useState();\r\n\r\n  const [url2TokenID, setUrl2TokenID] = useState({});\r\n\r\n  const [auctionType, setAuctionType] = useState(1);\r\n\r\n  let [Hover, setHover] = useState(false);\r\n\r\n  const updateYourCollectibles = async () => {\r\n    let assetUpdate = [];\r\n    for (let a in assets) {\r\n      try {\r\n        const forSale = yourCollectibles[a].forSale;\r\n        let owner;\r\n        let auctionInfo = {\r\n          seller: \"\",\r\n          price: 0,\r\n          duration: 0,\r\n          tokenAddress: 0,\r\n          maxBid: 0,\r\n          maxBidUser: 0,\r\n          isActive: false,\r\n          bidAmounts: [],\r\n          users: [],\r\n        };\r\n        if (!forSale) {\r\n          const tokenId = url2TokenID[a];\r\n          owner = await readContracts.MYERC721.ownerOf(tokenId);\r\n          const nftAddress = readContracts.MYERC721.address;\r\n          console.log(\"yourCollectibles[a]\");\r\n          console.log(yourCollectibles[a]);\r\n          if (yourCollectibles[a].forAuction) {\r\n            if (yourCollectibles[a].assetAuctionType === 1) {\r\n              auctionInfo =\r\n                await readContracts.AuctionUnfixedPrice.getTokenAuctionDetails(\r\n                  nftAddress,\r\n                  tokenId\r\n                );\r\n            } else {\r\n              auctionInfo =\r\n                await readContracts.AuctionFixedPrice.getTokenAuctionDetails(\r\n                  nftAddress,\r\n                  tokenId\r\n                );\r\n            }\r\n          }\r\n          console.log(\"========== forSale is false\");\r\n          console.log(auctionInfo);\r\n        }\r\n        assetUpdate.push({\r\n          id: a,\r\n          ...assets[a],\r\n          forSale: forSale,\r\n          owner: owner,\r\n          auctionInfo,\r\n        });\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n    setLoadedAssets(assetUpdate);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (readContracts && yourCollectibles) updateYourCollectibles();\r\n  }, [assets, readContracts, transferEvents, yourCollectibles]);\r\n\r\n  const startAuction = (tokenUri) => {\r\n    return async () => {\r\n      if (!injectedProvider) {\r\n        await loadWeb3Modal();\r\n      }\r\n      if (!WalletCheck.approvePermission[address]) {\r\n        await connectWallet();\r\n      }\r\n      setAuctionToken(tokenUri);\r\n      setModalVisible(true);\r\n      setAuctionType(1);\r\n    };\r\n  };\r\n\r\n  const placeBid = async (tokenUri, bidPrice, BidType) => {\r\n    console.log(\"In placeBid , the tokenUri is \", tokenUri);\r\n    const tokenId = url2TokenID[tokenUri];\r\n    const nftAddress = readContracts.MYERC721.address;\r\n\r\n    try {\r\n      if (BidType === 1) {\r\n        console.log(\"Going to bid when auctionType is 1\");\r\n        await tx(\r\n          writeContracts.AuctionUnfixedPrice.bid(nftAddress, tokenId, bidPrice)\r\n        );\r\n      } else {\r\n        console.log(\"Going to bid when auctionType is 2\");\r\n        await tx(\r\n          writeContracts.AuctionFixedPrice.purchaseNFTToken(nftAddress, tokenId)\r\n        );\r\n        assetsInitAuctionStat[auctionToken].forAuction = false;\r\n        delete yourBid[tokenUri];\r\n        userCollections.push(tokenUri);\r\n        allUserCollections[address] = userCollections;\r\n        setUserCollections(userCollections);\r\n        setYourCollectibles(assetsInitAuctionStat);\r\n      }\r\n      usersBid[address] = yourBid;\r\n      updateYourCollectibles();\r\n    } catch (e) {\r\n      console.log(\"Failed to placeBid\");\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const completeAuction = (tokenUri) => {\r\n    return async () => {\r\n      const tokenId = url2TokenID[tokenUri];\r\n      const nftAddress = readContracts.MYERC721.address;\r\n      const auctionInfo =\r\n        await readContracts.AuctionUnfixedPrice.getTokenAuctionDetails(\r\n          nftAddress,\r\n          tokenId\r\n        );\r\n      const maxBidUser = auctionInfo.maxBidUser;\r\n      console.log(\"When complete Auction, maxBid User is \", maxBidUser);\r\n      try {\r\n        await tx(\r\n          writeContracts.AuctionUnfixedPrice.executeSale(nftAddress, tokenId)\r\n        );\r\n        if (maxBidUser === address) {\r\n          userCollections.push(tokenUri);\r\n          allUserCollections[address] = userCollections;\r\n        } else {\r\n          allUserCollections[maxBidUser].push(tokenUri);\r\n        }\r\n        assetsInitAuctionStat[tokenUri].forAuction = false;\r\n        setYourCollectibles(assetsInitAuctionStat);\r\n        updateYourCollectibles();\r\n      } catch (e) {\r\n        console.log(\"Failed to complete Auction\");\r\n        console.log(e);\r\n      }\r\n    };\r\n  };\r\n\r\n  const cancelAuction = (tokenUri, auctionType) => {\r\n    return async () => {\r\n      const tokenId = url2TokenID[tokenUri];\r\n      const nftAddress = readContracts.MYERC721.address;\r\n      if (auctionType === 1) {\r\n        await tx(\r\n          writeContracts.AuctionUnfixedPrice.cancelAution(nftAddress, tokenId)\r\n        );\r\n      } else {\r\n        await tx(\r\n          writeContracts.AuctionFixedPrice.cancelAution(nftAddress, tokenId)\r\n        );\r\n      }\r\n\r\n      assetsInitAuctionStat[tokenUri].forAuction = false;\r\n      userCollections.push(tokenUri);\r\n      allUserCollections[address] = userCollections;\r\n      setUserCollections(userCollections);\r\n      setYourCollectibles(assetsInitAuctionStat);\r\n      updateYourCollectibles();\r\n    };\r\n  };\r\n\r\n  const mintItem = async (tokenUri) => {\r\n    if (!injectedProvider) {\r\n      await loadWeb3Modal();\r\n    }\r\n    if (!WalletCheck.approvePermission[address]) {\r\n      await connectWallet();\r\n    }\r\n    await readContracts.MYERC721.mintWithTokenURI(address, tokenUri);\r\n    const tokenId = (await readContracts.MYERC721.totalSupply()) - 1;\r\n\r\n    url2TokenID[tokenUri] = tokenId;\r\n    assetsInitAuctionStat[tokenUri].forSale = false;\r\n\r\n    userCollections.push(tokenUri);\r\n    allUserCollections[address] = userCollections;\r\n    setUserCollections(userCollections);\r\n    setYourCollectibles(assetsInitAuctionStat);\r\n    updateYourCollectibles();\r\n  };\r\n\r\n  let galleryList = [];\r\n  for (let a in loadedAssets ? loadedAssets.slice(0, 6) : []) {\r\n    // console.log(\"loadedAssets\",a,loadedAssets[a])\r\n\r\n    let cardActions = [];\r\n    let auctionDetails = [];\r\n    if (loadedAssets[a].forSale) {\r\n      cardActions.push(\r\n        <div>\r\n          <Button\r\n            onClick={() => {\r\n              mintItem(loadedAssets[a].id);\r\n            }}\r\n          >\r\n            Mint\r\n          </Button>\r\n        </div>\r\n      );\r\n      auctionDetails.push(null);\r\n    } else {\r\n      const { auctionInfo } = loadedAssets[a];\r\n      console.log(\"auctionInfo duration is \", auctionInfo.duration);\r\n      const deadline = parseInt(auctionInfo.duration * 1000);\r\n      console.log(\"Deadline is \", deadline);\r\n      console.log(\"current Time is \", new Date().getTime());\r\n      const isEnded = deadline * 1000 <= new Date().getTime();\r\n\r\n      console.log(\"======auctionInfo\");\r\n      console.log(auctionInfo);\r\n      console.log(\"In auction, the value of assetsInitAuctionStat[a] is\");\r\n      console.log(assetsInitAuctionStat[a]);\r\n      console.log(a);\r\n      const auctionTypeInner = loadedAssets[a].id;\r\n      cardActions.push(\r\n        <div>\r\n          <div>\r\n            owned by:{\" \"}\r\n            <Address\r\n              address={loadedAssets[a].owner}\r\n              ensProvider={mainnetProvider}\r\n              blockExplorer={blockExplorer}\r\n              minimized={true}\r\n            />\r\n          </div>\r\n          {!loadedAssets[a].auctionInfo.isActive &&\r\n            address === loadedAssets[a].owner && (\r\n              <>\r\n                <Button\r\n                  style={{ marginBottom: \"10px\" }}\r\n                  onClick={startAuction(loadedAssets[a].id)}\r\n                  disabled={address !== loadedAssets[a].owner}\r\n                >\r\n                  Start auction\r\n                </Button>\r\n                <br />\r\n              </>\r\n            )}\r\n          {loadedAssets[a].auctionInfo.isActive &&\r\n            address === loadedAssets[a].auctionInfo.seller &&\r\n            assetsInitAuctionStat[auctionTypeInner].assetAuctionType === 1 && (\r\n              <>\r\n                <Button\r\n                  style={{ marginBottom: \"10px\" }}\r\n                  onClick={completeAuction(loadedAssets[a].id)}\r\n                >\r\n                  Complete auction\r\n                </Button>\r\n                <br />\r\n              </>\r\n            )}\r\n          {loadedAssets[a].auctionInfo.isActive &&\r\n            address === loadedAssets[a].auctionInfo.seller && (\r\n              <>\r\n                <Button\r\n                  style={{ marginBottom: \"10px\" }}\r\n                  onClick={cancelAuction(\r\n                    loadedAssets[a].id,\r\n                    assetsInitAuctionStat[auctionTypeInner].assetAuctionType\r\n                  )}\r\n                >\r\n                  Cancel auction\r\n                </Button>\r\n                <br />\r\n              </>\r\n            )}\r\n        </div>\r\n      );\r\n\r\n      console.log(\"Loaded asset is : \", loadedAssets[a]);\r\n      console.log(\"Your Bid is \", yourBid[loadedAssets[a].id]);\r\n      console.log(\"Whether is ended: \", isEnded);\r\n      auctionDetails.push(\r\n        auctionInfo.isActive ? (\r\n          <div style={{ marginTop: \"20px\" }}>\r\n            <p style={{ fontWeight: \"bold\" }}>\r\n              {assetsInitAuctionStat[auctionTypeInner].assetAuctionType === 1\r\n                ? \"Unfixed Price \"\r\n                : \"Fixed Price \"}\r\n              Auction is in progress\r\n            </p>\r\n            <p style={{ margin: 0, marginBottom: \"2px\" }}>\r\n              {assetsInitAuctionStat[auctionTypeInner].assetAuctionType === 1\r\n                ? \"Minimal \"\r\n                : \"\"}{\" \"}\r\n              price is {auctionInfo.price.toString()}{\" \"}\r\n            </p>\r\n            <p style={{ marginTop: 0 }}>\r\n              {!isEnded\r\n                ? `Auction ends at ${format(\r\n                    new Date(deadline),\r\n                    \"MMMM dd, hh:mm:ss\"\r\n                  )}`\r\n                : \"Auction has already ended\"}\r\n            </p>\r\n            {assetsInitAuctionStat[auctionTypeInner].assetAuctionType === 1 && (\r\n              <div>\r\n                {auctionInfo.maxBidUser === constants.AddressZero ? (\r\n                  \"Highest bid was not made yet\"\r\n                ) : (\r\n                  <div>\r\n                    Highest bid by:{\" \"}\r\n                    <Address\r\n                      address={auctionInfo.maxBidUser}\r\n                      ensProvider={mainnetProvider}\r\n                      blockExplorer={blockExplorer}\r\n                      minimized={true}\r\n                    />\r\n                    <p> is {auctionInfo.maxBid.toString()}</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            {assetsInitAuctionStat[auctionTypeInner].assetAuctionType === 2 && (\r\n              <div>\r\n                <div>\r\n                  Fixed Price for this product is :{\" \"}\r\n                  <p>{auctionInfo.price.toString()}</p>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <div>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  marginTop: \"20px\",\r\n                }}\r\n              >\r\n                <p style={{ margin: 0, marginRight: \"15px\" }}>\r\n                  Your bid in ERC20:{\" \"}\r\n                </p>\r\n                <InputNumber\r\n                  placeholder=\"0.1\"\r\n                  value={yourBid[loadedAssets[a].id]}\r\n                  onChange={(newBid) => {\r\n                    usersBid[address] = {\r\n                      ...yourBid,\r\n                      [loadedAssets[a].id]: newBid,\r\n                    };\r\n                    setYourBid({ ...yourBid, [loadedAssets[a].id]: newBid });\r\n                  }}\r\n                  style={{ flexGrow: 1 }}\r\n                />\r\n              </div>\r\n              <Button\r\n                style={{ marginTop: \"7px\" }}\r\n                onClick={() =>\r\n                  placeBid(\r\n                    loadedAssets[a].id,\r\n                    yourBid[loadedAssets[a].id],\r\n                    assetsInitAuctionStat[auctionTypeInner].assetAuctionType\r\n                  )\r\n                }\r\n                disabled={!yourBid[loadedAssets[a].id] || isEnded}\r\n              >\r\n                Place a bid\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        ) : null\r\n      );\r\n    }\r\n\r\n    galleryList.push(\r\n      <>\r\n        <Card\r\n          style={{ width: 300 }}\r\n          key={loadedAssets[a].name}\r\n          actions={cardActions}\r\n          title={\r\n            <div>\r\n              {loadedAssets[a].name}{\" \"}\r\n              <a\r\n                style={{ cursor: \"pointer\", opacity: 0.33 }}\r\n                href={loadedAssets[a].external_url}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                <LinkOutlined />\r\n              </a>\r\n            </div>\r\n          }\r\n        >\r\n          <img style={{ maxWidth: 130 }} src={loadedAssets[a].image} />\r\n          <div style={{ opacity: 0.77 }}>{loadedAssets[a].description}</div>\r\n          {auctionDetails}\r\n        </Card>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const handleOk = async () => {\r\n    setModalVisible(false);\r\n    const { price, duration } = auctionDetails;\r\n    const tokenId = url2TokenID[auctionToken];\r\n    const nftAddress = readContracts.MYERC721.address;\r\n    const erc20Address = readContracts.SimpleToken.address;\r\n    console.log(\"Token URL is \", auctionToken);\r\n    console.log(\"duration is \", duration);\r\n\r\n    let writeAuction;\r\n\r\n    if (auctionType === 1) {\r\n      writeAuction = writeContracts.AuctionUnfixedPrice;\r\n      assetsInitAuctionStat[auctionToken].assetAuctionType = 1;\r\n    } else {\r\n      writeAuction = writeContracts.AuctionFixedPrice;\r\n      assetsInitAuctionStat[auctionToken].assetAuctionType = 2;\r\n    }\r\n\r\n    console.log(\"==========after 721 approve\");\r\n\r\n    const erc20Price = parseInt(price.toString());\r\n    console.log(\"ERC20 Price for Auction is\", erc20Price);\r\n    const blockDuration = Math.floor(new Date().getTime() / 1000) + duration;\r\n    console.log(\"blockDuration is\", blockDuration);\r\n\r\n    await tx(\r\n      writeAuction.createTokenAuction(\r\n        nftAddress,\r\n        tokenId,\r\n        erc20Address,\r\n        erc20Price,\r\n        blockDuration\r\n      )\r\n    );\r\n\r\n    assetsInitAuctionStat[auctionToken].forAuction = true;\r\n    console.log(\"auctionToken in handleOk is \", auctionToken);\r\n    console.log(\"userCollections before delete\", userCollections);\r\n    const index = userCollections.indexOf(auctionToken);\r\n    userCollections.splice(index, 1);\r\n    console.log(\"userCollections after delete\", userCollections);\r\n    allUserCollections[address] = userCollections;\r\n    setUserCollections(userCollections);\r\n    setYourCollectibles(assetsInitAuctionStat);\r\n    updateYourCollectibles();\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setModalVisible(false);\r\n  };\r\n\r\n  const handleAuctionType = (e) => {\r\n    setAuctionType(e.target.value);\r\n  };\r\n\r\n  const logoutOfWeb3Modal = async () => {\r\n    await web3Modal.clearCachedProvider();\r\n  };\r\n\r\n  window.ethereum && window.ethereum.on(\"chainChanged\", (chainId) => {});\r\n\r\n  window.ethereum &&\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      loadWeb3Modal();\r\n    });\r\n\r\n  // const dismissNetworkError = async () => {\r\n  //   networkError = undefined;\r\n  //   loadWeb3Modal();\r\n  // };\r\n\r\n  const connectWallet = async () => {\r\n    const ethBalance = await localProvider.getBalance(address);\r\n    if (ethBalance <= 0.3) {\r\n      const signer = localProvider.getSigner();\r\n      let result = await signer.sendTransaction({\r\n        to: address,\r\n        value: parseEther(\"0.3\"),\r\n        gasPrice: parseUnits(\"4.1\", \"gwei\"),\r\n        gasLimit: hexlify(120000),\r\n      });\r\n      console.log(\"Trans ETH result: \", result);\r\n    }\r\n\r\n    WalletCheck.connecting = true;\r\n    await tx(\r\n      writeContracts.MYERC721.setApprovalForAll(\r\n        writeContracts.AuctionFixedPrice.address,\r\n        true\r\n      )\r\n    );\r\n    await tx(\r\n      writeContracts.MYERC721.setApprovalForAll(\r\n        writeContracts.AuctionUnfixedPrice.address,\r\n        true\r\n      )\r\n    );\r\n    await tx(\r\n      writeContracts.SimpleToken.approve(\r\n        writeContracts.AuctionFixedPrice.address,\r\n        10000\r\n      )\r\n    );\r\n    await tx(\r\n      writeContracts.SimpleToken.approve(\r\n        writeContracts.AuctionUnfixedPrice.address,\r\n        10000\r\n      )\r\n    );\r\n\r\n    WalletCheck.approvePermission[address] = true;\r\n    WalletCheck.connecting = false;\r\n  };\r\n\r\n  const toggleHover = async () => {\r\n    console.log(\"toggleHover\");\r\n    setHover(!Hover);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {!WalletCheck.walletExist && <NoWalletDetected />}\r\n      {/*{!WalletCheck.approvePermission[address]  && <ConnectWallet\r\n      connectWallet={() => connectWallet()}\r\n      networkError={networkError}\r\n      dismiss={() => dismissNetworkError()} />}*/}\r\n      {WalletCheck.connecting && <Loading />}\r\n\r\n      {WalletCheck.walletExist && (\r\n        <div>\r\n          <Modal\r\n            title=\"Start auction\"\r\n            visible={modalVisible}\r\n            onOk={handleOk}\r\n            onCancel={handleCancel}\r\n            okButtonProps={{\r\n              disabled: !auctionDetails.price || !auctionDetails.duration,\r\n            }}\r\n            okText=\"Start\"\r\n          >\r\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              <p style={{ margin: 0, marginRight: \"15px\" }}>\r\n                ERC20 Price (minimal bid):{\" \"}\r\n              </p>\r\n              <InputNumber\r\n                placeholder=\"0.1\"\r\n                value={auctionDetails.price}\r\n                onChange={(newPrice) =>\r\n                  setAuctionDetails({ ...auctionDetails, price: newPrice })\r\n                }\r\n                style={{ flexGrow: 1 }}\r\n              />\r\n            </div>\r\n            <br />\r\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              <p style={{ margin: 0, marginRight: \"15px\" }}>\r\n                Duration in seconds:{\" \"}\r\n              </p>\r\n              <InputNumber\r\n                placeholder=\"3600\"\r\n                value={auctionDetails.duration}\r\n                onChange={(newDuration) =>\r\n                  setAuctionDetails({\r\n                    ...auctionDetails,\r\n                    duration: newDuration,\r\n                  })\r\n                }\r\n                style={{ flexGrow: 1 }}\r\n              />\r\n            </div>\r\n            <br />\r\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              <Radio.Group onChange={handleAuctionType} value={auctionType}>\r\n                <Radio value={1}>Unfixed Price Auction</Radio>\r\n                <Radio value={2}>Fixed Price Auction</Radio>\r\n              </Radio.Group>\r\n            </div>\r\n          </Modal>\r\n\r\n          {/* ✏️ Edit the header and change the title to your project name */}\r\n          <Header />\r\n          {networkDisplay}\r\n\r\n          <BrowserRouter>\r\n            <Menu\r\n              style={{ textAlign: \"center\", alignItems: \"center\" }}\r\n              selectedKeys={route}\r\n              mode=\"horizontal\"\r\n            >\r\n              <Menu.Item key=\"/\">\r\n                <Link\r\n                  onClick={() => {\r\n                    setRoute(\"/\");\r\n                  }}\r\n                  to=\"/\"\r\n                >\r\n                  Gallery\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"/yourcollectibles\">\r\n                <Link\r\n                  onClick={() => {\r\n                    setRoute(\"/yourcollectibles\");\r\n                  }}\r\n                  to=\"/yourcollectibles\"\r\n                >\r\n                  YourCollectibles\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"/transfers\">\r\n                <Link\r\n                  onClick={() => {\r\n                    setRoute(\"/transfers\");\r\n                  }}\r\n                  to=\"/transfers\"\r\n                >\r\n                  Transfers\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"/ipfsup\">\r\n                <Link\r\n                  onClick={() => {\r\n                    setRoute(\"/ipfsup\");\r\n                  }}\r\n                  to=\"/ipfsup\"\r\n                >\r\n                  IPFS Upload\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"/ipfsdown\">\r\n                <Link\r\n                  onClick={() => {\r\n                    setRoute(\"/ipfsdown\");\r\n                  }}\r\n                  to=\"/ipfsdown\"\r\n                >\r\n                  IPFS Download\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"/debugcontracts\">\r\n                <Link\r\n                  onClick={() => {\r\n                    setRoute(\"/debugcontracts\");\r\n                  }}\r\n                  to=\"/debugcontracts\"\r\n                >\r\n                  Debug Contracts\r\n                </Link>\r\n              </Menu.Item>\r\n            </Menu>\r\n\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                {/*\r\n                🎛 this scaffolding is full of commonly used components\r\n                this <Contract/> component will automatically parse your ABI\r\n                and give you a form to interact with it locally\r\n            */}\r\n\r\n                <div\r\n                  style={{\r\n                    maxWidth: 1024,\r\n                    margin: \"auto\",\r\n                    marginTop: 32,\r\n                    paddingBottom: 56,\r\n                  }}\r\n                >\r\n                  <Button\r\n                    disabled={galleryList.length === 0}\r\n                    onClick={updateYourCollectibles}\r\n                    style={{ marginBottom: \"25px\" }}\r\n                  >\r\n                    Update collectibles\r\n                  </Button>\r\n\r\n                  <StackGrid\r\n                    columnWidth={300}\r\n                    gutterWidth={16}\r\n                    gutterHeight={16}\r\n                  >\r\n                    {galleryList}\r\n                  </StackGrid>\r\n                </div>\r\n              </Route>\r\n\r\n              <Route path=\"/yourcollectibles\">\r\n                <div\r\n                  style={{\r\n                    width: 640,\r\n                    margin: \"auto\",\r\n                    marginTop: 32,\r\n                    paddingBottom: 32,\r\n                  }}\r\n                >\r\n                  <List\r\n                    bordered\r\n                    dataSource={userCollections}\r\n                    renderItem={(item) => {\r\n                      return (\r\n                        <List.Item\r\n                          key={assets[item].external_url + \"_\" + address}\r\n                        >\r\n                          <Card title={<div>{assets[item].name}</div>}>\r\n                            <div>\r\n                              <img\r\n                                src={assets[item].image}\r\n                                style={{ maxWidth: 150 }}\r\n                              />\r\n                            </div>\r\n                            <div>{assets[item].description}</div>\r\n                          </Card>\r\n                        </List.Item>\r\n                      );\r\n                    }}\r\n                  />\r\n                </div>\r\n              </Route>\r\n\r\n              <Route path=\"/transfers\">\r\n                <div\r\n                  style={{\r\n                    width: 600,\r\n                    margin: \"auto\",\r\n                    marginTop: 32,\r\n                    paddingBottom: 32,\r\n                  }}\r\n                >\r\n                  <List\r\n                    bordered\r\n                    dataSource={transferEvents}\r\n                    renderItem={(item) => {\r\n                      return (\r\n                        <List.Item\r\n                          key={\r\n                            item[0] +\r\n                            \"_\" +\r\n                            item[1] +\r\n                            \"_\" +\r\n                            item.blockNumber +\r\n                            \"_\" +\r\n                            item[2].toNumber()\r\n                          }\r\n                        >\r\n                          <span style={{ fontSize: 16, marginRight: 8 }}>\r\n                            #{item[2].toNumber()}\r\n                          </span>\r\n                          <Address\r\n                            address={item[0]}\r\n                            ensProvider={mainnetProvider}\r\n                            fontSize={16}\r\n                          />\r\n                          <Address\r\n                            address={item[1]}\r\n                            ensProvider={mainnetProvider}\r\n                            fontSize={16}\r\n                          />\r\n                        </List.Item>\r\n                      );\r\n                    }}\r\n                  />\r\n                </div>\r\n              </Route>\r\n\r\n              <Route path=\"/ipfsup\">\r\n                <div\r\n                  style={{\r\n                    paddingTop: 32,\r\n                    width: 740,\r\n                    margin: \"auto\",\r\n                    textAlign: \"left\",\r\n                  }}\r\n                >\r\n                  <ReactJson\r\n                    style={{ padding: 8 }}\r\n                    src={yourJSON}\r\n                    theme={\"pop\"}\r\n                    enableClipboard={false}\r\n                    onEdit={(edit, a) => {\r\n                      setYourJSON(edit.updated_src);\r\n                    }}\r\n                    onAdd={(add, a) => {\r\n                      setYourJSON(add.updated_src);\r\n                    }}\r\n                    onDelete={(del, a) => {\r\n                      setYourJSON(del.updated_src);\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                <Button\r\n                  style={{ margin: 8 }}\r\n                  loading={sending}\r\n                  size=\"large\"\r\n                  shape=\"round\"\r\n                  type=\"primary\"\r\n                  onClick={async () => {\r\n                    console.log(\"UPLOADING...\", yourJSON);\r\n                    setSending(true);\r\n                    setIpfsHash();\r\n                    // const result = await ipfs.add(JSON.stringify(yourJSON)); //addToIPFS(JSON.stringify(yourJSON))\r\n                    // if (result && result.path) {\r\n                    //   setIpfsHash(result.path);\r\n                    // }\r\n                    // setSending(false);\r\n                    // console.log(\"RESULT:\", result);\r\n                  }}\r\n                >\r\n                  Upload to IPFS\r\n                </Button>\r\n\r\n                <div style={{ padding: 16, paddingBottom: 150 }}>\r\n                  {ipfsHash}\r\n                </div>\r\n              </Route>\r\n              <Route path=\"/ipfsdown\">\r\n                <div style={{ paddingTop: 32, width: 740, margin: \"auto\" }}>\r\n                  <Input\r\n                    value={ipfsDownHash}\r\n                    placeHolder={\r\n                      \"IPFS hash (like QmadqNw8zkdrrwdtPFK1pLi8PPxmkQ4pDJXY8ozHtz6tZq)\"\r\n                    }\r\n                    onChange={(e) => {\r\n                      setIpfsDownHash(e.target.value);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <Button\r\n                  style={{ margin: 8 }}\r\n                  loading={sending}\r\n                  size=\"large\"\r\n                  shape=\"round\"\r\n                  type=\"primary\"\r\n                  onClick={async () => {\r\n                    console.log(\"DOWNLOADING...\", ipfsDownHash);\r\n                    setDownloading(true);\r\n                    setIpfsContent();\r\n                    const result = await getFromIPFS(ipfsDownHash); //addToIPFS(JSON.stringify(yourJSON))\r\n                    if (result && result.toString) {\r\n                      setIpfsContent(result.toString());\r\n                    }\r\n                    setDownloading(false);\r\n                  }}\r\n                >\r\n                  Download from IPFS\r\n                </Button>\r\n\r\n                <pre\r\n                  style={{\r\n                    padding: 16,\r\n                    width: 500,\r\n                    margin: \"auto\",\r\n                    paddingBottom: 150,\r\n                  }}\r\n                >\r\n                  {ipfsContent}\r\n                </pre>\r\n              </Route>\r\n              <Route path=\"/debugcontracts\">\r\n                <Contract\r\n                  name=\"AuctionFixedPrice\"\r\n                  signer={userProvider.getSigner()}\r\n                  provider={localProvider}\r\n                  address={address}\r\n                  blockExplorer={blockExplorer}\r\n                />\r\n                <Contract\r\n                  name=\"AuctionUnfixedPrice\"\r\n                  signer={userProvider.getSigner()}\r\n                  provider={localProvider}\r\n                  address={address}\r\n                  blockExplorer={blockExplorer}\r\n                />\r\n              </Route>\r\n            </Switch>\r\n          </BrowserRouter>\r\n\r\n          <ThemeSwitch />\r\n\r\n          {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              textAlign: \"right\",\r\n              right: 0,\r\n              top: 0,\r\n              padding: 10,\r\n            }}\r\n            onMouseEnter={toggleHover}\r\n            onMouseLeave={toggleHover}\r\n          >\r\n            <Account\r\n              address={address}\r\n              localProvider={localProvider}\r\n              userProvider={userProvider}\r\n              mainnetProvider={mainnetProvider}\r\n              price={yourLocalBalance}\r\n              web3Modal={web3Modal}\r\n              loadWeb3Modal={loadWeb3Modal}\r\n              logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n              blockExplorer={blockExplorer}\r\n            />\r\n            {Hover && faucetHint}\r\n          </div>\r\n\r\n          {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              textAlign: \"left\",\r\n              left: 0,\r\n              bottom: 20,\r\n              padding: 10,\r\n            }}\r\n          >\r\n            <Row align=\"middle\" gutter={[4, 4]}>\r\n              <Col span={8}>\r\n                <Ramp price={price} address={address} networks={NETWORKS} />\r\n              </Col>\r\n\r\n              <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\r\n                <GasGauge gasPrice={gasPrice} />\r\n              </Col>\r\n              <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\r\n                <Button\r\n                  onClick={() => {\r\n                    window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\r\n                  }}\r\n                  size=\"large\"\r\n                  shape=\"round\"\r\n                >\r\n                  <span\r\n                    style={{ marginRight: 8 }}\r\n                    role=\"img\"\r\n                    aria-label=\"support\"\r\n                  >\r\n                    💬\r\n                  </span>\r\n                  Support\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row align=\"middle\" gutter={[4, 4]}>\r\n              <Col span={24}>\r\n                {\r\n                  /*  if the local provider has a signer, let's show the faucet:  */\r\n                  faucetAvailable ? (\r\n                    <Faucet\r\n                      localProvider={localProvider}\r\n                      price={price}\r\n                      ensProvider={mainnetProvider}\r\n                    />\r\n                  ) : (\r\n                    \"\"\r\n                  )\r\n                }\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n/*\r\n  Web3 modal helps us \"connect\" external wallets:\r\n*/\r\nconst web3Modal = new Web3Modal({\r\n  // network: \"mainnet\", // optional\r\n  cacheProvider: true, // optional\r\n  providerOptions: {\r\n    walletconnect: {\r\n      package: WalletConnectProvider, // required\r\n      options: {\r\n        infuraId: INFURA_ID,\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport default App;\r\n","import { useState } from \"react\";\r\nimport { Token, WETH, Fetcher, Route } from \"@uniswap/sdk\";\r\nimport { usePoller } from \"eth-hooks\";\r\n\r\nexport default function useExchangePrice(targetNetwork, mainnetProvider, pollTime) {\r\n  const [price, setPrice] = useState(0);\r\n\r\n  const pollPrice = () => {\r\n    async function getPrice() {\r\n      if(targetNetwork.price){\r\n        setPrice(targetNetwork.price)\r\n      }else{\r\n        const DAI = new Token(\r\n          mainnetProvider.network ? mainnetProvider.network.chainId : 1,\r\n          \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\r\n          18,\r\n        );\r\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\r\n        const route = new Route([pair], WETH[DAI.chainId]);\r\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\r\n      }\r\n    }\r\n    getPrice();\r\n  };\r\n  usePoller(pollPrice, pollTime || 9777);\r\n\r\n  return price;\r\n}\r\n","import { useState } from \"react\";\r\nimport { usePoller } from \"eth-hooks\";\r\nimport axios from \"axios\";\r\n\r\nexport default function useGasPrice(targetNetwork,speed) {\r\n  const [gasPrice, setGasPrice] = useState();\r\n  const loadGasPrice = async () => {\r\n    if(targetNetwork.gasPrice){\r\n      setGasPrice(targetNetwork.gasPrice);\r\n    }else{\r\n      axios\r\n        .get(\"https://ethgasstation.info/json/ethgasAPI.json\")\r\n        .then(response => {\r\n          const newGasPrice = response.data[speed || \"fast\"] * 100000000;\r\n          if (newGasPrice !== gasPrice) {\r\n            setGasPrice(newGasPrice);\r\n          }\r\n        })\r\n        .catch(error => console.log(error));\r\n    }\r\n  };\r\n\r\n  usePoller(loadGasPrice, 39999);\r\n  return gasPrice;\r\n}\r\n","/* eslint-disable import/no-dynamic-require */\r\n/* eslint-disable global-require */\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n/*\r\n  when you want to load an existing contract using just the provider, address, and ABI\r\n*/\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Enables you to load an existing mainnet DAI contract using the provider, address and abi\r\n\r\n  ~ How can I use? ~\r\n\r\n  const mainnetDAIContract = useExternalContractLoader(mainnetProvider, DAI_ADDRESS, DAI_ABI)\r\n\r\n  ~ Features ~\r\n\r\n  - Specify mainnetProvider\r\n  - Specify DAI_ADDRESS and DAI_ABI, you can load/write them using constants.js\r\n*/\r\nexport default function useExternalContractLoader(provider, address, ABI, optionalBytecode) {\r\n  const [contract, setContract] = useState();\r\n  useEffect(() => {\r\n    async function loadContract() {\r\n      if (typeof provider !== \"undefined\" && address && ABI) {\r\n        try {\r\n          // we need to check to see if this provider has a signer or not\r\n          let signer;\r\n          const accounts = await provider.listAccounts();\r\n          if (accounts && accounts.length > 0) {\r\n            signer = provider.getSigner();\r\n          } else {\r\n            signer = provider;\r\n          }\r\n\r\n          const customContract = new Contract(address, ABI, signer);\r\n          if(optionalBytecode) customContract.bytecode = optionalBytecode\r\n\r\n          setContract(customContract);\r\n        } catch (e) {\r\n          console.log(\"ERROR LOADING EXTERNAL CONTRACT AT \"+address+\" (check provider, address, and ABI)!!\", e);\r\n        }\r\n      }\r\n    }\r\n    loadContract();\r\n  }, [provider, address, ABI, optionalBytecode]);\r\n  return contract;\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Enables you to keep track of events \r\n\r\n  ~ How can I use? ~\r\n\r\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\r\n  - Specify the name of the contract, in this case it is \"YourContract\"\r\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\r\n  - Specify the provider \r\n*/\r\n\r\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\r\n  const [updates, setUpdates] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\r\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\r\n      provider.resetEventsBlock(startBlock);\r\n    }\r\n    if (contracts && contractName && contracts[contractName]) {\r\n      try {\r\n        contracts[contractName].on(eventName, (...args) => {\r\n          let blockNumber = args[args.length-1].blockNumber\r\n          setUpdates(messages => [Object.assign({blockNumber},args.pop().args), ...messages]);\r\n        });\r\n        return () => {\r\n          contracts[contractName].removeListener(eventName);\r\n        };\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n  }, [provider, startBlock, contracts, contractName, eventName]);\r\n\r\n  return updates;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\r\n\r\nconst themes = {\r\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\r\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\r\n};\r\n\r\nconst prevTheme = window.localStorage.getItem(\"theme\");\r\n\r\nlet subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\"\r\n\r\nconst client = new ApolloClient({\r\n  uri: subgraphUri,\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme ? prevTheme : \"light\"}>\r\n      <App subgraphUri={subgraphUri}/>\r\n    </ThemeSwitcherProvider>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n","module.exports = [\r\n  \"Qme9T6kxqGE13fFLMN7o1gPXnojgktmDPENDphkHf5gMsn\",\r\n  \"QmToMnfPdtTDqjtJ2FjqPuPQtYQh7Ughq2ZCaJ8yj5B9qh\",\r\n  \"QmTEQGEPggM5CXKnhqSwEyig2C2r4NtbTk6BqBthfDqn11\",\r\n  \"QmVJbUM3nftSWTvmwmqpNCswHsnqJ7oXwAm9erSHLLMwA9\",\r\n  \"QmZwLCzYR9aN4Urq9k7UtcEi7C4o22fhcFEyhGxxpPbe9C\",\r\n  \"QmNssM24YWndkbXdNQbFGnbyoK5DyWrpoRXdAZ1joGv3xT\",\r\n  \"QmRt3Se2vWwvhsEXdV8KKwpC5U2FuX5Zd4htBCTd7EpWrN\",\r\n  \"QmfBe45wDzgA4G33U5ggz3X5fMPXgVuYSKtLr7BTE7N1E7\",\r\n  \"QmWSBgXskKJuMuUCz9KtvUFvV1jVc97UKSFUX9XJfBoijS\",\r\n  \"QmVYpLtUbSnXLtT7eSFjaPnifjPUVr9QaQNNbLYaYtYwrT\",\r\n  \"QmeF1727dJwNKE66Y4baGtyk9dA6SdDXCc2SJCus2EVsAQ\",\r\n  \"QmSQ31Cn4nS2FwEDPMMs2pM682wZLosEkDTyWgjhYRcdgS\",\r\n  \"QmTpuhVJKJWjaRbwUmhPhPj2i38y12MfgoQZ1yHtFJiq6p\",\r\n  \"QmUFExYWG6KkkgN7zvGoBWr97d1RRQeQGHG5Nx83mymCWS\",\r\n  \"QmebbAqgcvM58jBPVdEsTqZjoMn7Njz8cJwPArgjbr9ghf\",\r\n  \"QmUjc4oorKhK3dRKQJQ7Rb3TQriLKA8rFJoURBf5N7NWk2\",\r\n  \"QmeMmdSgg5psqCfTxQmEtXkYKMqhTivxMNevFyfBbqY3Fp\",\r\n];\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 507;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 508;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 944;","module.exports = [\"AuctionFixedPrice\",\"AuctionUnfixedPrice\",\"SimpleToken\",\"MYERC721\"];"],"sourceRoot":""}